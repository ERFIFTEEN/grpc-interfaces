// Copyright 2019 Cartesi Pte. Ltd.

// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.


syntax = "proto3";

package StateFoldServer;

service StateFold {
  rpc GetBlock (GetBlockRequest) returns (Block) {}
  rpc GetBlockDiff (GetBlockDiffRequest) returns (BlockDiffResponse) {}
  rpc SubscribeNewBlocks (SubscribeNewBlocksRequest) returns (stream BlockStreamResponse) {}

  rpc GetState (GetStateRequest) returns (StateResponse) {}
  rpc GetStateDiff (GetStateDiffRequest) returns (StateDiffResponse) {}
  rpc SubscribeNewStates (SubscribeNewStatesRequest) returns (stream StateStreamResponse) {}
}

message InitialState {
  string json_data = 1;
}

message State {
  string json_data = 1;
}

message Hash {
  bytes data = 1; // bytes of size 32
}

message Bloom {
  bytes data = 1; // bytes of size 256
}

message Block {
  Hash hash = 1;
  uint64 number = 2;
  Hash parent_hash = 3;
  uint64 timestamp = 4;
  Bloom logs_bloom = 5;
}

message Blocks {
  repeated Block blocks = 1;
}

message QueryBlock {
  oneof id {
    uint64 depth = 1;
    Hash block_hash = 2;
    uint64 block_number = 3;
  }
}

message StateResponse {
  Block block = 1;
  State state = 2;
}

message States {
  repeated StateResponse states = 1;
}

message GetBlockRequest {
  QueryBlock query_block = 1; // None means latest
}

message GetBlockDiffRequest {
  Hash previous_block = 1;
  uint64 depth = 2;
}

message BlockDiffResponse {
  oneof response {
    Blocks new_blocks = 1;
    Blocks reorganized_blocks = 2;
  }
}

message SubscribeNewBlocksRequest {
  uint64 confirmations = 1;
}

message BlockStreamResponse {
  oneof response {
    Block new_block = 1;
    Blocks reorganized_blocks = 2;
  }
}

message GetStateRequest {
  InitialState initial_state = 1;
  QueryBlock query_block = 2; // None means latest
}

message GetStateDiffRequest {
  InitialState initial_state = 1;
  Hash previous_block = 2;
  uint64 depth = 3;
}

message StateDiffResponse {
  oneof response {
    States new_states = 1;
    States reorganized_states = 2;
  }
}

message SubscribeNewStatesRequest {
  InitialState initial_state = 1;
  uint64 confirmations = 2;
}

message StateStreamResponse {
  oneof response {
    StateResponse new_state = 1;
    States reorganized_states = 2;
  }
}

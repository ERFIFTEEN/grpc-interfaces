// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core.proto
#ifndef GRPC_core_2eproto__INCLUDED
#define GRPC_core_2eproto__INCLUDED

#include "core.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace CartesiCore {

class Machine final {
 public:
  static constexpr char const* service_full_name() {
    return "CartesiCore.Machine";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Run(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::CartesiCore::RunResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::RunResponse>> AsyncRun(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::RunResponse>>(AsyncRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::RunResponse>> PrepareAsyncRun(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::RunResponse>>(PrepareAsyncRunRaw(context, request, cq));
    }
    virtual ::grpc::Status Machine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::CartesiCore::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> AsyncMachine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(AsyncMachineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> PrepareAsyncMachine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(PrepareAsyncMachineRaw(context, request, cq));
    }
    virtual ::grpc::Status Snapshot(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> AsyncSnapshot(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(AsyncSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> PrepareAsyncSnapshot(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(PrepareAsyncSnapshotRaw(context, request, cq));
    }
    virtual ::grpc::Status Rollback(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> AsyncRollback(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(PrepareAsyncRollbackRaw(context, request, cq));
    }
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> AsyncShutdown(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status Inc(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> AsyncInc(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(AsyncIncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> PrepareAsyncInc(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(PrepareAsyncIncRaw(context, request, cq));
    }
    virtual ::grpc::Status Print(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> AsyncPrint(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(AsyncPrintRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> PrepareAsyncPrint(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(PrepareAsyncPrintRaw(context, request, cq));
    }
    virtual ::grpc::Status Step(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::AccessLog* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::AccessLog>> AsyncStep(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::AccessLog>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::AccessLog>> PrepareAsyncStep(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::AccessLog>>(PrepareAsyncStepRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Hash* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Hash>> AsyncGetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Hash>>(AsyncGetRootHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Hash>> PrepareAsyncGetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Hash>>(PrepareAsyncGetRootHashRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Run(::grpc::ClientContext* context, const ::CartesiCore::RunRequest* request, ::CartesiCore::RunResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Machine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Snapshot(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rollback(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Inc(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Print(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::AccessLog* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Hash* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::RunResponse>* AsyncRunRaw(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::RunResponse>* PrepareAsyncRunRaw(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* AsyncMachineRaw(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* PrepareAsyncMachineRaw(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* AsyncSnapshotRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* PrepareAsyncSnapshotRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* AsyncIncRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* PrepareAsyncIncRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* AsyncPrintRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* PrepareAsyncPrintRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::AccessLog>* AsyncStepRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::AccessLog>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Hash>* AsyncGetRootHashRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Hash>* PrepareAsyncGetRootHashRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Run(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::CartesiCore::RunResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::RunResponse>> AsyncRun(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::RunResponse>>(AsyncRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::RunResponse>> PrepareAsyncRun(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::RunResponse>>(PrepareAsyncRunRaw(context, request, cq));
    }
    ::grpc::Status Machine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::CartesiCore::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> AsyncMachine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(AsyncMachineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> PrepareAsyncMachine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(PrepareAsyncMachineRaw(context, request, cq));
    }
    ::grpc::Status Snapshot(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> AsyncSnapshot(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(AsyncSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> PrepareAsyncSnapshot(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(PrepareAsyncSnapshotRaw(context, request, cq));
    }
    ::grpc::Status Rollback(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> AsyncRollback(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(PrepareAsyncRollbackRaw(context, request, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> AsyncShutdown(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status Inc(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> AsyncInc(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(AsyncIncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> PrepareAsyncInc(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(PrepareAsyncIncRaw(context, request, cq));
    }
    ::grpc::Status Print(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> AsyncPrint(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(AsyncPrintRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> PrepareAsyncPrint(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(PrepareAsyncPrintRaw(context, request, cq));
    }
    ::grpc::Status Step(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::AccessLog* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::AccessLog>> AsyncStep(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::AccessLog>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::AccessLog>> PrepareAsyncStep(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::AccessLog>>(PrepareAsyncStepRaw(context, request, cq));
    }
    ::grpc::Status GetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Hash* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Hash>> AsyncGetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Hash>>(AsyncGetRootHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Hash>> PrepareAsyncGetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Hash>>(PrepareAsyncGetRootHashRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Run(::grpc::ClientContext* context, const ::CartesiCore::RunRequest* request, ::CartesiCore::RunResponse* response, std::function<void(::grpc::Status)>) override;
      void Machine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) override;
      void Snapshot(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) override;
      void Rollback(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) override;
      void Inc(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) override;
      void Print(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::AccessLog* response, std::function<void(::grpc::Status)>) override;
      void GetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Hash* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::RunResponse>* AsyncRunRaw(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::RunResponse>* PrepareAsyncRunRaw(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* AsyncMachineRaw(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* PrepareAsyncMachineRaw(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* AsyncSnapshotRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* PrepareAsyncSnapshotRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* AsyncIncRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* PrepareAsyncIncRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* AsyncPrintRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* PrepareAsyncPrintRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::AccessLog>* AsyncStepRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::AccessLog>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Hash>* AsyncGetRootHashRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Hash>* PrepareAsyncGetRootHashRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Run_;
    const ::grpc::internal::RpcMethod rpcmethod_Machine_;
    const ::grpc::internal::RpcMethod rpcmethod_Snapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_Rollback_;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_Inc_;
    const ::grpc::internal::RpcMethod rpcmethod_Print_;
    const ::grpc::internal::RpcMethod rpcmethod_Step_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRootHash_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Run(::grpc::ServerContext* context, const ::CartesiCore::RunRequest* request, ::CartesiCore::RunResponse* response);
    virtual ::grpc::Status Machine(::grpc::ServerContext* context, const ::CartesiCore::MachineRequest* request, ::CartesiCore::Void* response);
    virtual ::grpc::Status Snapshot(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response);
    virtual ::grpc::Status Rollback(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response);
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response);
    virtual ::grpc::Status Inc(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response);
    virtual ::grpc::Status Print(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response);
    virtual ::grpc::Status Step(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::AccessLog* response);
    virtual ::grpc::Status GetRootHash(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Hash* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Run() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Run(::grpc::ServerContext* context, const ::CartesiCore::RunRequest* request, ::CartesiCore::RunResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRun(::grpc::ServerContext* context, ::CartesiCore::RunRequest* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::RunResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Machine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Machine() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Machine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Machine(::grpc::ServerContext* context, const ::CartesiCore::MachineRequest* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMachine(::grpc::ServerContext* context, ::CartesiCore::MachineRequest* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Snapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Snapshot() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Snapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Snapshot(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSnapshot(::grpc::ServerContext* context, ::CartesiCore::Void* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Rollback() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback(::grpc::ServerContext* context, ::CartesiCore::Void* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::CartesiCore::Void* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Inc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Inc() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Inc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Inc(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInc(::grpc::ServerContext* context, ::CartesiCore::Void* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Print : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Print() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Print() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Print(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrint(::grpc::ServerContext* context, ::CartesiCore::Void* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Step() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::AccessLog* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::CartesiCore::Void* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::AccessLog>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRootHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRootHash() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetRootHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootHash(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Hash* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRootHash(::grpc::ServerContext* context, ::CartesiCore::Void* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::Hash>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Run<WithAsyncMethod_Machine<WithAsyncMethod_Snapshot<WithAsyncMethod_Rollback<WithAsyncMethod_Shutdown<WithAsyncMethod_Inc<WithAsyncMethod_Print<WithAsyncMethod_Step<WithAsyncMethod_GetRootHash<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Run() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Run(::grpc::ServerContext* context, const ::CartesiCore::RunRequest* request, ::CartesiCore::RunResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Machine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Machine() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Machine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Machine(::grpc::ServerContext* context, const ::CartesiCore::MachineRequest* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Snapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Snapshot() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Snapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Snapshot(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Rollback() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Inc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Inc() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Inc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Inc(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Print : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Print() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Print() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Print(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Step() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::AccessLog* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRootHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRootHash() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetRootHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootHash(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Hash* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Run() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Run(::grpc::ServerContext* context, const ::CartesiCore::RunRequest* request, ::CartesiCore::RunResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Machine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Machine() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Machine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Machine(::grpc::ServerContext* context, const ::CartesiCore::MachineRequest* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMachine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Snapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Snapshot() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Snapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Snapshot(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Rollback() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Shutdown() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Inc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Inc() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Inc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Inc(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Print : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Print() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Print() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Print(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Step() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::AccessLog* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRootHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRootHash() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetRootHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootHash(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Hash* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRootHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Run() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiCore::RunRequest, ::CartesiCore::RunResponse>(std::bind(&WithStreamedUnaryMethod_Run<BaseClass>::StreamedRun, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Run(::grpc::ServerContext* context, const ::CartesiCore::RunRequest* request, ::CartesiCore::RunResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiCore::RunRequest,::CartesiCore::RunResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Machine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Machine() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiCore::MachineRequest, ::CartesiCore::Void>(std::bind(&WithStreamedUnaryMethod_Machine<BaseClass>::StreamedMachine, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Machine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Machine(::grpc::ServerContext* context, const ::CartesiCore::MachineRequest* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMachine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiCore::MachineRequest,::CartesiCore::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Snapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Snapshot() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiCore::Void, ::CartesiCore::Void>(std::bind(&WithStreamedUnaryMethod_Snapshot<BaseClass>::StreamedSnapshot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Snapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Snapshot(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiCore::Void,::CartesiCore::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Rollback() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiCore::Void, ::CartesiCore::Void>(std::bind(&WithStreamedUnaryMethod_Rollback<BaseClass>::StreamedRollback, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiCore::Void,::CartesiCore::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiCore::Void, ::CartesiCore::Void>(std::bind(&WithStreamedUnaryMethod_Shutdown<BaseClass>::StreamedShutdown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiCore::Void,::CartesiCore::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Inc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Inc() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiCore::Void, ::CartesiCore::Void>(std::bind(&WithStreamedUnaryMethod_Inc<BaseClass>::StreamedInc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Inc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Inc(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiCore::Void,::CartesiCore::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Print : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Print() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiCore::Void, ::CartesiCore::Void>(std::bind(&WithStreamedUnaryMethod_Print<BaseClass>::StreamedPrint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Print() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Print(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiCore::Void,::CartesiCore::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Step() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiCore::Void, ::CartesiCore::AccessLog>(std::bind(&WithStreamedUnaryMethod_Step<BaseClass>::StreamedStep, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::AccessLog* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiCore::Void,::CartesiCore::AccessLog>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRootHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRootHash() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiCore::Void, ::CartesiCore::Hash>(std::bind(&WithStreamedUnaryMethod_GetRootHash<BaseClass>::StreamedGetRootHash, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRootHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRootHash(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Hash* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRootHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiCore::Void,::CartesiCore::Hash>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Run<WithStreamedUnaryMethod_Machine<WithStreamedUnaryMethod_Snapshot<WithStreamedUnaryMethod_Rollback<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_Inc<WithStreamedUnaryMethod_Print<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_GetRootHash<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Run<WithStreamedUnaryMethod_Machine<WithStreamedUnaryMethod_Snapshot<WithStreamedUnaryMethod_Rollback<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_Inc<WithStreamedUnaryMethod_Print<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_GetRootHash<Service > > > > > > > > > StreamedService;
};

}  // namespace CartesiCore


#endif  // GRPC_core_2eproto__INCLUDED

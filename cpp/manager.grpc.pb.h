// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: manager.proto
#ifndef GRPC_manager_2eproto__INCLUDED
#define GRPC_manager_2eproto__INCLUDED

#include "manager.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace CartesiManager {

class MachineManager final {
 public:
  static constexpr char const* service_full_name() {
    return "CartesiManager.MachineManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::CartesiManager::MachineHash* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::MachineHash>> AsyncNewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::MachineHash>>(AsyncNewSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::MachineHash>> PrepareAsyncNewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::MachineHash>>(PrepareAsyncNewSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status SessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::CartesiManager::SessionRunResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionRunResponse>> AsyncSessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionRunResponse>>(AsyncSessionRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionRunResponse>> PrepareAsyncSessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionRunResponse>>(PrepareAsyncSessionRunRaw(context, request, cq));
    }
    virtual ::grpc::Status SessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::CartesiManager::SessionStepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionStepResponse>> AsyncSessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionStepResponse>>(AsyncSessionStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionStepResponse>> PrepareAsyncSessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionStepResponse>>(PrepareAsyncSessionStepRaw(context, request, cq));
    }
    virtual ::grpc::Status CommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::CartesiCore::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> AsyncCommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(AsyncCommunicateReferenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>> PrepareAsyncCommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>>(PrepareAsyncCommunicateReferenceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void NewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest* request, ::CartesiManager::MachineHash* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest* request, ::CartesiManager::SessionRunResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest* request, ::CartesiManager::SessionStepResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::MachineHash>* AsyncNewSessionRaw(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::MachineHash>* PrepareAsyncNewSessionRaw(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionRunResponse>* AsyncSessionRunRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionRunResponse>* PrepareAsyncSessionRunRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionStepResponse>* AsyncSessionStepRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiManager::SessionStepResponse>* PrepareAsyncSessionStepRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* AsyncCommunicateReferenceRaw(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CartesiCore::Void>* PrepareAsyncCommunicateReferenceRaw(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::CartesiManager::MachineHash* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::MachineHash>> AsyncNewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::MachineHash>>(AsyncNewSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::MachineHash>> PrepareAsyncNewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::MachineHash>>(PrepareAsyncNewSessionRaw(context, request, cq));
    }
    ::grpc::Status SessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::CartesiManager::SessionRunResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionRunResponse>> AsyncSessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionRunResponse>>(AsyncSessionRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionRunResponse>> PrepareAsyncSessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionRunResponse>>(PrepareAsyncSessionRunRaw(context, request, cq));
    }
    ::grpc::Status SessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::CartesiManager::SessionStepResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionStepResponse>> AsyncSessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionStepResponse>>(AsyncSessionStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionStepResponse>> PrepareAsyncSessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionStepResponse>>(PrepareAsyncSessionStepRaw(context, request, cq));
    }
    ::grpc::Status CommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::CartesiCore::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> AsyncCommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(AsyncCommunicateReferenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>> PrepareAsyncCommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>>(PrepareAsyncCommunicateReferenceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void NewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest* request, ::CartesiManager::MachineHash* response, std::function<void(::grpc::Status)>) override;
      void SessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest* request, ::CartesiManager::SessionRunResponse* response, std::function<void(::grpc::Status)>) override;
      void SessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest* request, ::CartesiManager::SessionStepResponse* response, std::function<void(::grpc::Status)>) override;
      void CommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::CartesiManager::MachineHash>* AsyncNewSessionRaw(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiManager::MachineHash>* PrepareAsyncNewSessionRaw(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionRunResponse>* AsyncSessionRunRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionRunResponse>* PrepareAsyncSessionRunRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionStepResponse>* AsyncSessionStepRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionStepResponse>* PrepareAsyncSessionStepRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* AsyncCommunicateReferenceRaw(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* PrepareAsyncCommunicateReferenceRaw(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NewSession_;
    const ::grpc::internal::RpcMethod rpcmethod_SessionRun_;
    const ::grpc::internal::RpcMethod rpcmethod_SessionStep_;
    const ::grpc::internal::RpcMethod rpcmethod_CommunicateReference_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NewSession(::grpc::ServerContext* context, const ::CartesiManager::NewSessionRequest* request, ::CartesiManager::MachineHash* response);
    virtual ::grpc::Status SessionRun(::grpc::ServerContext* context, const ::CartesiManager::SessionRunRequest* request, ::CartesiManager::SessionRunResponse* response);
    virtual ::grpc::Status SessionStep(::grpc::ServerContext* context, const ::CartesiManager::SessionStepRequest* request, ::CartesiManager::SessionStepResponse* response);
    virtual ::grpc::Status CommunicateReference(::grpc::ServerContext* context, const ::CartesiManager::ReferenceRequest* request, ::CartesiCore::Void* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NewSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NewSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewSession(::grpc::ServerContext* context, const ::CartesiManager::NewSessionRequest* request, ::CartesiManager::MachineHash* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewSession(::grpc::ServerContext* context, ::CartesiManager::NewSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::CartesiManager::MachineHash>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SessionRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SessionRun() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SessionRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionRun(::grpc::ServerContext* context, const ::CartesiManager::SessionRunRequest* request, ::CartesiManager::SessionRunResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionRun(::grpc::ServerContext* context, ::CartesiManager::SessionRunRequest* request, ::grpc::ServerAsyncResponseWriter< ::CartesiManager::SessionRunResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SessionStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SessionStep() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SessionStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionStep(::grpc::ServerContext* context, const ::CartesiManager::SessionStepRequest* request, ::CartesiManager::SessionStepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionStep(::grpc::ServerContext* context, ::CartesiManager::SessionStepRequest* request, ::grpc::ServerAsyncResponseWriter< ::CartesiManager::SessionStepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CommunicateReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CommunicateReference() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CommunicateReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunicateReference(::grpc::ServerContext* context, const ::CartesiManager::ReferenceRequest* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommunicateReference(::grpc::ServerContext* context, ::CartesiManager::ReferenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::CartesiCore::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NewSession<WithAsyncMethod_SessionRun<WithAsyncMethod_SessionStep<WithAsyncMethod_CommunicateReference<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_NewSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NewSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewSession(::grpc::ServerContext* context, const ::CartesiManager::NewSessionRequest* request, ::CartesiManager::MachineHash* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SessionRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SessionRun() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SessionRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionRun(::grpc::ServerContext* context, const ::CartesiManager::SessionRunRequest* request, ::CartesiManager::SessionRunResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SessionStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SessionStep() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SessionStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionStep(::grpc::ServerContext* context, const ::CartesiManager::SessionStepRequest* request, ::CartesiManager::SessionStepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CommunicateReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CommunicateReference() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CommunicateReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunicateReference(::grpc::ServerContext* context, const ::CartesiManager::ReferenceRequest* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_NewSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NewSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewSession(::grpc::ServerContext* context, const ::CartesiManager::NewSessionRequest* request, ::CartesiManager::MachineHash* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SessionRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SessionRun() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SessionRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionRun(::grpc::ServerContext* context, const ::CartesiManager::SessionRunRequest* request, ::CartesiManager::SessionRunResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SessionStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SessionStep() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SessionStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionStep(::grpc::ServerContext* context, const ::CartesiManager::SessionStepRequest* request, ::CartesiManager::SessionStepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CommunicateReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CommunicateReference() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CommunicateReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunicateReference(::grpc::ServerContext* context, const ::CartesiManager::ReferenceRequest* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommunicateReference(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiManager::NewSessionRequest, ::CartesiManager::MachineHash>(std::bind(&WithStreamedUnaryMethod_NewSession<BaseClass>::StreamedNewSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewSession(::grpc::ServerContext* context, const ::CartesiManager::NewSessionRequest* request, ::CartesiManager::MachineHash* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiManager::NewSessionRequest,::CartesiManager::MachineHash>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SessionRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SessionRun() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiManager::SessionRunRequest, ::CartesiManager::SessionRunResponse>(std::bind(&WithStreamedUnaryMethod_SessionRun<BaseClass>::StreamedSessionRun, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SessionRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SessionRun(::grpc::ServerContext* context, const ::CartesiManager::SessionRunRequest* request, ::CartesiManager::SessionRunResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSessionRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiManager::SessionRunRequest,::CartesiManager::SessionRunResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SessionStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SessionStep() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiManager::SessionStepRequest, ::CartesiManager::SessionStepResponse>(std::bind(&WithStreamedUnaryMethod_SessionStep<BaseClass>::StreamedSessionStep, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SessionStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SessionStep(::grpc::ServerContext* context, const ::CartesiManager::SessionStepRequest* request, ::CartesiManager::SessionStepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSessionStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiManager::SessionStepRequest,::CartesiManager::SessionStepResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CommunicateReference : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CommunicateReference() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::CartesiManager::ReferenceRequest, ::CartesiCore::Void>(std::bind(&WithStreamedUnaryMethod_CommunicateReference<BaseClass>::StreamedCommunicateReference, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CommunicateReference() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CommunicateReference(::grpc::ServerContext* context, const ::CartesiManager::ReferenceRequest* request, ::CartesiCore::Void* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommunicateReference(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CartesiManager::ReferenceRequest,::CartesiCore::Void>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NewSession<WithStreamedUnaryMethod_SessionRun<WithStreamedUnaryMethod_SessionStep<WithStreamedUnaryMethod_CommunicateReference<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NewSession<WithStreamedUnaryMethod_SessionRun<WithStreamedUnaryMethod_SessionStep<WithStreamedUnaryMethod_CommunicateReference<Service > > > > StreamedService;
};

}  // namespace CartesiManager


#endif  // GRPC_manager_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core.proto

#include "core.pb.h"
#include "core.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace CartesiCore {

static const char* Machine_method_names[] = {
  "/CartesiCore.Machine/Run",
  "/CartesiCore.Machine/Machine",
  "/CartesiCore.Machine/Snapshot",
  "/CartesiCore.Machine/Rollback",
  "/CartesiCore.Machine/Shutdown",
  "/CartesiCore.Machine/Inc",
  "/CartesiCore.Machine/Print",
  "/CartesiCore.Machine/Step",
  "/CartesiCore.Machine/GetRootHash",
};

std::unique_ptr< Machine::Stub> Machine::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Machine::Stub> stub(new Machine::Stub(channel));
  return stub;
}

Machine::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Run_(Machine_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Machine_(Machine_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Snapshot_(Machine_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rollback_(Machine_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Shutdown_(Machine_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Inc_(Machine_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Print_(Machine_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Step_(Machine_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRootHash_(Machine_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Machine::Stub::Run(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::CartesiCore::RunResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Run_, context, request, response);
}

void Machine::Stub::experimental_async::Run(::grpc::ClientContext* context, const ::CartesiCore::RunRequest* request, ::CartesiCore::RunResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Run_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::RunResponse>* Machine::Stub::AsyncRunRaw(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::RunResponse>::Create(channel_.get(), cq, rpcmethod_Run_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::RunResponse>* Machine::Stub::PrepareAsyncRunRaw(::grpc::ClientContext* context, const ::CartesiCore::RunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::RunResponse>::Create(channel_.get(), cq, rpcmethod_Run_, context, request, false);
}

::grpc::Status Machine::Stub::Machine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::CartesiCore::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Machine_, context, request, response);
}

void Machine::Stub::experimental_async::Machine(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Machine_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::AsyncMachineRaw(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Machine_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::PrepareAsyncMachineRaw(::grpc::ClientContext* context, const ::CartesiCore::MachineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Machine_, context, request, false);
}

::grpc::Status Machine::Stub::Snapshot(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Snapshot_, context, request, response);
}

void Machine::Stub::experimental_async::Snapshot(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Snapshot_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::AsyncSnapshotRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Snapshot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::PrepareAsyncSnapshotRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Snapshot_, context, request, false);
}

::grpc::Status Machine::Stub::Rollback(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rollback_, context, request, response);
}

void Machine::Stub::experimental_async::Rollback(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rollback_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::AsyncRollbackRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Rollback_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Rollback_, context, request, false);
}

::grpc::Status Machine::Stub::Shutdown(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void Machine::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Shutdown_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Shutdown_, context, request, false);
}

::grpc::Status Machine::Stub::Inc(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Inc_, context, request, response);
}

void Machine::Stub::experimental_async::Inc(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Inc_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::AsyncIncRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Inc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::PrepareAsyncIncRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Inc_, context, request, false);
}

::grpc::Status Machine::Stub::Print(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Print_, context, request, response);
}

void Machine::Stub::experimental_async::Print(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Print_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::AsyncPrintRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Print_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* Machine::Stub::PrepareAsyncPrintRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_Print_, context, request, false);
}

::grpc::Status Machine::Stub::Step(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::AccessLog* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Step_, context, request, response);
}

void Machine::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::AccessLog* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::AccessLog>* Machine::Stub::AsyncStepRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::AccessLog>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::AccessLog>* Machine::Stub::PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::AccessLog>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, false);
}

::grpc::Status Machine::Stub::GetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::CartesiCore::Hash* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRootHash_, context, request, response);
}

void Machine::Stub::experimental_async::GetRootHash(::grpc::ClientContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Hash* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRootHash_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Hash>* Machine::Stub::AsyncGetRootHashRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Hash>::Create(channel_.get(), cq, rpcmethod_GetRootHash_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Hash>* Machine::Stub::PrepareAsyncGetRootHashRaw(::grpc::ClientContext* context, const ::CartesiCore::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Hash>::Create(channel_.get(), cq, rpcmethod_GetRootHash_, context, request, false);
}

Machine::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Machine_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Machine::Service, ::CartesiCore::RunRequest, ::CartesiCore::RunResponse>(
          std::mem_fn(&Machine::Service::Run), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Machine_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Machine::Service, ::CartesiCore::MachineRequest, ::CartesiCore::Void>(
          std::mem_fn(&Machine::Service::Machine), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Machine_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Machine::Service, ::CartesiCore::Void, ::CartesiCore::Void>(
          std::mem_fn(&Machine::Service::Snapshot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Machine_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Machine::Service, ::CartesiCore::Void, ::CartesiCore::Void>(
          std::mem_fn(&Machine::Service::Rollback), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Machine_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Machine::Service, ::CartesiCore::Void, ::CartesiCore::Void>(
          std::mem_fn(&Machine::Service::Shutdown), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Machine_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Machine::Service, ::CartesiCore::Void, ::CartesiCore::Void>(
          std::mem_fn(&Machine::Service::Inc), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Machine_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Machine::Service, ::CartesiCore::Void, ::CartesiCore::Void>(
          std::mem_fn(&Machine::Service::Print), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Machine_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Machine::Service, ::CartesiCore::Void, ::CartesiCore::AccessLog>(
          std::mem_fn(&Machine::Service::Step), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Machine_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Machine::Service, ::CartesiCore::Void, ::CartesiCore::Hash>(
          std::mem_fn(&Machine::Service::GetRootHash), this)));
}

Machine::Service::~Service() {
}

::grpc::Status Machine::Service::Run(::grpc::ServerContext* context, const ::CartesiCore::RunRequest* request, ::CartesiCore::RunResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Machine::Service::Machine(::grpc::ServerContext* context, const ::CartesiCore::MachineRequest* request, ::CartesiCore::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Machine::Service::Snapshot(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Machine::Service::Rollback(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Machine::Service::Shutdown(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Machine::Service::Inc(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Machine::Service::Print(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Machine::Service::Step(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::AccessLog* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Machine::Service::GetRootHash(::grpc::ServerContext* context, const ::CartesiCore::Void* request, ::CartesiCore::Hash* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CartesiCore


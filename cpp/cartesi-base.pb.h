// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartesi-base.proto

#ifndef PROTOBUF_INCLUDED_cartesi_2dbase_2eproto
#define PROTOBUF_INCLUDED_cartesi_2dbase_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cartesi_2dbase_2eproto 

namespace protobuf_cartesi_2dbase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[19];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cartesi_2dbase_2eproto
namespace CartesiCore {
class Access;
class AccessDefaultTypeInternal;
extern AccessDefaultTypeInternal _Access_default_instance_;
class AccessLog;
class AccessLogDefaultTypeInternal;
extern AccessLogDefaultTypeInternal _AccessLog_default_instance_;
class BracketNote;
class BracketNoteDefaultTypeInternal;
extern BracketNoteDefaultTypeInternal _BracketNote_default_instance_;
class CLINT;
class CLINTDefaultTypeInternal;
extern CLINTDefaultTypeInternal _CLINT_default_instance_;
class CLINTState;
class CLINTStateDefaultTypeInternal;
extern CLINTStateDefaultTypeInternal _CLINTState_default_instance_;
class Drive;
class DriveDefaultTypeInternal;
extern DriveDefaultTypeInternal _Drive_default_instance_;
class HTIF;
class HTIFDefaultTypeInternal;
extern HTIFDefaultTypeInternal _HTIF_default_instance_;
class HTIFState;
class HTIFStateDefaultTypeInternal;
extern HTIFStateDefaultTypeInternal _HTIFState_default_instance_;
class Hash;
class HashDefaultTypeInternal;
extern HashDefaultTypeInternal _Hash_default_instance_;
class MachineRequest;
class MachineRequestDefaultTypeInternal;
extern MachineRequestDefaultTypeInternal _MachineRequest_default_instance_;
class Processor;
class ProcessorDefaultTypeInternal;
extern ProcessorDefaultTypeInternal _Processor_default_instance_;
class ProcessorState;
class ProcessorStateDefaultTypeInternal;
extern ProcessorStateDefaultTypeInternal _ProcessorState_default_instance_;
class Proof;
class ProofDefaultTypeInternal;
extern ProofDefaultTypeInternal _Proof_default_instance_;
class RAM;
class RAMDefaultTypeInternal;
extern RAMDefaultTypeInternal _RAM_default_instance_;
class ROM;
class ROMDefaultTypeInternal;
extern ROMDefaultTypeInternal _ROM_default_instance_;
class RunRequest;
class RunRequestDefaultTypeInternal;
extern RunRequestDefaultTypeInternal _RunRequest_default_instance_;
class RunResponse;
class RunResponseDefaultTypeInternal;
extern RunResponseDefaultTypeInternal _RunResponse_default_instance_;
class Void;
class VoidDefaultTypeInternal;
extern VoidDefaultTypeInternal _Void_default_instance_;
class Word;
class WordDefaultTypeInternal;
extern WordDefaultTypeInternal _Word_default_instance_;
}  // namespace CartesiCore
namespace google {
namespace protobuf {
template<> ::CartesiCore::Access* Arena::CreateMaybeMessage<::CartesiCore::Access>(Arena*);
template<> ::CartesiCore::AccessLog* Arena::CreateMaybeMessage<::CartesiCore::AccessLog>(Arena*);
template<> ::CartesiCore::BracketNote* Arena::CreateMaybeMessage<::CartesiCore::BracketNote>(Arena*);
template<> ::CartesiCore::CLINT* Arena::CreateMaybeMessage<::CartesiCore::CLINT>(Arena*);
template<> ::CartesiCore::CLINTState* Arena::CreateMaybeMessage<::CartesiCore::CLINTState>(Arena*);
template<> ::CartesiCore::Drive* Arena::CreateMaybeMessage<::CartesiCore::Drive>(Arena*);
template<> ::CartesiCore::HTIF* Arena::CreateMaybeMessage<::CartesiCore::HTIF>(Arena*);
template<> ::CartesiCore::HTIFState* Arena::CreateMaybeMessage<::CartesiCore::HTIFState>(Arena*);
template<> ::CartesiCore::Hash* Arena::CreateMaybeMessage<::CartesiCore::Hash>(Arena*);
template<> ::CartesiCore::MachineRequest* Arena::CreateMaybeMessage<::CartesiCore::MachineRequest>(Arena*);
template<> ::CartesiCore::Processor* Arena::CreateMaybeMessage<::CartesiCore::Processor>(Arena*);
template<> ::CartesiCore::ProcessorState* Arena::CreateMaybeMessage<::CartesiCore::ProcessorState>(Arena*);
template<> ::CartesiCore::Proof* Arena::CreateMaybeMessage<::CartesiCore::Proof>(Arena*);
template<> ::CartesiCore::RAM* Arena::CreateMaybeMessage<::CartesiCore::RAM>(Arena*);
template<> ::CartesiCore::ROM* Arena::CreateMaybeMessage<::CartesiCore::ROM>(Arena*);
template<> ::CartesiCore::RunRequest* Arena::CreateMaybeMessage<::CartesiCore::RunRequest>(Arena*);
template<> ::CartesiCore::RunResponse* Arena::CreateMaybeMessage<::CartesiCore::RunResponse>(Arena*);
template<> ::CartesiCore::Void* Arena::CreateMaybeMessage<::CartesiCore::Void>(Arena*);
template<> ::CartesiCore::Word* Arena::CreateMaybeMessage<::CartesiCore::Word>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CartesiCore {

enum BracketNote_BracketNoteType {
  BracketNote_BracketNoteType_DUMMY = 0,
  BracketNote_BracketNoteType_BEGIN = 1,
  BracketNote_BracketNoteType_END = 2,
  BracketNote_BracketNoteType_INVALID = 3,
  BracketNote_BracketNoteType_BracketNote_BracketNoteType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BracketNote_BracketNoteType_BracketNote_BracketNoteType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BracketNote_BracketNoteType_IsValid(int value);
const BracketNote_BracketNoteType BracketNote_BracketNoteType_BracketNoteType_MIN = BracketNote_BracketNoteType_DUMMY;
const BracketNote_BracketNoteType BracketNote_BracketNoteType_BracketNoteType_MAX = BracketNote_BracketNoteType_INVALID;
const int BracketNote_BracketNoteType_BracketNoteType_ARRAYSIZE = BracketNote_BracketNoteType_BracketNoteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BracketNote_BracketNoteType_descriptor();
inline const ::std::string& BracketNote_BracketNoteType_Name(BracketNote_BracketNoteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BracketNote_BracketNoteType_descriptor(), value);
}
inline bool BracketNote_BracketNoteType_Parse(
    const ::std::string& name, BracketNote_BracketNoteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BracketNote_BracketNoteType>(
    BracketNote_BracketNoteType_descriptor(), name, value);
}
enum AccessOperation {
  READ = 0,
  WRITE = 1,
  AccessOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AccessOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AccessOperation_IsValid(int value);
const AccessOperation AccessOperation_MIN = READ;
const AccessOperation AccessOperation_MAX = WRITE;
const int AccessOperation_ARRAYSIZE = AccessOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccessOperation_descriptor();
inline const ::std::string& AccessOperation_Name(AccessOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccessOperation_descriptor(), value);
}
inline bool AccessOperation_Parse(
    const ::std::string& name, AccessOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccessOperation>(
    AccessOperation_descriptor(), name, value);
}
// ===================================================================

class Void : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.Void) */ {
 public:
  Void();
  virtual ~Void();

  Void(const Void& from);

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Void(Void&& from) noexcept
    : Void() {
    *this = ::std::move(from);
  }

  inline Void& operator=(Void&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Void& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Void* internal_default_instance() {
    return reinterpret_cast<const Void*>(
               &_Void_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Void* other);
  friend void swap(Void& a, Void& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Void* New() const final {
    return CreateMaybeMessage<Void>(NULL);
  }

  Void* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Void>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Void& from);
  void MergeFrom(const Void& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Void* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CartesiCore.Void)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hash : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.Hash) */ {
 public:
  Hash();
  virtual ~Hash();

  Hash(const Hash& from);

  inline Hash& operator=(const Hash& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hash(Hash&& from) noexcept
    : Hash() {
    *this = ::std::move(from);
  }

  inline Hash& operator=(Hash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Hash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hash* internal_default_instance() {
    return reinterpret_cast<const Hash*>(
               &_Hash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Hash* other);
  friend void swap(Hash& a, Hash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hash* New() const final {
    return CreateMaybeMessage<Hash>(NULL);
  }

  Hash* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Hash>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Hash& from);
  void MergeFrom(const Hash& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:CartesiCore.Hash)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcessorState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.ProcessorState) */ {
 public:
  ProcessorState();
  virtual ~ProcessorState();

  ProcessorState(const ProcessorState& from);

  inline ProcessorState& operator=(const ProcessorState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessorState(ProcessorState&& from) noexcept
    : ProcessorState() {
    *this = ::std::move(from);
  }

  inline ProcessorState& operator=(ProcessorState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessorState& default_instance();

  enum X1OneofCase {
    kX1 = 1,
    X1_ONEOF_NOT_SET = 0,
  };

  enum X2OneofCase {
    kX2 = 2,
    X2_ONEOF_NOT_SET = 0,
  };

  enum X3OneofCase {
    kX3 = 3,
    X3_ONEOF_NOT_SET = 0,
  };

  enum X4OneofCase {
    kX4 = 4,
    X4_ONEOF_NOT_SET = 0,
  };

  enum X5OneofCase {
    kX5 = 5,
    X5_ONEOF_NOT_SET = 0,
  };

  enum X6OneofCase {
    kX6 = 6,
    X6_ONEOF_NOT_SET = 0,
  };

  enum X7OneofCase {
    kX7 = 7,
    X7_ONEOF_NOT_SET = 0,
  };

  enum X8OneofCase {
    kX8 = 8,
    X8_ONEOF_NOT_SET = 0,
  };

  enum X9OneofCase {
    kX9 = 9,
    X9_ONEOF_NOT_SET = 0,
  };

  enum X10OneofCase {
    kX10 = 10,
    X10_ONEOF_NOT_SET = 0,
  };

  enum X11OneofCase {
    kX11 = 11,
    X11_ONEOF_NOT_SET = 0,
  };

  enum X12OneofCase {
    kX12 = 12,
    X12_ONEOF_NOT_SET = 0,
  };

  enum X13OneofCase {
    kX13 = 13,
    X13_ONEOF_NOT_SET = 0,
  };

  enum X14OneofCase {
    kX14 = 14,
    X14_ONEOF_NOT_SET = 0,
  };

  enum X15OneofCase {
    kX15 = 15,
    X15_ONEOF_NOT_SET = 0,
  };

  enum X16OneofCase {
    kX16 = 16,
    X16_ONEOF_NOT_SET = 0,
  };

  enum X17OneofCase {
    kX17 = 17,
    X17_ONEOF_NOT_SET = 0,
  };

  enum X18OneofCase {
    kX18 = 18,
    X18_ONEOF_NOT_SET = 0,
  };

  enum X19OneofCase {
    kX19 = 19,
    X19_ONEOF_NOT_SET = 0,
  };

  enum X20OneofCase {
    kX20 = 20,
    X20_ONEOF_NOT_SET = 0,
  };

  enum X21OneofCase {
    kX21 = 21,
    X21_ONEOF_NOT_SET = 0,
  };

  enum X22OneofCase {
    kX22 = 22,
    X22_ONEOF_NOT_SET = 0,
  };

  enum X23OneofCase {
    kX23 = 23,
    X23_ONEOF_NOT_SET = 0,
  };

  enum X24OneofCase {
    kX24 = 24,
    X24_ONEOF_NOT_SET = 0,
  };

  enum X25OneofCase {
    kX25 = 25,
    X25_ONEOF_NOT_SET = 0,
  };

  enum X26OneofCase {
    kX26 = 26,
    X26_ONEOF_NOT_SET = 0,
  };

  enum X27OneofCase {
    kX27 = 27,
    X27_ONEOF_NOT_SET = 0,
  };

  enum X28OneofCase {
    kX28 = 28,
    X28_ONEOF_NOT_SET = 0,
  };

  enum X29OneofCase {
    kX29 = 29,
    X29_ONEOF_NOT_SET = 0,
  };

  enum X30OneofCase {
    kX30 = 30,
    X30_ONEOF_NOT_SET = 0,
  };

  enum X31OneofCase {
    kX31 = 31,
    X31_ONEOF_NOT_SET = 0,
  };

  enum PcOneofCase {
    kPc = 32,
    PC_ONEOF_NOT_SET = 0,
  };

  enum MvendoridOneofCase {
    kMvendorid = 33,
    MVENDORID_ONEOF_NOT_SET = 0,
  };

  enum MarchidOneofCase {
    kMarchid = 34,
    MARCHID_ONEOF_NOT_SET = 0,
  };

  enum MimpidOneofCase {
    kMimpid = 35,
    MIMPID_ONEOF_NOT_SET = 0,
  };

  enum McycleOneofCase {
    kMcycle = 36,
    MCYCLE_ONEOF_NOT_SET = 0,
  };

  enum MinstretOneofCase {
    kMinstret = 37,
    MINSTRET_ONEOF_NOT_SET = 0,
  };

  enum MstatusOneofCase {
    kMstatus = 38,
    MSTATUS_ONEOF_NOT_SET = 0,
  };

  enum MtvecOneofCase {
    kMtvec = 39,
    MTVEC_ONEOF_NOT_SET = 0,
  };

  enum MscratchOneofCase {
    kMscratch = 40,
    MSCRATCH_ONEOF_NOT_SET = 0,
  };

  enum MepcOneofCase {
    kMepc = 41,
    MEPC_ONEOF_NOT_SET = 0,
  };

  enum McauseOneofCase {
    kMcause = 42,
    MCAUSE_ONEOF_NOT_SET = 0,
  };

  enum MtvalOneofCase {
    kMtval = 43,
    MTVAL_ONEOF_NOT_SET = 0,
  };

  enum MisaOneofCase {
    kMisa = 44,
    MISA_ONEOF_NOT_SET = 0,
  };

  enum MieOneofCase {
    kMie = 45,
    MIE_ONEOF_NOT_SET = 0,
  };

  enum MipOneofCase {
    kMip = 46,
    MIP_ONEOF_NOT_SET = 0,
  };

  enum MedelegOneofCase {
    kMedeleg = 47,
    MEDELEG_ONEOF_NOT_SET = 0,
  };

  enum MidelegOneofCase {
    kMideleg = 48,
    MIDELEG_ONEOF_NOT_SET = 0,
  };

  enum McounterenOneofCase {
    kMcounteren = 49,
    MCOUNTEREN_ONEOF_NOT_SET = 0,
  };

  enum StvecOneofCase {
    kStvec = 50,
    STVEC_ONEOF_NOT_SET = 0,
  };

  enum SscratchOneofCase {
    kSscratch = 51,
    SSCRATCH_ONEOF_NOT_SET = 0,
  };

  enum SepcOneofCase {
    kSepc = 52,
    SEPC_ONEOF_NOT_SET = 0,
  };

  enum ScauseOneofCase {
    kScause = 53,
    SCAUSE_ONEOF_NOT_SET = 0,
  };

  enum StvalOneofCase {
    kStval = 54,
    STVAL_ONEOF_NOT_SET = 0,
  };

  enum SatpOneofCase {
    kSatp = 55,
    SATP_ONEOF_NOT_SET = 0,
  };

  enum ScounterenOneofCase {
    kScounteren = 56,
    SCOUNTEREN_ONEOF_NOT_SET = 0,
  };

  enum IlrscOneofCase {
    kIlrsc = 57,
    ILRSC_ONEOF_NOT_SET = 0,
  };

  enum IflagsOneofCase {
    kIflags = 58,
    IFLAGS_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessorState* internal_default_instance() {
    return reinterpret_cast<const ProcessorState*>(
               &_ProcessorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ProcessorState* other);
  friend void swap(ProcessorState& a, ProcessorState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessorState* New() const final {
    return CreateMaybeMessage<ProcessorState>(NULL);
  }

  ProcessorState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcessorState& from);
  void MergeFrom(const ProcessorState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 x1 = 1;
  private:
  bool has_x1() const;
  public:
  void clear_x1();
  static const int kX1FieldNumber = 1;
  ::google::protobuf::uint64 x1() const;
  void set_x1(::google::protobuf::uint64 value);

  // uint64 x2 = 2;
  private:
  bool has_x2() const;
  public:
  void clear_x2();
  static const int kX2FieldNumber = 2;
  ::google::protobuf::uint64 x2() const;
  void set_x2(::google::protobuf::uint64 value);

  // uint64 x3 = 3;
  private:
  bool has_x3() const;
  public:
  void clear_x3();
  static const int kX3FieldNumber = 3;
  ::google::protobuf::uint64 x3() const;
  void set_x3(::google::protobuf::uint64 value);

  // uint64 x4 = 4;
  private:
  bool has_x4() const;
  public:
  void clear_x4();
  static const int kX4FieldNumber = 4;
  ::google::protobuf::uint64 x4() const;
  void set_x4(::google::protobuf::uint64 value);

  // uint64 x5 = 5;
  private:
  bool has_x5() const;
  public:
  void clear_x5();
  static const int kX5FieldNumber = 5;
  ::google::protobuf::uint64 x5() const;
  void set_x5(::google::protobuf::uint64 value);

  // uint64 x6 = 6;
  private:
  bool has_x6() const;
  public:
  void clear_x6();
  static const int kX6FieldNumber = 6;
  ::google::protobuf::uint64 x6() const;
  void set_x6(::google::protobuf::uint64 value);

  // uint64 x7 = 7;
  private:
  bool has_x7() const;
  public:
  void clear_x7();
  static const int kX7FieldNumber = 7;
  ::google::protobuf::uint64 x7() const;
  void set_x7(::google::protobuf::uint64 value);

  // uint64 x8 = 8;
  private:
  bool has_x8() const;
  public:
  void clear_x8();
  static const int kX8FieldNumber = 8;
  ::google::protobuf::uint64 x8() const;
  void set_x8(::google::protobuf::uint64 value);

  // uint64 x9 = 9;
  private:
  bool has_x9() const;
  public:
  void clear_x9();
  static const int kX9FieldNumber = 9;
  ::google::protobuf::uint64 x9() const;
  void set_x9(::google::protobuf::uint64 value);

  // uint64 x10 = 10;
  private:
  bool has_x10() const;
  public:
  void clear_x10();
  static const int kX10FieldNumber = 10;
  ::google::protobuf::uint64 x10() const;
  void set_x10(::google::protobuf::uint64 value);

  // uint64 x11 = 11;
  private:
  bool has_x11() const;
  public:
  void clear_x11();
  static const int kX11FieldNumber = 11;
  ::google::protobuf::uint64 x11() const;
  void set_x11(::google::protobuf::uint64 value);

  // uint64 x12 = 12;
  private:
  bool has_x12() const;
  public:
  void clear_x12();
  static const int kX12FieldNumber = 12;
  ::google::protobuf::uint64 x12() const;
  void set_x12(::google::protobuf::uint64 value);

  // uint64 x13 = 13;
  private:
  bool has_x13() const;
  public:
  void clear_x13();
  static const int kX13FieldNumber = 13;
  ::google::protobuf::uint64 x13() const;
  void set_x13(::google::protobuf::uint64 value);

  // uint64 x14 = 14;
  private:
  bool has_x14() const;
  public:
  void clear_x14();
  static const int kX14FieldNumber = 14;
  ::google::protobuf::uint64 x14() const;
  void set_x14(::google::protobuf::uint64 value);

  // uint64 x15 = 15;
  private:
  bool has_x15() const;
  public:
  void clear_x15();
  static const int kX15FieldNumber = 15;
  ::google::protobuf::uint64 x15() const;
  void set_x15(::google::protobuf::uint64 value);

  // uint64 x16 = 16;
  private:
  bool has_x16() const;
  public:
  void clear_x16();
  static const int kX16FieldNumber = 16;
  ::google::protobuf::uint64 x16() const;
  void set_x16(::google::protobuf::uint64 value);

  // uint64 x17 = 17;
  private:
  bool has_x17() const;
  public:
  void clear_x17();
  static const int kX17FieldNumber = 17;
  ::google::protobuf::uint64 x17() const;
  void set_x17(::google::protobuf::uint64 value);

  // uint64 x18 = 18;
  private:
  bool has_x18() const;
  public:
  void clear_x18();
  static const int kX18FieldNumber = 18;
  ::google::protobuf::uint64 x18() const;
  void set_x18(::google::protobuf::uint64 value);

  // uint64 x19 = 19;
  private:
  bool has_x19() const;
  public:
  void clear_x19();
  static const int kX19FieldNumber = 19;
  ::google::protobuf::uint64 x19() const;
  void set_x19(::google::protobuf::uint64 value);

  // uint64 x20 = 20;
  private:
  bool has_x20() const;
  public:
  void clear_x20();
  static const int kX20FieldNumber = 20;
  ::google::protobuf::uint64 x20() const;
  void set_x20(::google::protobuf::uint64 value);

  // uint64 x21 = 21;
  private:
  bool has_x21() const;
  public:
  void clear_x21();
  static const int kX21FieldNumber = 21;
  ::google::protobuf::uint64 x21() const;
  void set_x21(::google::protobuf::uint64 value);

  // uint64 x22 = 22;
  private:
  bool has_x22() const;
  public:
  void clear_x22();
  static const int kX22FieldNumber = 22;
  ::google::protobuf::uint64 x22() const;
  void set_x22(::google::protobuf::uint64 value);

  // uint64 x23 = 23;
  private:
  bool has_x23() const;
  public:
  void clear_x23();
  static const int kX23FieldNumber = 23;
  ::google::protobuf::uint64 x23() const;
  void set_x23(::google::protobuf::uint64 value);

  // uint64 x24 = 24;
  private:
  bool has_x24() const;
  public:
  void clear_x24();
  static const int kX24FieldNumber = 24;
  ::google::protobuf::uint64 x24() const;
  void set_x24(::google::protobuf::uint64 value);

  // uint64 x25 = 25;
  private:
  bool has_x25() const;
  public:
  void clear_x25();
  static const int kX25FieldNumber = 25;
  ::google::protobuf::uint64 x25() const;
  void set_x25(::google::protobuf::uint64 value);

  // uint64 x26 = 26;
  private:
  bool has_x26() const;
  public:
  void clear_x26();
  static const int kX26FieldNumber = 26;
  ::google::protobuf::uint64 x26() const;
  void set_x26(::google::protobuf::uint64 value);

  // uint64 x27 = 27;
  private:
  bool has_x27() const;
  public:
  void clear_x27();
  static const int kX27FieldNumber = 27;
  ::google::protobuf::uint64 x27() const;
  void set_x27(::google::protobuf::uint64 value);

  // uint64 x28 = 28;
  private:
  bool has_x28() const;
  public:
  void clear_x28();
  static const int kX28FieldNumber = 28;
  ::google::protobuf::uint64 x28() const;
  void set_x28(::google::protobuf::uint64 value);

  // uint64 x29 = 29;
  private:
  bool has_x29() const;
  public:
  void clear_x29();
  static const int kX29FieldNumber = 29;
  ::google::protobuf::uint64 x29() const;
  void set_x29(::google::protobuf::uint64 value);

  // uint64 x30 = 30;
  private:
  bool has_x30() const;
  public:
  void clear_x30();
  static const int kX30FieldNumber = 30;
  ::google::protobuf::uint64 x30() const;
  void set_x30(::google::protobuf::uint64 value);

  // uint64 x31 = 31;
  private:
  bool has_x31() const;
  public:
  void clear_x31();
  static const int kX31FieldNumber = 31;
  ::google::protobuf::uint64 x31() const;
  void set_x31(::google::protobuf::uint64 value);

  // uint64 pc = 32;
  private:
  bool has_pc() const;
  public:
  void clear_pc();
  static const int kPcFieldNumber = 32;
  ::google::protobuf::uint64 pc() const;
  void set_pc(::google::protobuf::uint64 value);

  // uint64 mvendorid = 33;
  private:
  bool has_mvendorid() const;
  public:
  void clear_mvendorid();
  static const int kMvendoridFieldNumber = 33;
  ::google::protobuf::uint64 mvendorid() const;
  void set_mvendorid(::google::protobuf::uint64 value);

  // uint64 marchid = 34;
  private:
  bool has_marchid() const;
  public:
  void clear_marchid();
  static const int kMarchidFieldNumber = 34;
  ::google::protobuf::uint64 marchid() const;
  void set_marchid(::google::protobuf::uint64 value);

  // uint64 mimpid = 35;
  private:
  bool has_mimpid() const;
  public:
  void clear_mimpid();
  static const int kMimpidFieldNumber = 35;
  ::google::protobuf::uint64 mimpid() const;
  void set_mimpid(::google::protobuf::uint64 value);

  // uint64 mcycle = 36;
  private:
  bool has_mcycle() const;
  public:
  void clear_mcycle();
  static const int kMcycleFieldNumber = 36;
  ::google::protobuf::uint64 mcycle() const;
  void set_mcycle(::google::protobuf::uint64 value);

  // uint64 minstret = 37;
  private:
  bool has_minstret() const;
  public:
  void clear_minstret();
  static const int kMinstretFieldNumber = 37;
  ::google::protobuf::uint64 minstret() const;
  void set_minstret(::google::protobuf::uint64 value);

  // uint64 mstatus = 38;
  private:
  bool has_mstatus() const;
  public:
  void clear_mstatus();
  static const int kMstatusFieldNumber = 38;
  ::google::protobuf::uint64 mstatus() const;
  void set_mstatus(::google::protobuf::uint64 value);

  // uint64 mtvec = 39;
  private:
  bool has_mtvec() const;
  public:
  void clear_mtvec();
  static const int kMtvecFieldNumber = 39;
  ::google::protobuf::uint64 mtvec() const;
  void set_mtvec(::google::protobuf::uint64 value);

  // uint64 mscratch = 40;
  private:
  bool has_mscratch() const;
  public:
  void clear_mscratch();
  static const int kMscratchFieldNumber = 40;
  ::google::protobuf::uint64 mscratch() const;
  void set_mscratch(::google::protobuf::uint64 value);

  // uint64 mepc = 41;
  private:
  bool has_mepc() const;
  public:
  void clear_mepc();
  static const int kMepcFieldNumber = 41;
  ::google::protobuf::uint64 mepc() const;
  void set_mepc(::google::protobuf::uint64 value);

  // uint64 mcause = 42;
  private:
  bool has_mcause() const;
  public:
  void clear_mcause();
  static const int kMcauseFieldNumber = 42;
  ::google::protobuf::uint64 mcause() const;
  void set_mcause(::google::protobuf::uint64 value);

  // uint64 mtval = 43;
  private:
  bool has_mtval() const;
  public:
  void clear_mtval();
  static const int kMtvalFieldNumber = 43;
  ::google::protobuf::uint64 mtval() const;
  void set_mtval(::google::protobuf::uint64 value);

  // uint64 misa = 44;
  private:
  bool has_misa() const;
  public:
  void clear_misa();
  static const int kMisaFieldNumber = 44;
  ::google::protobuf::uint64 misa() const;
  void set_misa(::google::protobuf::uint64 value);

  // uint64 mie = 45;
  private:
  bool has_mie() const;
  public:
  void clear_mie();
  static const int kMieFieldNumber = 45;
  ::google::protobuf::uint64 mie() const;
  void set_mie(::google::protobuf::uint64 value);

  // uint64 mip = 46;
  private:
  bool has_mip() const;
  public:
  void clear_mip();
  static const int kMipFieldNumber = 46;
  ::google::protobuf::uint64 mip() const;
  void set_mip(::google::protobuf::uint64 value);

  // uint64 medeleg = 47;
  private:
  bool has_medeleg() const;
  public:
  void clear_medeleg();
  static const int kMedelegFieldNumber = 47;
  ::google::protobuf::uint64 medeleg() const;
  void set_medeleg(::google::protobuf::uint64 value);

  // uint64 mideleg = 48;
  private:
  bool has_mideleg() const;
  public:
  void clear_mideleg();
  static const int kMidelegFieldNumber = 48;
  ::google::protobuf::uint64 mideleg() const;
  void set_mideleg(::google::protobuf::uint64 value);

  // uint64 mcounteren = 49;
  private:
  bool has_mcounteren() const;
  public:
  void clear_mcounteren();
  static const int kMcounterenFieldNumber = 49;
  ::google::protobuf::uint64 mcounteren() const;
  void set_mcounteren(::google::protobuf::uint64 value);

  // uint64 stvec = 50;
  private:
  bool has_stvec() const;
  public:
  void clear_stvec();
  static const int kStvecFieldNumber = 50;
  ::google::protobuf::uint64 stvec() const;
  void set_stvec(::google::protobuf::uint64 value);

  // uint64 sscratch = 51;
  private:
  bool has_sscratch() const;
  public:
  void clear_sscratch();
  static const int kSscratchFieldNumber = 51;
  ::google::protobuf::uint64 sscratch() const;
  void set_sscratch(::google::protobuf::uint64 value);

  // uint64 sepc = 52;
  private:
  bool has_sepc() const;
  public:
  void clear_sepc();
  static const int kSepcFieldNumber = 52;
  ::google::protobuf::uint64 sepc() const;
  void set_sepc(::google::protobuf::uint64 value);

  // uint64 scause = 53;
  private:
  bool has_scause() const;
  public:
  void clear_scause();
  static const int kScauseFieldNumber = 53;
  ::google::protobuf::uint64 scause() const;
  void set_scause(::google::protobuf::uint64 value);

  // uint64 stval = 54;
  private:
  bool has_stval() const;
  public:
  void clear_stval();
  static const int kStvalFieldNumber = 54;
  ::google::protobuf::uint64 stval() const;
  void set_stval(::google::protobuf::uint64 value);

  // uint64 satp = 55;
  private:
  bool has_satp() const;
  public:
  void clear_satp();
  static const int kSatpFieldNumber = 55;
  ::google::protobuf::uint64 satp() const;
  void set_satp(::google::protobuf::uint64 value);

  // uint64 scounteren = 56;
  private:
  bool has_scounteren() const;
  public:
  void clear_scounteren();
  static const int kScounterenFieldNumber = 56;
  ::google::protobuf::uint64 scounteren() const;
  void set_scounteren(::google::protobuf::uint64 value);

  // uint64 ilrsc = 57;
  private:
  bool has_ilrsc() const;
  public:
  void clear_ilrsc();
  static const int kIlrscFieldNumber = 57;
  ::google::protobuf::uint64 ilrsc() const;
  void set_ilrsc(::google::protobuf::uint64 value);

  // uint64 iflags = 58;
  private:
  bool has_iflags() const;
  public:
  void clear_iflags();
  static const int kIflagsFieldNumber = 58;
  ::google::protobuf::uint64 iflags() const;
  void set_iflags(::google::protobuf::uint64 value);

  void clear_x1_oneof();
  X1OneofCase x1_oneof_case() const;
  void clear_x2_oneof();
  X2OneofCase x2_oneof_case() const;
  void clear_x3_oneof();
  X3OneofCase x3_oneof_case() const;
  void clear_x4_oneof();
  X4OneofCase x4_oneof_case() const;
  void clear_x5_oneof();
  X5OneofCase x5_oneof_case() const;
  void clear_x6_oneof();
  X6OneofCase x6_oneof_case() const;
  void clear_x7_oneof();
  X7OneofCase x7_oneof_case() const;
  void clear_x8_oneof();
  X8OneofCase x8_oneof_case() const;
  void clear_x9_oneof();
  X9OneofCase x9_oneof_case() const;
  void clear_x10_oneof();
  X10OneofCase x10_oneof_case() const;
  void clear_x11_oneof();
  X11OneofCase x11_oneof_case() const;
  void clear_x12_oneof();
  X12OneofCase x12_oneof_case() const;
  void clear_x13_oneof();
  X13OneofCase x13_oneof_case() const;
  void clear_x14_oneof();
  X14OneofCase x14_oneof_case() const;
  void clear_x15_oneof();
  X15OneofCase x15_oneof_case() const;
  void clear_x16_oneof();
  X16OneofCase x16_oneof_case() const;
  void clear_x17_oneof();
  X17OneofCase x17_oneof_case() const;
  void clear_x18_oneof();
  X18OneofCase x18_oneof_case() const;
  void clear_x19_oneof();
  X19OneofCase x19_oneof_case() const;
  void clear_x20_oneof();
  X20OneofCase x20_oneof_case() const;
  void clear_x21_oneof();
  X21OneofCase x21_oneof_case() const;
  void clear_x22_oneof();
  X22OneofCase x22_oneof_case() const;
  void clear_x23_oneof();
  X23OneofCase x23_oneof_case() const;
  void clear_x24_oneof();
  X24OneofCase x24_oneof_case() const;
  void clear_x25_oneof();
  X25OneofCase x25_oneof_case() const;
  void clear_x26_oneof();
  X26OneofCase x26_oneof_case() const;
  void clear_x27_oneof();
  X27OneofCase x27_oneof_case() const;
  void clear_x28_oneof();
  X28OneofCase x28_oneof_case() const;
  void clear_x29_oneof();
  X29OneofCase x29_oneof_case() const;
  void clear_x30_oneof();
  X30OneofCase x30_oneof_case() const;
  void clear_x31_oneof();
  X31OneofCase x31_oneof_case() const;
  void clear_pc_oneof();
  PcOneofCase pc_oneof_case() const;
  void clear_mvendorid_oneof();
  MvendoridOneofCase mvendorid_oneof_case() const;
  void clear_marchid_oneof();
  MarchidOneofCase marchid_oneof_case() const;
  void clear_mimpid_oneof();
  MimpidOneofCase mimpid_oneof_case() const;
  void clear_mcycle_oneof();
  McycleOneofCase mcycle_oneof_case() const;
  void clear_minstret_oneof();
  MinstretOneofCase minstret_oneof_case() const;
  void clear_mstatus_oneof();
  MstatusOneofCase mstatus_oneof_case() const;
  void clear_mtvec_oneof();
  MtvecOneofCase mtvec_oneof_case() const;
  void clear_mscratch_oneof();
  MscratchOneofCase mscratch_oneof_case() const;
  void clear_mepc_oneof();
  MepcOneofCase mepc_oneof_case() const;
  void clear_mcause_oneof();
  McauseOneofCase mcause_oneof_case() const;
  void clear_mtval_oneof();
  MtvalOneofCase mtval_oneof_case() const;
  void clear_misa_oneof();
  MisaOneofCase misa_oneof_case() const;
  void clear_mie_oneof();
  MieOneofCase mie_oneof_case() const;
  void clear_mip_oneof();
  MipOneofCase mip_oneof_case() const;
  void clear_medeleg_oneof();
  MedelegOneofCase medeleg_oneof_case() const;
  void clear_mideleg_oneof();
  MidelegOneofCase mideleg_oneof_case() const;
  void clear_mcounteren_oneof();
  McounterenOneofCase mcounteren_oneof_case() const;
  void clear_stvec_oneof();
  StvecOneofCase stvec_oneof_case() const;
  void clear_sscratch_oneof();
  SscratchOneofCase sscratch_oneof_case() const;
  void clear_sepc_oneof();
  SepcOneofCase sepc_oneof_case() const;
  void clear_scause_oneof();
  ScauseOneofCase scause_oneof_case() const;
  void clear_stval_oneof();
  StvalOneofCase stval_oneof_case() const;
  void clear_satp_oneof();
  SatpOneofCase satp_oneof_case() const;
  void clear_scounteren_oneof();
  ScounterenOneofCase scounteren_oneof_case() const;
  void clear_ilrsc_oneof();
  IlrscOneofCase ilrsc_oneof_case() const;
  void clear_iflags_oneof();
  IflagsOneofCase iflags_oneof_case() const;
  // @@protoc_insertion_point(class_scope:CartesiCore.ProcessorState)
 private:
  void set_has_x1();
  void set_has_x2();
  void set_has_x3();
  void set_has_x4();
  void set_has_x5();
  void set_has_x6();
  void set_has_x7();
  void set_has_x8();
  void set_has_x9();
  void set_has_x10();
  void set_has_x11();
  void set_has_x12();
  void set_has_x13();
  void set_has_x14();
  void set_has_x15();
  void set_has_x16();
  void set_has_x17();
  void set_has_x18();
  void set_has_x19();
  void set_has_x20();
  void set_has_x21();
  void set_has_x22();
  void set_has_x23();
  void set_has_x24();
  void set_has_x25();
  void set_has_x26();
  void set_has_x27();
  void set_has_x28();
  void set_has_x29();
  void set_has_x30();
  void set_has_x31();
  void set_has_pc();
  void set_has_mvendorid();
  void set_has_marchid();
  void set_has_mimpid();
  void set_has_mcycle();
  void set_has_minstret();
  void set_has_mstatus();
  void set_has_mtvec();
  void set_has_mscratch();
  void set_has_mepc();
  void set_has_mcause();
  void set_has_mtval();
  void set_has_misa();
  void set_has_mie();
  void set_has_mip();
  void set_has_medeleg();
  void set_has_mideleg();
  void set_has_mcounteren();
  void set_has_stvec();
  void set_has_sscratch();
  void set_has_sepc();
  void set_has_scause();
  void set_has_stval();
  void set_has_satp();
  void set_has_scounteren();
  void set_has_ilrsc();
  void set_has_iflags();

  inline bool has_x1_oneof() const;
  inline void clear_has_x1_oneof();

  inline bool has_x2_oneof() const;
  inline void clear_has_x2_oneof();

  inline bool has_x3_oneof() const;
  inline void clear_has_x3_oneof();

  inline bool has_x4_oneof() const;
  inline void clear_has_x4_oneof();

  inline bool has_x5_oneof() const;
  inline void clear_has_x5_oneof();

  inline bool has_x6_oneof() const;
  inline void clear_has_x6_oneof();

  inline bool has_x7_oneof() const;
  inline void clear_has_x7_oneof();

  inline bool has_x8_oneof() const;
  inline void clear_has_x8_oneof();

  inline bool has_x9_oneof() const;
  inline void clear_has_x9_oneof();

  inline bool has_x10_oneof() const;
  inline void clear_has_x10_oneof();

  inline bool has_x11_oneof() const;
  inline void clear_has_x11_oneof();

  inline bool has_x12_oneof() const;
  inline void clear_has_x12_oneof();

  inline bool has_x13_oneof() const;
  inline void clear_has_x13_oneof();

  inline bool has_x14_oneof() const;
  inline void clear_has_x14_oneof();

  inline bool has_x15_oneof() const;
  inline void clear_has_x15_oneof();

  inline bool has_x16_oneof() const;
  inline void clear_has_x16_oneof();

  inline bool has_x17_oneof() const;
  inline void clear_has_x17_oneof();

  inline bool has_x18_oneof() const;
  inline void clear_has_x18_oneof();

  inline bool has_x19_oneof() const;
  inline void clear_has_x19_oneof();

  inline bool has_x20_oneof() const;
  inline void clear_has_x20_oneof();

  inline bool has_x21_oneof() const;
  inline void clear_has_x21_oneof();

  inline bool has_x22_oneof() const;
  inline void clear_has_x22_oneof();

  inline bool has_x23_oneof() const;
  inline void clear_has_x23_oneof();

  inline bool has_x24_oneof() const;
  inline void clear_has_x24_oneof();

  inline bool has_x25_oneof() const;
  inline void clear_has_x25_oneof();

  inline bool has_x26_oneof() const;
  inline void clear_has_x26_oneof();

  inline bool has_x27_oneof() const;
  inline void clear_has_x27_oneof();

  inline bool has_x28_oneof() const;
  inline void clear_has_x28_oneof();

  inline bool has_x29_oneof() const;
  inline void clear_has_x29_oneof();

  inline bool has_x30_oneof() const;
  inline void clear_has_x30_oneof();

  inline bool has_x31_oneof() const;
  inline void clear_has_x31_oneof();

  inline bool has_pc_oneof() const;
  inline void clear_has_pc_oneof();

  inline bool has_mvendorid_oneof() const;
  inline void clear_has_mvendorid_oneof();

  inline bool has_marchid_oneof() const;
  inline void clear_has_marchid_oneof();

  inline bool has_mimpid_oneof() const;
  inline void clear_has_mimpid_oneof();

  inline bool has_mcycle_oneof() const;
  inline void clear_has_mcycle_oneof();

  inline bool has_minstret_oneof() const;
  inline void clear_has_minstret_oneof();

  inline bool has_mstatus_oneof() const;
  inline void clear_has_mstatus_oneof();

  inline bool has_mtvec_oneof() const;
  inline void clear_has_mtvec_oneof();

  inline bool has_mscratch_oneof() const;
  inline void clear_has_mscratch_oneof();

  inline bool has_mepc_oneof() const;
  inline void clear_has_mepc_oneof();

  inline bool has_mcause_oneof() const;
  inline void clear_has_mcause_oneof();

  inline bool has_mtval_oneof() const;
  inline void clear_has_mtval_oneof();

  inline bool has_misa_oneof() const;
  inline void clear_has_misa_oneof();

  inline bool has_mie_oneof() const;
  inline void clear_has_mie_oneof();

  inline bool has_mip_oneof() const;
  inline void clear_has_mip_oneof();

  inline bool has_medeleg_oneof() const;
  inline void clear_has_medeleg_oneof();

  inline bool has_mideleg_oneof() const;
  inline void clear_has_mideleg_oneof();

  inline bool has_mcounteren_oneof() const;
  inline void clear_has_mcounteren_oneof();

  inline bool has_stvec_oneof() const;
  inline void clear_has_stvec_oneof();

  inline bool has_sscratch_oneof() const;
  inline void clear_has_sscratch_oneof();

  inline bool has_sepc_oneof() const;
  inline void clear_has_sepc_oneof();

  inline bool has_scause_oneof() const;
  inline void clear_has_scause_oneof();

  inline bool has_stval_oneof() const;
  inline void clear_has_stval_oneof();

  inline bool has_satp_oneof() const;
  inline void clear_has_satp_oneof();

  inline bool has_scounteren_oneof() const;
  inline void clear_has_scounteren_oneof();

  inline bool has_ilrsc_oneof() const;
  inline void clear_has_ilrsc_oneof();

  inline bool has_iflags_oneof() const;
  inline void clear_has_iflags_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union X1OneofUnion {
    X1OneofUnion() {}
    ::google::protobuf::uint64 x1_;
  } x1_oneof_;
  union X2OneofUnion {
    X2OneofUnion() {}
    ::google::protobuf::uint64 x2_;
  } x2_oneof_;
  union X3OneofUnion {
    X3OneofUnion() {}
    ::google::protobuf::uint64 x3_;
  } x3_oneof_;
  union X4OneofUnion {
    X4OneofUnion() {}
    ::google::protobuf::uint64 x4_;
  } x4_oneof_;
  union X5OneofUnion {
    X5OneofUnion() {}
    ::google::protobuf::uint64 x5_;
  } x5_oneof_;
  union X6OneofUnion {
    X6OneofUnion() {}
    ::google::protobuf::uint64 x6_;
  } x6_oneof_;
  union X7OneofUnion {
    X7OneofUnion() {}
    ::google::protobuf::uint64 x7_;
  } x7_oneof_;
  union X8OneofUnion {
    X8OneofUnion() {}
    ::google::protobuf::uint64 x8_;
  } x8_oneof_;
  union X9OneofUnion {
    X9OneofUnion() {}
    ::google::protobuf::uint64 x9_;
  } x9_oneof_;
  union X10OneofUnion {
    X10OneofUnion() {}
    ::google::protobuf::uint64 x10_;
  } x10_oneof_;
  union X11OneofUnion {
    X11OneofUnion() {}
    ::google::protobuf::uint64 x11_;
  } x11_oneof_;
  union X12OneofUnion {
    X12OneofUnion() {}
    ::google::protobuf::uint64 x12_;
  } x12_oneof_;
  union X13OneofUnion {
    X13OneofUnion() {}
    ::google::protobuf::uint64 x13_;
  } x13_oneof_;
  union X14OneofUnion {
    X14OneofUnion() {}
    ::google::protobuf::uint64 x14_;
  } x14_oneof_;
  union X15OneofUnion {
    X15OneofUnion() {}
    ::google::protobuf::uint64 x15_;
  } x15_oneof_;
  union X16OneofUnion {
    X16OneofUnion() {}
    ::google::protobuf::uint64 x16_;
  } x16_oneof_;
  union X17OneofUnion {
    X17OneofUnion() {}
    ::google::protobuf::uint64 x17_;
  } x17_oneof_;
  union X18OneofUnion {
    X18OneofUnion() {}
    ::google::protobuf::uint64 x18_;
  } x18_oneof_;
  union X19OneofUnion {
    X19OneofUnion() {}
    ::google::protobuf::uint64 x19_;
  } x19_oneof_;
  union X20OneofUnion {
    X20OneofUnion() {}
    ::google::protobuf::uint64 x20_;
  } x20_oneof_;
  union X21OneofUnion {
    X21OneofUnion() {}
    ::google::protobuf::uint64 x21_;
  } x21_oneof_;
  union X22OneofUnion {
    X22OneofUnion() {}
    ::google::protobuf::uint64 x22_;
  } x22_oneof_;
  union X23OneofUnion {
    X23OneofUnion() {}
    ::google::protobuf::uint64 x23_;
  } x23_oneof_;
  union X24OneofUnion {
    X24OneofUnion() {}
    ::google::protobuf::uint64 x24_;
  } x24_oneof_;
  union X25OneofUnion {
    X25OneofUnion() {}
    ::google::protobuf::uint64 x25_;
  } x25_oneof_;
  union X26OneofUnion {
    X26OneofUnion() {}
    ::google::protobuf::uint64 x26_;
  } x26_oneof_;
  union X27OneofUnion {
    X27OneofUnion() {}
    ::google::protobuf::uint64 x27_;
  } x27_oneof_;
  union X28OneofUnion {
    X28OneofUnion() {}
    ::google::protobuf::uint64 x28_;
  } x28_oneof_;
  union X29OneofUnion {
    X29OneofUnion() {}
    ::google::protobuf::uint64 x29_;
  } x29_oneof_;
  union X30OneofUnion {
    X30OneofUnion() {}
    ::google::protobuf::uint64 x30_;
  } x30_oneof_;
  union X31OneofUnion {
    X31OneofUnion() {}
    ::google::protobuf::uint64 x31_;
  } x31_oneof_;
  union PcOneofUnion {
    PcOneofUnion() {}
    ::google::protobuf::uint64 pc_;
  } pc_oneof_;
  union MvendoridOneofUnion {
    MvendoridOneofUnion() {}
    ::google::protobuf::uint64 mvendorid_;
  } mvendorid_oneof_;
  union MarchidOneofUnion {
    MarchidOneofUnion() {}
    ::google::protobuf::uint64 marchid_;
  } marchid_oneof_;
  union MimpidOneofUnion {
    MimpidOneofUnion() {}
    ::google::protobuf::uint64 mimpid_;
  } mimpid_oneof_;
  union McycleOneofUnion {
    McycleOneofUnion() {}
    ::google::protobuf::uint64 mcycle_;
  } mcycle_oneof_;
  union MinstretOneofUnion {
    MinstretOneofUnion() {}
    ::google::protobuf::uint64 minstret_;
  } minstret_oneof_;
  union MstatusOneofUnion {
    MstatusOneofUnion() {}
    ::google::protobuf::uint64 mstatus_;
  } mstatus_oneof_;
  union MtvecOneofUnion {
    MtvecOneofUnion() {}
    ::google::protobuf::uint64 mtvec_;
  } mtvec_oneof_;
  union MscratchOneofUnion {
    MscratchOneofUnion() {}
    ::google::protobuf::uint64 mscratch_;
  } mscratch_oneof_;
  union MepcOneofUnion {
    MepcOneofUnion() {}
    ::google::protobuf::uint64 mepc_;
  } mepc_oneof_;
  union McauseOneofUnion {
    McauseOneofUnion() {}
    ::google::protobuf::uint64 mcause_;
  } mcause_oneof_;
  union MtvalOneofUnion {
    MtvalOneofUnion() {}
    ::google::protobuf::uint64 mtval_;
  } mtval_oneof_;
  union MisaOneofUnion {
    MisaOneofUnion() {}
    ::google::protobuf::uint64 misa_;
  } misa_oneof_;
  union MieOneofUnion {
    MieOneofUnion() {}
    ::google::protobuf::uint64 mie_;
  } mie_oneof_;
  union MipOneofUnion {
    MipOneofUnion() {}
    ::google::protobuf::uint64 mip_;
  } mip_oneof_;
  union MedelegOneofUnion {
    MedelegOneofUnion() {}
    ::google::protobuf::uint64 medeleg_;
  } medeleg_oneof_;
  union MidelegOneofUnion {
    MidelegOneofUnion() {}
    ::google::protobuf::uint64 mideleg_;
  } mideleg_oneof_;
  union McounterenOneofUnion {
    McounterenOneofUnion() {}
    ::google::protobuf::uint64 mcounteren_;
  } mcounteren_oneof_;
  union StvecOneofUnion {
    StvecOneofUnion() {}
    ::google::protobuf::uint64 stvec_;
  } stvec_oneof_;
  union SscratchOneofUnion {
    SscratchOneofUnion() {}
    ::google::protobuf::uint64 sscratch_;
  } sscratch_oneof_;
  union SepcOneofUnion {
    SepcOneofUnion() {}
    ::google::protobuf::uint64 sepc_;
  } sepc_oneof_;
  union ScauseOneofUnion {
    ScauseOneofUnion() {}
    ::google::protobuf::uint64 scause_;
  } scause_oneof_;
  union StvalOneofUnion {
    StvalOneofUnion() {}
    ::google::protobuf::uint64 stval_;
  } stval_oneof_;
  union SatpOneofUnion {
    SatpOneofUnion() {}
    ::google::protobuf::uint64 satp_;
  } satp_oneof_;
  union ScounterenOneofUnion {
    ScounterenOneofUnion() {}
    ::google::protobuf::uint64 scounteren_;
  } scounteren_oneof_;
  union IlrscOneofUnion {
    IlrscOneofUnion() {}
    ::google::protobuf::uint64 ilrsc_;
  } ilrsc_oneof_;
  union IflagsOneofUnion {
    IflagsOneofUnion() {}
    ::google::protobuf::uint64 iflags_;
  } iflags_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[58];

  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Processor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.Processor) */ {
 public:
  Processor();
  virtual ~Processor();

  Processor(const Processor& from);

  inline Processor& operator=(const Processor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Processor(Processor&& from) noexcept
    : Processor() {
    *this = ::std::move(from);
  }

  inline Processor& operator=(Processor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Processor& default_instance();

  enum ProcessorOneofCase {
    kState = 1,
    kBacking = 2,
    PROCESSOR_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Processor* internal_default_instance() {
    return reinterpret_cast<const Processor*>(
               &_Processor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Processor* other);
  friend void swap(Processor& a, Processor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Processor* New() const final {
    return CreateMaybeMessage<Processor>(NULL);
  }

  Processor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Processor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Processor& from);
  void MergeFrom(const Processor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Processor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CartesiCore.ProcessorState state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  private:
  const ::CartesiCore::ProcessorState& _internal_state() const;
  public:
  const ::CartesiCore::ProcessorState& state() const;
  ::CartesiCore::ProcessorState* release_state();
  ::CartesiCore::ProcessorState* mutable_state();
  void set_allocated_state(::CartesiCore::ProcessorState* state);

  // string backing = 2;
  private:
  bool has_backing() const;
  public:
  void clear_backing();
  static const int kBackingFieldNumber = 2;
  const ::std::string& backing() const;
  void set_backing(const ::std::string& value);
  #if LANG_CXX11
  void set_backing(::std::string&& value);
  #endif
  void set_backing(const char* value);
  void set_backing(const char* value, size_t size);
  ::std::string* mutable_backing();
  ::std::string* release_backing();
  void set_allocated_backing(::std::string* backing);

  void clear_processor_oneof();
  ProcessorOneofCase processor_oneof_case() const;
  // @@protoc_insertion_point(class_scope:CartesiCore.Processor)
 private:
  void set_has_state();
  void set_has_backing();

  inline bool has_processor_oneof() const;
  inline void clear_has_processor_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ProcessorOneofUnion {
    ProcessorOneofUnion() {}
    ::CartesiCore::ProcessorState* state_;
    ::google::protobuf::internal::ArenaStringPtr backing_;
  } processor_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ROM : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.ROM) */ {
 public:
  ROM();
  virtual ~ROM();

  ROM(const ROM& from);

  inline ROM& operator=(const ROM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ROM(ROM&& from) noexcept
    : ROM() {
    *this = ::std::move(from);
  }

  inline ROM& operator=(ROM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ROM& default_instance();

  enum RomOneofCase {
    kBootargs = 1,
    kBacking = 2,
    ROM_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROM* internal_default_instance() {
    return reinterpret_cast<const ROM*>(
               &_ROM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ROM* other);
  friend void swap(ROM& a, ROM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ROM* New() const final {
    return CreateMaybeMessage<ROM>(NULL);
  }

  ROM* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ROM>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ROM& from);
  void MergeFrom(const ROM& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bootargs = 1;
  private:
  bool has_bootargs() const;
  public:
  void clear_bootargs();
  static const int kBootargsFieldNumber = 1;
  const ::std::string& bootargs() const;
  void set_bootargs(const ::std::string& value);
  #if LANG_CXX11
  void set_bootargs(::std::string&& value);
  #endif
  void set_bootargs(const char* value);
  void set_bootargs(const char* value, size_t size);
  ::std::string* mutable_bootargs();
  ::std::string* release_bootargs();
  void set_allocated_bootargs(::std::string* bootargs);

  // string backing = 2;
  private:
  bool has_backing() const;
  public:
  void clear_backing();
  static const int kBackingFieldNumber = 2;
  const ::std::string& backing() const;
  void set_backing(const ::std::string& value);
  #if LANG_CXX11
  void set_backing(::std::string&& value);
  #endif
  void set_backing(const char* value);
  void set_backing(const char* value, size_t size);
  ::std::string* mutable_backing();
  ::std::string* release_backing();
  void set_allocated_backing(::std::string* backing);

  void clear_rom_oneof();
  RomOneofCase rom_oneof_case() const;
  // @@protoc_insertion_point(class_scope:CartesiCore.ROM)
 private:
  void set_has_bootargs();
  void set_has_backing();

  inline bool has_rom_oneof() const;
  inline void clear_has_rom_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RomOneofUnion {
    RomOneofUnion() {}
    ::google::protobuf::internal::ArenaStringPtr bootargs_;
    ::google::protobuf::internal::ArenaStringPtr backing_;
  } rom_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RAM : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.RAM) */ {
 public:
  RAM();
  virtual ~RAM();

  RAM(const RAM& from);

  inline RAM& operator=(const RAM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RAM(RAM&& from) noexcept
    : RAM() {
    *this = ::std::move(from);
  }

  inline RAM& operator=(RAM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RAM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RAM* internal_default_instance() {
    return reinterpret_cast<const RAM*>(
               &_RAM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RAM* other);
  friend void swap(RAM& a, RAM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RAM* New() const final {
    return CreateMaybeMessage<RAM>(NULL);
  }

  RAM* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RAM>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RAM& from);
  void MergeFrom(const RAM& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RAM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string backing = 2;
  void clear_backing();
  static const int kBackingFieldNumber = 2;
  const ::std::string& backing() const;
  void set_backing(const ::std::string& value);
  #if LANG_CXX11
  void set_backing(::std::string&& value);
  #endif
  void set_backing(const char* value);
  void set_backing(const char* value, size_t size);
  ::std::string* mutable_backing();
  ::std::string* release_backing();
  void set_allocated_backing(::std::string* backing);

  // uint64 length = 1;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  ::google::protobuf::uint64 length() const;
  void set_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CartesiCore.RAM)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr backing_;
  ::google::protobuf::uint64 length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Drive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.Drive) */ {
 public:
  Drive();
  virtual ~Drive();

  Drive(const Drive& from);

  inline Drive& operator=(const Drive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Drive(Drive&& from) noexcept
    : Drive() {
    *this = ::std::move(from);
  }

  inline Drive& operator=(Drive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Drive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Drive* internal_default_instance() {
    return reinterpret_cast<const Drive*>(
               &_Drive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Drive* other);
  friend void swap(Drive& a, Drive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Drive* New() const final {
    return CreateMaybeMessage<Drive>(NULL);
  }

  Drive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Drive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Drive& from);
  void MergeFrom(const Drive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Drive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string backing = 3;
  void clear_backing();
  static const int kBackingFieldNumber = 3;
  const ::std::string& backing() const;
  void set_backing(const ::std::string& value);
  #if LANG_CXX11
  void set_backing(::std::string&& value);
  #endif
  void set_backing(const char* value);
  void set_backing(const char* value, size_t size);
  ::std::string* mutable_backing();
  ::std::string* release_backing();
  void set_allocated_backing(::std::string* backing);

  // string label = 5;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // uint64 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::uint64 start() const;
  void set_start(::google::protobuf::uint64 value);

  // uint64 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint64 length() const;
  void set_length(::google::protobuf::uint64 value);

  // bool shared = 4;
  void clear_shared();
  static const int kSharedFieldNumber = 4;
  bool shared() const;
  void set_shared(bool value);

  // @@protoc_insertion_point(class_scope:CartesiCore.Drive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr backing_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::uint64 start_;
  ::google::protobuf::uint64 length_;
  bool shared_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CLINTState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.CLINTState) */ {
 public:
  CLINTState();
  virtual ~CLINTState();

  CLINTState(const CLINTState& from);

  inline CLINTState& operator=(const CLINTState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLINTState(CLINTState&& from) noexcept
    : CLINTState() {
    *this = ::std::move(from);
  }

  inline CLINTState& operator=(CLINTState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CLINTState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLINTState* internal_default_instance() {
    return reinterpret_cast<const CLINTState*>(
               &_CLINTState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CLINTState* other);
  friend void swap(CLINTState& a, CLINTState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLINTState* New() const final {
    return CreateMaybeMessage<CLINTState>(NULL);
  }

  CLINTState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLINTState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLINTState& from);
  void MergeFrom(const CLINTState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLINTState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 mtime = 1;
  void clear_mtime();
  static const int kMtimeFieldNumber = 1;
  ::google::protobuf::uint64 mtime() const;
  void set_mtime(::google::protobuf::uint64 value);

  // uint64 mtimecmp = 2;
  void clear_mtimecmp();
  static const int kMtimecmpFieldNumber = 2;
  ::google::protobuf::uint64 mtimecmp() const;
  void set_mtimecmp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CartesiCore.CLINTState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 mtime_;
  ::google::protobuf::uint64 mtimecmp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CLINT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.CLINT) */ {
 public:
  CLINT();
  virtual ~CLINT();

  CLINT(const CLINT& from);

  inline CLINT& operator=(const CLINT& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLINT(CLINT&& from) noexcept
    : CLINT() {
    *this = ::std::move(from);
  }

  inline CLINT& operator=(CLINT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CLINT& default_instance();

  enum ClintOneofCase {
    kState = 1,
    kBacking = 2,
    CLINT_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLINT* internal_default_instance() {
    return reinterpret_cast<const CLINT*>(
               &_CLINT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CLINT* other);
  friend void swap(CLINT& a, CLINT& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLINT* New() const final {
    return CreateMaybeMessage<CLINT>(NULL);
  }

  CLINT* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLINT>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLINT& from);
  void MergeFrom(const CLINT& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLINT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CartesiCore.CLINTState state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  private:
  const ::CartesiCore::CLINTState& _internal_state() const;
  public:
  const ::CartesiCore::CLINTState& state() const;
  ::CartesiCore::CLINTState* release_state();
  ::CartesiCore::CLINTState* mutable_state();
  void set_allocated_state(::CartesiCore::CLINTState* state);

  // string backing = 2;
  private:
  bool has_backing() const;
  public:
  void clear_backing();
  static const int kBackingFieldNumber = 2;
  const ::std::string& backing() const;
  void set_backing(const ::std::string& value);
  #if LANG_CXX11
  void set_backing(::std::string&& value);
  #endif
  void set_backing(const char* value);
  void set_backing(const char* value, size_t size);
  ::std::string* mutable_backing();
  ::std::string* release_backing();
  void set_allocated_backing(::std::string* backing);

  void clear_clint_oneof();
  ClintOneofCase clint_oneof_case() const;
  // @@protoc_insertion_point(class_scope:CartesiCore.CLINT)
 private:
  void set_has_state();
  void set_has_backing();

  inline bool has_clint_oneof() const;
  inline void clear_has_clint_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ClintOneofUnion {
    ClintOneofUnion() {}
    ::CartesiCore::CLINTState* state_;
    ::google::protobuf::internal::ArenaStringPtr backing_;
  } clint_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HTIFState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.HTIFState) */ {
 public:
  HTIFState();
  virtual ~HTIFState();

  HTIFState(const HTIFState& from);

  inline HTIFState& operator=(const HTIFState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTIFState(HTIFState&& from) noexcept
    : HTIFState() {
    *this = ::std::move(from);
  }

  inline HTIFState& operator=(HTIFState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTIFState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTIFState* internal_default_instance() {
    return reinterpret_cast<const HTIFState*>(
               &_HTIFState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(HTIFState* other);
  friend void swap(HTIFState& a, HTIFState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTIFState* New() const final {
    return CreateMaybeMessage<HTIFState>(NULL);
  }

  HTIFState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HTIFState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HTIFState& from);
  void MergeFrom(const HTIFState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTIFState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 fromhost = 1;
  void clear_fromhost();
  static const int kFromhostFieldNumber = 1;
  ::google::protobuf::uint64 fromhost() const;
  void set_fromhost(::google::protobuf::uint64 value);

  // uint64 tohost = 2;
  void clear_tohost();
  static const int kTohostFieldNumber = 2;
  ::google::protobuf::uint64 tohost() const;
  void set_tohost(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CartesiCore.HTIFState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 fromhost_;
  ::google::protobuf::uint64 tohost_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HTIF : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.HTIF) */ {
 public:
  HTIF();
  virtual ~HTIF();

  HTIF(const HTIF& from);

  inline HTIF& operator=(const HTIF& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTIF(HTIF&& from) noexcept
    : HTIF() {
    *this = ::std::move(from);
  }

  inline HTIF& operator=(HTIF&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTIF& default_instance();

  enum HtifOneofCase {
    kState = 1,
    kBacking = 2,
    HTIF_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTIF* internal_default_instance() {
    return reinterpret_cast<const HTIF*>(
               &_HTIF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(HTIF* other);
  friend void swap(HTIF& a, HTIF& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTIF* New() const final {
    return CreateMaybeMessage<HTIF>(NULL);
  }

  HTIF* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HTIF>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HTIF& from);
  void MergeFrom(const HTIF& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTIF* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CartesiCore.HTIFState state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  private:
  const ::CartesiCore::HTIFState& _internal_state() const;
  public:
  const ::CartesiCore::HTIFState& state() const;
  ::CartesiCore::HTIFState* release_state();
  ::CartesiCore::HTIFState* mutable_state();
  void set_allocated_state(::CartesiCore::HTIFState* state);

  // string backing = 2;
  private:
  bool has_backing() const;
  public:
  void clear_backing();
  static const int kBackingFieldNumber = 2;
  const ::std::string& backing() const;
  void set_backing(const ::std::string& value);
  #if LANG_CXX11
  void set_backing(::std::string&& value);
  #endif
  void set_backing(const char* value);
  void set_backing(const char* value, size_t size);
  ::std::string* mutable_backing();
  ::std::string* release_backing();
  void set_allocated_backing(::std::string* backing);

  void clear_htif_oneof();
  HtifOneofCase htif_oneof_case() const;
  // @@protoc_insertion_point(class_scope:CartesiCore.HTIF)
 private:
  void set_has_state();
  void set_has_backing();

  inline bool has_htif_oneof() const;
  inline void clear_has_htif_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union HtifOneofUnion {
    HtifOneofUnion() {}
    ::CartesiCore::HTIFState* state_;
    ::google::protobuf::internal::ArenaStringPtr backing_;
  } htif_oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MachineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.MachineRequest) */ {
 public:
  MachineRequest();
  virtual ~MachineRequest();

  MachineRequest(const MachineRequest& from);

  inline MachineRequest& operator=(const MachineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MachineRequest(MachineRequest&& from) noexcept
    : MachineRequest() {
    *this = ::std::move(from);
  }

  inline MachineRequest& operator=(MachineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MachineRequest* internal_default_instance() {
    return reinterpret_cast<const MachineRequest*>(
               &_MachineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(MachineRequest* other);
  friend void swap(MachineRequest& a, MachineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MachineRequest* New() const final {
    return CreateMaybeMessage<MachineRequest>(NULL);
  }

  MachineRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MachineRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MachineRequest& from);
  void MergeFrom(const MachineRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CartesiCore.Drive flash = 4;
  int flash_size() const;
  void clear_flash();
  static const int kFlashFieldNumber = 4;
  ::CartesiCore::Drive* mutable_flash(int index);
  ::google::protobuf::RepeatedPtrField< ::CartesiCore::Drive >*
      mutable_flash();
  const ::CartesiCore::Drive& flash(int index) const;
  ::CartesiCore::Drive* add_flash();
  const ::google::protobuf::RepeatedPtrField< ::CartesiCore::Drive >&
      flash() const;

  // .CartesiCore.Processor processor = 1;
  bool has_processor() const;
  void clear_processor();
  static const int kProcessorFieldNumber = 1;
  private:
  const ::CartesiCore::Processor& _internal_processor() const;
  public:
  const ::CartesiCore::Processor& processor() const;
  ::CartesiCore::Processor* release_processor();
  ::CartesiCore::Processor* mutable_processor();
  void set_allocated_processor(::CartesiCore::Processor* processor);

  // .CartesiCore.ROM rom = 2;
  bool has_rom() const;
  void clear_rom();
  static const int kRomFieldNumber = 2;
  private:
  const ::CartesiCore::ROM& _internal_rom() const;
  public:
  const ::CartesiCore::ROM& rom() const;
  ::CartesiCore::ROM* release_rom();
  ::CartesiCore::ROM* mutable_rom();
  void set_allocated_rom(::CartesiCore::ROM* rom);

  // .CartesiCore.RAM ram = 3;
  bool has_ram() const;
  void clear_ram();
  static const int kRamFieldNumber = 3;
  private:
  const ::CartesiCore::RAM& _internal_ram() const;
  public:
  const ::CartesiCore::RAM& ram() const;
  ::CartesiCore::RAM* release_ram();
  ::CartesiCore::RAM* mutable_ram();
  void set_allocated_ram(::CartesiCore::RAM* ram);

  // .CartesiCore.CLINT clint = 5;
  bool has_clint() const;
  void clear_clint();
  static const int kClintFieldNumber = 5;
  private:
  const ::CartesiCore::CLINT& _internal_clint() const;
  public:
  const ::CartesiCore::CLINT& clint() const;
  ::CartesiCore::CLINT* release_clint();
  ::CartesiCore::CLINT* mutable_clint();
  void set_allocated_clint(::CartesiCore::CLINT* clint);

  // .CartesiCore.HTIF htif = 6;
  bool has_htif() const;
  void clear_htif();
  static const int kHtifFieldNumber = 6;
  private:
  const ::CartesiCore::HTIF& _internal_htif() const;
  public:
  const ::CartesiCore::HTIF& htif() const;
  ::CartesiCore::HTIF* release_htif();
  ::CartesiCore::HTIF* mutable_htif();
  void set_allocated_htif(::CartesiCore::HTIF* htif);

  // @@protoc_insertion_point(class_scope:CartesiCore.MachineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CartesiCore::Drive > flash_;
  ::CartesiCore::Processor* processor_;
  ::CartesiCore::ROM* rom_;
  ::CartesiCore::RAM* ram_;
  ::CartesiCore::CLINT* clint_;
  ::CartesiCore::HTIF* htif_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.RunRequest) */ {
 public:
  RunRequest();
  virtual ~RunRequest();

  RunRequest(const RunRequest& from);

  inline RunRequest& operator=(const RunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunRequest(RunRequest&& from) noexcept
    : RunRequest() {
    *this = ::std::move(from);
  }

  inline RunRequest& operator=(RunRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunRequest* internal_default_instance() {
    return reinterpret_cast<const RunRequest*>(
               &_RunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RunRequest* other);
  friend void swap(RunRequest& a, RunRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunRequest* New() const final {
    return CreateMaybeMessage<RunRequest>(NULL);
  }

  RunRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunRequest& from);
  void MergeFrom(const RunRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 limit = 1;
  void clear_limit();
  static const int kLimitFieldNumber = 1;
  ::google::protobuf::uint64 limit() const;
  void set_limit(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CartesiCore.RunRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.RunResponse) */ {
 public:
  RunResponse();
  virtual ~RunResponse();

  RunResponse(const RunResponse& from);

  inline RunResponse& operator=(const RunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunResponse(RunResponse&& from) noexcept
    : RunResponse() {
    *this = ::std::move(from);
  }

  inline RunResponse& operator=(RunResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunResponse* internal_default_instance() {
    return reinterpret_cast<const RunResponse*>(
               &_RunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(RunResponse* other);
  friend void swap(RunResponse& a, RunResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunResponse* New() const final {
    return CreateMaybeMessage<RunResponse>(NULL);
  }

  RunResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunResponse& from);
  void MergeFrom(const RunResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 mcycle = 1;
  void clear_mcycle();
  static const int kMcycleFieldNumber = 1;
  ::google::protobuf::uint64 mcycle() const;
  void set_mcycle(::google::protobuf::uint64 value);

  // uint64 tohost = 2;
  void clear_tohost();
  static const int kTohostFieldNumber = 2;
  ::google::protobuf::uint64 tohost() const;
  void set_tohost(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CartesiCore.RunResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 mcycle_;
  ::google::protobuf::uint64 tohost_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proof : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.Proof) */ {
 public:
  Proof();
  virtual ~Proof();

  Proof(const Proof& from);

  inline Proof& operator=(const Proof& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proof(Proof&& from) noexcept
    : Proof() {
    *this = ::std::move(from);
  }

  inline Proof& operator=(Proof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proof* internal_default_instance() {
    return reinterpret_cast<const Proof*>(
               &_Proof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Proof* other);
  friend void swap(Proof& a, Proof& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proof* New() const final {
    return CreateMaybeMessage<Proof>(NULL);
  }

  Proof* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proof>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proof& from);
  void MergeFrom(const Proof& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CartesiCore.Hash sibling_hashes = 4;
  int sibling_hashes_size() const;
  void clear_sibling_hashes();
  static const int kSiblingHashesFieldNumber = 4;
  ::CartesiCore::Hash* mutable_sibling_hashes(int index);
  ::google::protobuf::RepeatedPtrField< ::CartesiCore::Hash >*
      mutable_sibling_hashes();
  const ::CartesiCore::Hash& sibling_hashes(int index) const;
  ::CartesiCore::Hash* add_sibling_hashes();
  const ::google::protobuf::RepeatedPtrField< ::CartesiCore::Hash >&
      sibling_hashes() const;

  // .CartesiCore.Hash target_hash = 3;
  bool has_target_hash() const;
  void clear_target_hash();
  static const int kTargetHashFieldNumber = 3;
  private:
  const ::CartesiCore::Hash& _internal_target_hash() const;
  public:
  const ::CartesiCore::Hash& target_hash() const;
  ::CartesiCore::Hash* release_target_hash();
  ::CartesiCore::Hash* mutable_target_hash();
  void set_allocated_target_hash(::CartesiCore::Hash* target_hash);

  // .CartesiCore.Hash root_hash = 5;
  bool has_root_hash() const;
  void clear_root_hash();
  static const int kRootHashFieldNumber = 5;
  private:
  const ::CartesiCore::Hash& _internal_root_hash() const;
  public:
  const ::CartesiCore::Hash& root_hash() const;
  ::CartesiCore::Hash* release_root_hash();
  ::CartesiCore::Hash* mutable_root_hash();
  void set_allocated_root_hash(::CartesiCore::Hash* root_hash);

  // uint64 address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  ::google::protobuf::uint64 address() const;
  void set_address(::google::protobuf::uint64 value);

  // uint32 log2_size = 2;
  void clear_log2_size();
  static const int kLog2SizeFieldNumber = 2;
  ::google::protobuf::uint32 log2_size() const;
  void set_log2_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CartesiCore.Proof)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CartesiCore::Hash > sibling_hashes_;
  ::CartesiCore::Hash* target_hash_;
  ::CartesiCore::Hash* root_hash_;
  ::google::protobuf::uint64 address_;
  ::google::protobuf::uint32 log2_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Word : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.Word) */ {
 public:
  Word();
  virtual ~Word();

  Word(const Word& from);

  inline Word& operator=(const Word& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Word(Word&& from) noexcept
    : Word() {
    *this = ::std::move(from);
  }

  inline Word& operator=(Word&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Word& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Word* internal_default_instance() {
    return reinterpret_cast<const Word*>(
               &_Word_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Word* other);
  friend void swap(Word& a, Word& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Word* New() const final {
    return CreateMaybeMessage<Word>(NULL);
  }

  Word* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Word>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Word& from);
  void MergeFrom(const Word& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Word* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:CartesiCore.Word)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Access : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.Access) */ {
 public:
  Access();
  virtual ~Access();

  Access(const Access& from);

  inline Access& operator=(const Access& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Access(Access&& from) noexcept
    : Access() {
    *this = ::std::move(from);
  }

  inline Access& operator=(Access&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Access& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Access* internal_default_instance() {
    return reinterpret_cast<const Access*>(
               &_Access_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Access* other);
  friend void swap(Access& a, Access& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Access* New() const final {
    return CreateMaybeMessage<Access>(NULL);
  }

  Access* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Access>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Access& from);
  void MergeFrom(const Access& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Access* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CartesiCore.Word read = 2;
  bool has_read() const;
  void clear_read();
  static const int kReadFieldNumber = 2;
  private:
  const ::CartesiCore::Word& _internal_read() const;
  public:
  const ::CartesiCore::Word& read() const;
  ::CartesiCore::Word* release_read();
  ::CartesiCore::Word* mutable_read();
  void set_allocated_read(::CartesiCore::Word* read);

  // .CartesiCore.Word written = 3;
  bool has_written() const;
  void clear_written();
  static const int kWrittenFieldNumber = 3;
  private:
  const ::CartesiCore::Word& _internal_written() const;
  public:
  const ::CartesiCore::Word& written() const;
  ::CartesiCore::Word* release_written();
  ::CartesiCore::Word* mutable_written();
  void set_allocated_written(::CartesiCore::Word* written);

  // .CartesiCore.Proof proof = 4;
  bool has_proof() const;
  void clear_proof();
  static const int kProofFieldNumber = 4;
  private:
  const ::CartesiCore::Proof& _internal_proof() const;
  public:
  const ::CartesiCore::Proof& proof() const;
  ::CartesiCore::Proof* release_proof();
  ::CartesiCore::Proof* mutable_proof();
  void set_allocated_proof(::CartesiCore::Proof* proof);

  // .CartesiCore.AccessOperation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::CartesiCore::AccessOperation operation() const;
  void set_operation(::CartesiCore::AccessOperation value);

  // @@protoc_insertion_point(class_scope:CartesiCore.Access)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CartesiCore::Word* read_;
  ::CartesiCore::Word* written_;
  ::CartesiCore::Proof* proof_;
  int operation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BracketNote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.BracketNote) */ {
 public:
  BracketNote();
  virtual ~BracketNote();

  BracketNote(const BracketNote& from);

  inline BracketNote& operator=(const BracketNote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BracketNote(BracketNote&& from) noexcept
    : BracketNote() {
    *this = ::std::move(from);
  }

  inline BracketNote& operator=(BracketNote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BracketNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BracketNote* internal_default_instance() {
    return reinterpret_cast<const BracketNote*>(
               &_BracketNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(BracketNote* other);
  friend void swap(BracketNote& a, BracketNote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BracketNote* New() const final {
    return CreateMaybeMessage<BracketNote>(NULL);
  }

  BracketNote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BracketNote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BracketNote& from);
  void MergeFrom(const BracketNote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BracketNote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BracketNote_BracketNoteType BracketNoteType;
  static const BracketNoteType DUMMY =
    BracketNote_BracketNoteType_DUMMY;
  static const BracketNoteType BEGIN =
    BracketNote_BracketNoteType_BEGIN;
  static const BracketNoteType END =
    BracketNote_BracketNoteType_END;
  static const BracketNoteType INVALID =
    BracketNote_BracketNoteType_INVALID;
  static inline bool BracketNoteType_IsValid(int value) {
    return BracketNote_BracketNoteType_IsValid(value);
  }
  static const BracketNoteType BracketNoteType_MIN =
    BracketNote_BracketNoteType_BracketNoteType_MIN;
  static const BracketNoteType BracketNoteType_MAX =
    BracketNote_BracketNoteType_BracketNoteType_MAX;
  static const int BracketNoteType_ARRAYSIZE =
    BracketNote_BracketNoteType_BracketNoteType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BracketNoteType_descriptor() {
    return BracketNote_BracketNoteType_descriptor();
  }
  static inline const ::std::string& BracketNoteType_Name(BracketNoteType value) {
    return BracketNote_BracketNoteType_Name(value);
  }
  static inline bool BracketNoteType_Parse(const ::std::string& name,
      BracketNoteType* value) {
    return BracketNote_BracketNoteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint64 where = 2;
  void clear_where();
  static const int kWhereFieldNumber = 2;
  ::google::protobuf::uint64 where() const;
  void set_where(::google::protobuf::uint64 value);

  // .CartesiCore.BracketNote.BracketNoteType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::CartesiCore::BracketNote_BracketNoteType type() const;
  void set_type(::CartesiCore::BracketNote_BracketNoteType value);

  // @@protoc_insertion_point(class_scope:CartesiCore.BracketNote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint64 where_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiCore.AccessLog) */ {
 public:
  AccessLog();
  virtual ~AccessLog();

  AccessLog(const AccessLog& from);

  inline AccessLog& operator=(const AccessLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccessLog(AccessLog&& from) noexcept
    : AccessLog() {
    *this = ::std::move(from);
  }

  inline AccessLog& operator=(AccessLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessLog* internal_default_instance() {
    return reinterpret_cast<const AccessLog*>(
               &_AccessLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(AccessLog* other);
  friend void swap(AccessLog& a, AccessLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessLog* New() const final {
    return CreateMaybeMessage<AccessLog>(NULL);
  }

  AccessLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccessLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccessLog& from);
  void MergeFrom(const AccessLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CartesiCore.Access accesses = 1;
  int accesses_size() const;
  void clear_accesses();
  static const int kAccessesFieldNumber = 1;
  ::CartesiCore::Access* mutable_accesses(int index);
  ::google::protobuf::RepeatedPtrField< ::CartesiCore::Access >*
      mutable_accesses();
  const ::CartesiCore::Access& accesses(int index) const;
  ::CartesiCore::Access* add_accesses();
  const ::google::protobuf::RepeatedPtrField< ::CartesiCore::Access >&
      accesses() const;

  // repeated .CartesiCore.BracketNote brackets = 2;
  int brackets_size() const;
  void clear_brackets();
  static const int kBracketsFieldNumber = 2;
  ::CartesiCore::BracketNote* mutable_brackets(int index);
  ::google::protobuf::RepeatedPtrField< ::CartesiCore::BracketNote >*
      mutable_brackets();
  const ::CartesiCore::BracketNote& brackets(int index) const;
  ::CartesiCore::BracketNote* add_brackets();
  const ::google::protobuf::RepeatedPtrField< ::CartesiCore::BracketNote >&
      brackets() const;

  // repeated string notes = 3;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 3;
  const ::std::string& notes(int index) const;
  ::std::string* mutable_notes(int index);
  void set_notes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_notes(int index, ::std::string&& value);
  #endif
  void set_notes(int index, const char* value);
  void set_notes(int index, const char* value, size_t size);
  ::std::string* add_notes();
  void add_notes(const ::std::string& value);
  #if LANG_CXX11
  void add_notes(::std::string&& value);
  #endif
  void add_notes(const char* value);
  void add_notes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& notes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_notes();

  // @@protoc_insertion_point(class_scope:CartesiCore.AccessLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CartesiCore::Access > accesses_;
  ::google::protobuf::RepeatedPtrField< ::CartesiCore::BracketNote > brackets_;
  ::google::protobuf::RepeatedPtrField< ::std::string> notes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartesi_2dbase_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Void

// -------------------------------------------------------------------

// Hash

// bytes content = 1;
inline void Hash::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Hash::content() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Hash.content)
  return content_.GetNoArena();
}
inline void Hash::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.Hash.content)
}
#if LANG_CXX11
inline void Hash::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.Hash.content)
}
#endif
inline void Hash::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.Hash.content)
}
inline void Hash::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.Hash.content)
}
inline ::std::string* Hash::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:CartesiCore.Hash.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hash::release_content() {
  // @@protoc_insertion_point(field_release:CartesiCore.Hash.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hash::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Hash.content)
}

// -------------------------------------------------------------------

// ProcessorState

// uint64 x1 = 1;
inline bool ProcessorState::has_x1() const {
  return x1_oneof_case() == kX1;
}
inline void ProcessorState::set_has_x1() {
  _oneof_case_[0] = kX1;
}
inline void ProcessorState::clear_x1() {
  if (has_x1()) {
    x1_oneof_.x1_ = GOOGLE_ULONGLONG(0);
    clear_has_x1_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x1() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x1)
  if (has_x1()) {
    return x1_oneof_.x1_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x1(::google::protobuf::uint64 value) {
  if (!has_x1()) {
    clear_x1_oneof();
    set_has_x1();
  }
  x1_oneof_.x1_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x1)
}

// uint64 x2 = 2;
inline bool ProcessorState::has_x2() const {
  return x2_oneof_case() == kX2;
}
inline void ProcessorState::set_has_x2() {
  _oneof_case_[1] = kX2;
}
inline void ProcessorState::clear_x2() {
  if (has_x2()) {
    x2_oneof_.x2_ = GOOGLE_ULONGLONG(0);
    clear_has_x2_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x2() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x2)
  if (has_x2()) {
    return x2_oneof_.x2_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x2(::google::protobuf::uint64 value) {
  if (!has_x2()) {
    clear_x2_oneof();
    set_has_x2();
  }
  x2_oneof_.x2_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x2)
}

// uint64 x3 = 3;
inline bool ProcessorState::has_x3() const {
  return x3_oneof_case() == kX3;
}
inline void ProcessorState::set_has_x3() {
  _oneof_case_[2] = kX3;
}
inline void ProcessorState::clear_x3() {
  if (has_x3()) {
    x3_oneof_.x3_ = GOOGLE_ULONGLONG(0);
    clear_has_x3_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x3() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x3)
  if (has_x3()) {
    return x3_oneof_.x3_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x3(::google::protobuf::uint64 value) {
  if (!has_x3()) {
    clear_x3_oneof();
    set_has_x3();
  }
  x3_oneof_.x3_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x3)
}

// uint64 x4 = 4;
inline bool ProcessorState::has_x4() const {
  return x4_oneof_case() == kX4;
}
inline void ProcessorState::set_has_x4() {
  _oneof_case_[3] = kX4;
}
inline void ProcessorState::clear_x4() {
  if (has_x4()) {
    x4_oneof_.x4_ = GOOGLE_ULONGLONG(0);
    clear_has_x4_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x4() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x4)
  if (has_x4()) {
    return x4_oneof_.x4_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x4(::google::protobuf::uint64 value) {
  if (!has_x4()) {
    clear_x4_oneof();
    set_has_x4();
  }
  x4_oneof_.x4_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x4)
}

// uint64 x5 = 5;
inline bool ProcessorState::has_x5() const {
  return x5_oneof_case() == kX5;
}
inline void ProcessorState::set_has_x5() {
  _oneof_case_[4] = kX5;
}
inline void ProcessorState::clear_x5() {
  if (has_x5()) {
    x5_oneof_.x5_ = GOOGLE_ULONGLONG(0);
    clear_has_x5_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x5() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x5)
  if (has_x5()) {
    return x5_oneof_.x5_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x5(::google::protobuf::uint64 value) {
  if (!has_x5()) {
    clear_x5_oneof();
    set_has_x5();
  }
  x5_oneof_.x5_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x5)
}

// uint64 x6 = 6;
inline bool ProcessorState::has_x6() const {
  return x6_oneof_case() == kX6;
}
inline void ProcessorState::set_has_x6() {
  _oneof_case_[5] = kX6;
}
inline void ProcessorState::clear_x6() {
  if (has_x6()) {
    x6_oneof_.x6_ = GOOGLE_ULONGLONG(0);
    clear_has_x6_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x6() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x6)
  if (has_x6()) {
    return x6_oneof_.x6_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x6(::google::protobuf::uint64 value) {
  if (!has_x6()) {
    clear_x6_oneof();
    set_has_x6();
  }
  x6_oneof_.x6_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x6)
}

// uint64 x7 = 7;
inline bool ProcessorState::has_x7() const {
  return x7_oneof_case() == kX7;
}
inline void ProcessorState::set_has_x7() {
  _oneof_case_[6] = kX7;
}
inline void ProcessorState::clear_x7() {
  if (has_x7()) {
    x7_oneof_.x7_ = GOOGLE_ULONGLONG(0);
    clear_has_x7_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x7() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x7)
  if (has_x7()) {
    return x7_oneof_.x7_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x7(::google::protobuf::uint64 value) {
  if (!has_x7()) {
    clear_x7_oneof();
    set_has_x7();
  }
  x7_oneof_.x7_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x7)
}

// uint64 x8 = 8;
inline bool ProcessorState::has_x8() const {
  return x8_oneof_case() == kX8;
}
inline void ProcessorState::set_has_x8() {
  _oneof_case_[7] = kX8;
}
inline void ProcessorState::clear_x8() {
  if (has_x8()) {
    x8_oneof_.x8_ = GOOGLE_ULONGLONG(0);
    clear_has_x8_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x8() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x8)
  if (has_x8()) {
    return x8_oneof_.x8_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x8(::google::protobuf::uint64 value) {
  if (!has_x8()) {
    clear_x8_oneof();
    set_has_x8();
  }
  x8_oneof_.x8_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x8)
}

// uint64 x9 = 9;
inline bool ProcessorState::has_x9() const {
  return x9_oneof_case() == kX9;
}
inline void ProcessorState::set_has_x9() {
  _oneof_case_[8] = kX9;
}
inline void ProcessorState::clear_x9() {
  if (has_x9()) {
    x9_oneof_.x9_ = GOOGLE_ULONGLONG(0);
    clear_has_x9_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x9() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x9)
  if (has_x9()) {
    return x9_oneof_.x9_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x9(::google::protobuf::uint64 value) {
  if (!has_x9()) {
    clear_x9_oneof();
    set_has_x9();
  }
  x9_oneof_.x9_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x9)
}

// uint64 x10 = 10;
inline bool ProcessorState::has_x10() const {
  return x10_oneof_case() == kX10;
}
inline void ProcessorState::set_has_x10() {
  _oneof_case_[9] = kX10;
}
inline void ProcessorState::clear_x10() {
  if (has_x10()) {
    x10_oneof_.x10_ = GOOGLE_ULONGLONG(0);
    clear_has_x10_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x10() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x10)
  if (has_x10()) {
    return x10_oneof_.x10_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x10(::google::protobuf::uint64 value) {
  if (!has_x10()) {
    clear_x10_oneof();
    set_has_x10();
  }
  x10_oneof_.x10_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x10)
}

// uint64 x11 = 11;
inline bool ProcessorState::has_x11() const {
  return x11_oneof_case() == kX11;
}
inline void ProcessorState::set_has_x11() {
  _oneof_case_[10] = kX11;
}
inline void ProcessorState::clear_x11() {
  if (has_x11()) {
    x11_oneof_.x11_ = GOOGLE_ULONGLONG(0);
    clear_has_x11_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x11() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x11)
  if (has_x11()) {
    return x11_oneof_.x11_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x11(::google::protobuf::uint64 value) {
  if (!has_x11()) {
    clear_x11_oneof();
    set_has_x11();
  }
  x11_oneof_.x11_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x11)
}

// uint64 x12 = 12;
inline bool ProcessorState::has_x12() const {
  return x12_oneof_case() == kX12;
}
inline void ProcessorState::set_has_x12() {
  _oneof_case_[11] = kX12;
}
inline void ProcessorState::clear_x12() {
  if (has_x12()) {
    x12_oneof_.x12_ = GOOGLE_ULONGLONG(0);
    clear_has_x12_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x12() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x12)
  if (has_x12()) {
    return x12_oneof_.x12_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x12(::google::protobuf::uint64 value) {
  if (!has_x12()) {
    clear_x12_oneof();
    set_has_x12();
  }
  x12_oneof_.x12_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x12)
}

// uint64 x13 = 13;
inline bool ProcessorState::has_x13() const {
  return x13_oneof_case() == kX13;
}
inline void ProcessorState::set_has_x13() {
  _oneof_case_[12] = kX13;
}
inline void ProcessorState::clear_x13() {
  if (has_x13()) {
    x13_oneof_.x13_ = GOOGLE_ULONGLONG(0);
    clear_has_x13_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x13() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x13)
  if (has_x13()) {
    return x13_oneof_.x13_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x13(::google::protobuf::uint64 value) {
  if (!has_x13()) {
    clear_x13_oneof();
    set_has_x13();
  }
  x13_oneof_.x13_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x13)
}

// uint64 x14 = 14;
inline bool ProcessorState::has_x14() const {
  return x14_oneof_case() == kX14;
}
inline void ProcessorState::set_has_x14() {
  _oneof_case_[13] = kX14;
}
inline void ProcessorState::clear_x14() {
  if (has_x14()) {
    x14_oneof_.x14_ = GOOGLE_ULONGLONG(0);
    clear_has_x14_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x14() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x14)
  if (has_x14()) {
    return x14_oneof_.x14_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x14(::google::protobuf::uint64 value) {
  if (!has_x14()) {
    clear_x14_oneof();
    set_has_x14();
  }
  x14_oneof_.x14_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x14)
}

// uint64 x15 = 15;
inline bool ProcessorState::has_x15() const {
  return x15_oneof_case() == kX15;
}
inline void ProcessorState::set_has_x15() {
  _oneof_case_[14] = kX15;
}
inline void ProcessorState::clear_x15() {
  if (has_x15()) {
    x15_oneof_.x15_ = GOOGLE_ULONGLONG(0);
    clear_has_x15_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x15() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x15)
  if (has_x15()) {
    return x15_oneof_.x15_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x15(::google::protobuf::uint64 value) {
  if (!has_x15()) {
    clear_x15_oneof();
    set_has_x15();
  }
  x15_oneof_.x15_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x15)
}

// uint64 x16 = 16;
inline bool ProcessorState::has_x16() const {
  return x16_oneof_case() == kX16;
}
inline void ProcessorState::set_has_x16() {
  _oneof_case_[15] = kX16;
}
inline void ProcessorState::clear_x16() {
  if (has_x16()) {
    x16_oneof_.x16_ = GOOGLE_ULONGLONG(0);
    clear_has_x16_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x16() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x16)
  if (has_x16()) {
    return x16_oneof_.x16_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x16(::google::protobuf::uint64 value) {
  if (!has_x16()) {
    clear_x16_oneof();
    set_has_x16();
  }
  x16_oneof_.x16_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x16)
}

// uint64 x17 = 17;
inline bool ProcessorState::has_x17() const {
  return x17_oneof_case() == kX17;
}
inline void ProcessorState::set_has_x17() {
  _oneof_case_[16] = kX17;
}
inline void ProcessorState::clear_x17() {
  if (has_x17()) {
    x17_oneof_.x17_ = GOOGLE_ULONGLONG(0);
    clear_has_x17_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x17() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x17)
  if (has_x17()) {
    return x17_oneof_.x17_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x17(::google::protobuf::uint64 value) {
  if (!has_x17()) {
    clear_x17_oneof();
    set_has_x17();
  }
  x17_oneof_.x17_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x17)
}

// uint64 x18 = 18;
inline bool ProcessorState::has_x18() const {
  return x18_oneof_case() == kX18;
}
inline void ProcessorState::set_has_x18() {
  _oneof_case_[17] = kX18;
}
inline void ProcessorState::clear_x18() {
  if (has_x18()) {
    x18_oneof_.x18_ = GOOGLE_ULONGLONG(0);
    clear_has_x18_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x18() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x18)
  if (has_x18()) {
    return x18_oneof_.x18_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x18(::google::protobuf::uint64 value) {
  if (!has_x18()) {
    clear_x18_oneof();
    set_has_x18();
  }
  x18_oneof_.x18_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x18)
}

// uint64 x19 = 19;
inline bool ProcessorState::has_x19() const {
  return x19_oneof_case() == kX19;
}
inline void ProcessorState::set_has_x19() {
  _oneof_case_[18] = kX19;
}
inline void ProcessorState::clear_x19() {
  if (has_x19()) {
    x19_oneof_.x19_ = GOOGLE_ULONGLONG(0);
    clear_has_x19_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x19() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x19)
  if (has_x19()) {
    return x19_oneof_.x19_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x19(::google::protobuf::uint64 value) {
  if (!has_x19()) {
    clear_x19_oneof();
    set_has_x19();
  }
  x19_oneof_.x19_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x19)
}

// uint64 x20 = 20;
inline bool ProcessorState::has_x20() const {
  return x20_oneof_case() == kX20;
}
inline void ProcessorState::set_has_x20() {
  _oneof_case_[19] = kX20;
}
inline void ProcessorState::clear_x20() {
  if (has_x20()) {
    x20_oneof_.x20_ = GOOGLE_ULONGLONG(0);
    clear_has_x20_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x20() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x20)
  if (has_x20()) {
    return x20_oneof_.x20_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x20(::google::protobuf::uint64 value) {
  if (!has_x20()) {
    clear_x20_oneof();
    set_has_x20();
  }
  x20_oneof_.x20_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x20)
}

// uint64 x21 = 21;
inline bool ProcessorState::has_x21() const {
  return x21_oneof_case() == kX21;
}
inline void ProcessorState::set_has_x21() {
  _oneof_case_[20] = kX21;
}
inline void ProcessorState::clear_x21() {
  if (has_x21()) {
    x21_oneof_.x21_ = GOOGLE_ULONGLONG(0);
    clear_has_x21_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x21() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x21)
  if (has_x21()) {
    return x21_oneof_.x21_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x21(::google::protobuf::uint64 value) {
  if (!has_x21()) {
    clear_x21_oneof();
    set_has_x21();
  }
  x21_oneof_.x21_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x21)
}

// uint64 x22 = 22;
inline bool ProcessorState::has_x22() const {
  return x22_oneof_case() == kX22;
}
inline void ProcessorState::set_has_x22() {
  _oneof_case_[21] = kX22;
}
inline void ProcessorState::clear_x22() {
  if (has_x22()) {
    x22_oneof_.x22_ = GOOGLE_ULONGLONG(0);
    clear_has_x22_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x22() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x22)
  if (has_x22()) {
    return x22_oneof_.x22_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x22(::google::protobuf::uint64 value) {
  if (!has_x22()) {
    clear_x22_oneof();
    set_has_x22();
  }
  x22_oneof_.x22_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x22)
}

// uint64 x23 = 23;
inline bool ProcessorState::has_x23() const {
  return x23_oneof_case() == kX23;
}
inline void ProcessorState::set_has_x23() {
  _oneof_case_[22] = kX23;
}
inline void ProcessorState::clear_x23() {
  if (has_x23()) {
    x23_oneof_.x23_ = GOOGLE_ULONGLONG(0);
    clear_has_x23_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x23() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x23)
  if (has_x23()) {
    return x23_oneof_.x23_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x23(::google::protobuf::uint64 value) {
  if (!has_x23()) {
    clear_x23_oneof();
    set_has_x23();
  }
  x23_oneof_.x23_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x23)
}

// uint64 x24 = 24;
inline bool ProcessorState::has_x24() const {
  return x24_oneof_case() == kX24;
}
inline void ProcessorState::set_has_x24() {
  _oneof_case_[23] = kX24;
}
inline void ProcessorState::clear_x24() {
  if (has_x24()) {
    x24_oneof_.x24_ = GOOGLE_ULONGLONG(0);
    clear_has_x24_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x24() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x24)
  if (has_x24()) {
    return x24_oneof_.x24_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x24(::google::protobuf::uint64 value) {
  if (!has_x24()) {
    clear_x24_oneof();
    set_has_x24();
  }
  x24_oneof_.x24_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x24)
}

// uint64 x25 = 25;
inline bool ProcessorState::has_x25() const {
  return x25_oneof_case() == kX25;
}
inline void ProcessorState::set_has_x25() {
  _oneof_case_[24] = kX25;
}
inline void ProcessorState::clear_x25() {
  if (has_x25()) {
    x25_oneof_.x25_ = GOOGLE_ULONGLONG(0);
    clear_has_x25_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x25() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x25)
  if (has_x25()) {
    return x25_oneof_.x25_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x25(::google::protobuf::uint64 value) {
  if (!has_x25()) {
    clear_x25_oneof();
    set_has_x25();
  }
  x25_oneof_.x25_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x25)
}

// uint64 x26 = 26;
inline bool ProcessorState::has_x26() const {
  return x26_oneof_case() == kX26;
}
inline void ProcessorState::set_has_x26() {
  _oneof_case_[25] = kX26;
}
inline void ProcessorState::clear_x26() {
  if (has_x26()) {
    x26_oneof_.x26_ = GOOGLE_ULONGLONG(0);
    clear_has_x26_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x26() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x26)
  if (has_x26()) {
    return x26_oneof_.x26_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x26(::google::protobuf::uint64 value) {
  if (!has_x26()) {
    clear_x26_oneof();
    set_has_x26();
  }
  x26_oneof_.x26_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x26)
}

// uint64 x27 = 27;
inline bool ProcessorState::has_x27() const {
  return x27_oneof_case() == kX27;
}
inline void ProcessorState::set_has_x27() {
  _oneof_case_[26] = kX27;
}
inline void ProcessorState::clear_x27() {
  if (has_x27()) {
    x27_oneof_.x27_ = GOOGLE_ULONGLONG(0);
    clear_has_x27_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x27() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x27)
  if (has_x27()) {
    return x27_oneof_.x27_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x27(::google::protobuf::uint64 value) {
  if (!has_x27()) {
    clear_x27_oneof();
    set_has_x27();
  }
  x27_oneof_.x27_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x27)
}

// uint64 x28 = 28;
inline bool ProcessorState::has_x28() const {
  return x28_oneof_case() == kX28;
}
inline void ProcessorState::set_has_x28() {
  _oneof_case_[27] = kX28;
}
inline void ProcessorState::clear_x28() {
  if (has_x28()) {
    x28_oneof_.x28_ = GOOGLE_ULONGLONG(0);
    clear_has_x28_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x28() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x28)
  if (has_x28()) {
    return x28_oneof_.x28_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x28(::google::protobuf::uint64 value) {
  if (!has_x28()) {
    clear_x28_oneof();
    set_has_x28();
  }
  x28_oneof_.x28_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x28)
}

// uint64 x29 = 29;
inline bool ProcessorState::has_x29() const {
  return x29_oneof_case() == kX29;
}
inline void ProcessorState::set_has_x29() {
  _oneof_case_[28] = kX29;
}
inline void ProcessorState::clear_x29() {
  if (has_x29()) {
    x29_oneof_.x29_ = GOOGLE_ULONGLONG(0);
    clear_has_x29_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x29() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x29)
  if (has_x29()) {
    return x29_oneof_.x29_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x29(::google::protobuf::uint64 value) {
  if (!has_x29()) {
    clear_x29_oneof();
    set_has_x29();
  }
  x29_oneof_.x29_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x29)
}

// uint64 x30 = 30;
inline bool ProcessorState::has_x30() const {
  return x30_oneof_case() == kX30;
}
inline void ProcessorState::set_has_x30() {
  _oneof_case_[29] = kX30;
}
inline void ProcessorState::clear_x30() {
  if (has_x30()) {
    x30_oneof_.x30_ = GOOGLE_ULONGLONG(0);
    clear_has_x30_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x30() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x30)
  if (has_x30()) {
    return x30_oneof_.x30_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x30(::google::protobuf::uint64 value) {
  if (!has_x30()) {
    clear_x30_oneof();
    set_has_x30();
  }
  x30_oneof_.x30_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x30)
}

// uint64 x31 = 31;
inline bool ProcessorState::has_x31() const {
  return x31_oneof_case() == kX31;
}
inline void ProcessorState::set_has_x31() {
  _oneof_case_[30] = kX31;
}
inline void ProcessorState::clear_x31() {
  if (has_x31()) {
    x31_oneof_.x31_ = GOOGLE_ULONGLONG(0);
    clear_has_x31_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::x31() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.x31)
  if (has_x31()) {
    return x31_oneof_.x31_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_x31(::google::protobuf::uint64 value) {
  if (!has_x31()) {
    clear_x31_oneof();
    set_has_x31();
  }
  x31_oneof_.x31_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.x31)
}

// uint64 pc = 32;
inline bool ProcessorState::has_pc() const {
  return pc_oneof_case() == kPc;
}
inline void ProcessorState::set_has_pc() {
  _oneof_case_[31] = kPc;
}
inline void ProcessorState::clear_pc() {
  if (has_pc()) {
    pc_oneof_.pc_ = GOOGLE_ULONGLONG(0);
    clear_has_pc_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::pc() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.pc)
  if (has_pc()) {
    return pc_oneof_.pc_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_pc(::google::protobuf::uint64 value) {
  if (!has_pc()) {
    clear_pc_oneof();
    set_has_pc();
  }
  pc_oneof_.pc_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.pc)
}

// uint64 mvendorid = 33;
inline bool ProcessorState::has_mvendorid() const {
  return mvendorid_oneof_case() == kMvendorid;
}
inline void ProcessorState::set_has_mvendorid() {
  _oneof_case_[32] = kMvendorid;
}
inline void ProcessorState::clear_mvendorid() {
  if (has_mvendorid()) {
    mvendorid_oneof_.mvendorid_ = GOOGLE_ULONGLONG(0);
    clear_has_mvendorid_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mvendorid() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mvendorid)
  if (has_mvendorid()) {
    return mvendorid_oneof_.mvendorid_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mvendorid(::google::protobuf::uint64 value) {
  if (!has_mvendorid()) {
    clear_mvendorid_oneof();
    set_has_mvendorid();
  }
  mvendorid_oneof_.mvendorid_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mvendorid)
}

// uint64 marchid = 34;
inline bool ProcessorState::has_marchid() const {
  return marchid_oneof_case() == kMarchid;
}
inline void ProcessorState::set_has_marchid() {
  _oneof_case_[33] = kMarchid;
}
inline void ProcessorState::clear_marchid() {
  if (has_marchid()) {
    marchid_oneof_.marchid_ = GOOGLE_ULONGLONG(0);
    clear_has_marchid_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::marchid() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.marchid)
  if (has_marchid()) {
    return marchid_oneof_.marchid_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_marchid(::google::protobuf::uint64 value) {
  if (!has_marchid()) {
    clear_marchid_oneof();
    set_has_marchid();
  }
  marchid_oneof_.marchid_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.marchid)
}

// uint64 mimpid = 35;
inline bool ProcessorState::has_mimpid() const {
  return mimpid_oneof_case() == kMimpid;
}
inline void ProcessorState::set_has_mimpid() {
  _oneof_case_[34] = kMimpid;
}
inline void ProcessorState::clear_mimpid() {
  if (has_mimpid()) {
    mimpid_oneof_.mimpid_ = GOOGLE_ULONGLONG(0);
    clear_has_mimpid_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mimpid() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mimpid)
  if (has_mimpid()) {
    return mimpid_oneof_.mimpid_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mimpid(::google::protobuf::uint64 value) {
  if (!has_mimpid()) {
    clear_mimpid_oneof();
    set_has_mimpid();
  }
  mimpid_oneof_.mimpid_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mimpid)
}

// uint64 mcycle = 36;
inline bool ProcessorState::has_mcycle() const {
  return mcycle_oneof_case() == kMcycle;
}
inline void ProcessorState::set_has_mcycle() {
  _oneof_case_[35] = kMcycle;
}
inline void ProcessorState::clear_mcycle() {
  if (has_mcycle()) {
    mcycle_oneof_.mcycle_ = GOOGLE_ULONGLONG(0);
    clear_has_mcycle_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mcycle() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mcycle)
  if (has_mcycle()) {
    return mcycle_oneof_.mcycle_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mcycle(::google::protobuf::uint64 value) {
  if (!has_mcycle()) {
    clear_mcycle_oneof();
    set_has_mcycle();
  }
  mcycle_oneof_.mcycle_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mcycle)
}

// uint64 minstret = 37;
inline bool ProcessorState::has_minstret() const {
  return minstret_oneof_case() == kMinstret;
}
inline void ProcessorState::set_has_minstret() {
  _oneof_case_[36] = kMinstret;
}
inline void ProcessorState::clear_minstret() {
  if (has_minstret()) {
    minstret_oneof_.minstret_ = GOOGLE_ULONGLONG(0);
    clear_has_minstret_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::minstret() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.minstret)
  if (has_minstret()) {
    return minstret_oneof_.minstret_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_minstret(::google::protobuf::uint64 value) {
  if (!has_minstret()) {
    clear_minstret_oneof();
    set_has_minstret();
  }
  minstret_oneof_.minstret_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.minstret)
}

// uint64 mstatus = 38;
inline bool ProcessorState::has_mstatus() const {
  return mstatus_oneof_case() == kMstatus;
}
inline void ProcessorState::set_has_mstatus() {
  _oneof_case_[37] = kMstatus;
}
inline void ProcessorState::clear_mstatus() {
  if (has_mstatus()) {
    mstatus_oneof_.mstatus_ = GOOGLE_ULONGLONG(0);
    clear_has_mstatus_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mstatus() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mstatus)
  if (has_mstatus()) {
    return mstatus_oneof_.mstatus_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mstatus(::google::protobuf::uint64 value) {
  if (!has_mstatus()) {
    clear_mstatus_oneof();
    set_has_mstatus();
  }
  mstatus_oneof_.mstatus_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mstatus)
}

// uint64 mtvec = 39;
inline bool ProcessorState::has_mtvec() const {
  return mtvec_oneof_case() == kMtvec;
}
inline void ProcessorState::set_has_mtvec() {
  _oneof_case_[38] = kMtvec;
}
inline void ProcessorState::clear_mtvec() {
  if (has_mtvec()) {
    mtvec_oneof_.mtvec_ = GOOGLE_ULONGLONG(0);
    clear_has_mtvec_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mtvec() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mtvec)
  if (has_mtvec()) {
    return mtvec_oneof_.mtvec_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mtvec(::google::protobuf::uint64 value) {
  if (!has_mtvec()) {
    clear_mtvec_oneof();
    set_has_mtvec();
  }
  mtvec_oneof_.mtvec_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mtvec)
}

// uint64 mscratch = 40;
inline bool ProcessorState::has_mscratch() const {
  return mscratch_oneof_case() == kMscratch;
}
inline void ProcessorState::set_has_mscratch() {
  _oneof_case_[39] = kMscratch;
}
inline void ProcessorState::clear_mscratch() {
  if (has_mscratch()) {
    mscratch_oneof_.mscratch_ = GOOGLE_ULONGLONG(0);
    clear_has_mscratch_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mscratch() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mscratch)
  if (has_mscratch()) {
    return mscratch_oneof_.mscratch_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mscratch(::google::protobuf::uint64 value) {
  if (!has_mscratch()) {
    clear_mscratch_oneof();
    set_has_mscratch();
  }
  mscratch_oneof_.mscratch_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mscratch)
}

// uint64 mepc = 41;
inline bool ProcessorState::has_mepc() const {
  return mepc_oneof_case() == kMepc;
}
inline void ProcessorState::set_has_mepc() {
  _oneof_case_[40] = kMepc;
}
inline void ProcessorState::clear_mepc() {
  if (has_mepc()) {
    mepc_oneof_.mepc_ = GOOGLE_ULONGLONG(0);
    clear_has_mepc_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mepc() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mepc)
  if (has_mepc()) {
    return mepc_oneof_.mepc_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mepc(::google::protobuf::uint64 value) {
  if (!has_mepc()) {
    clear_mepc_oneof();
    set_has_mepc();
  }
  mepc_oneof_.mepc_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mepc)
}

// uint64 mcause = 42;
inline bool ProcessorState::has_mcause() const {
  return mcause_oneof_case() == kMcause;
}
inline void ProcessorState::set_has_mcause() {
  _oneof_case_[41] = kMcause;
}
inline void ProcessorState::clear_mcause() {
  if (has_mcause()) {
    mcause_oneof_.mcause_ = GOOGLE_ULONGLONG(0);
    clear_has_mcause_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mcause() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mcause)
  if (has_mcause()) {
    return mcause_oneof_.mcause_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mcause(::google::protobuf::uint64 value) {
  if (!has_mcause()) {
    clear_mcause_oneof();
    set_has_mcause();
  }
  mcause_oneof_.mcause_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mcause)
}

// uint64 mtval = 43;
inline bool ProcessorState::has_mtval() const {
  return mtval_oneof_case() == kMtval;
}
inline void ProcessorState::set_has_mtval() {
  _oneof_case_[42] = kMtval;
}
inline void ProcessorState::clear_mtval() {
  if (has_mtval()) {
    mtval_oneof_.mtval_ = GOOGLE_ULONGLONG(0);
    clear_has_mtval_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mtval() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mtval)
  if (has_mtval()) {
    return mtval_oneof_.mtval_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mtval(::google::protobuf::uint64 value) {
  if (!has_mtval()) {
    clear_mtval_oneof();
    set_has_mtval();
  }
  mtval_oneof_.mtval_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mtval)
}

// uint64 misa = 44;
inline bool ProcessorState::has_misa() const {
  return misa_oneof_case() == kMisa;
}
inline void ProcessorState::set_has_misa() {
  _oneof_case_[43] = kMisa;
}
inline void ProcessorState::clear_misa() {
  if (has_misa()) {
    misa_oneof_.misa_ = GOOGLE_ULONGLONG(0);
    clear_has_misa_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::misa() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.misa)
  if (has_misa()) {
    return misa_oneof_.misa_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_misa(::google::protobuf::uint64 value) {
  if (!has_misa()) {
    clear_misa_oneof();
    set_has_misa();
  }
  misa_oneof_.misa_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.misa)
}

// uint64 mie = 45;
inline bool ProcessorState::has_mie() const {
  return mie_oneof_case() == kMie;
}
inline void ProcessorState::set_has_mie() {
  _oneof_case_[44] = kMie;
}
inline void ProcessorState::clear_mie() {
  if (has_mie()) {
    mie_oneof_.mie_ = GOOGLE_ULONGLONG(0);
    clear_has_mie_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mie() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mie)
  if (has_mie()) {
    return mie_oneof_.mie_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mie(::google::protobuf::uint64 value) {
  if (!has_mie()) {
    clear_mie_oneof();
    set_has_mie();
  }
  mie_oneof_.mie_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mie)
}

// uint64 mip = 46;
inline bool ProcessorState::has_mip() const {
  return mip_oneof_case() == kMip;
}
inline void ProcessorState::set_has_mip() {
  _oneof_case_[45] = kMip;
}
inline void ProcessorState::clear_mip() {
  if (has_mip()) {
    mip_oneof_.mip_ = GOOGLE_ULONGLONG(0);
    clear_has_mip_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mip() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mip)
  if (has_mip()) {
    return mip_oneof_.mip_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mip(::google::protobuf::uint64 value) {
  if (!has_mip()) {
    clear_mip_oneof();
    set_has_mip();
  }
  mip_oneof_.mip_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mip)
}

// uint64 medeleg = 47;
inline bool ProcessorState::has_medeleg() const {
  return medeleg_oneof_case() == kMedeleg;
}
inline void ProcessorState::set_has_medeleg() {
  _oneof_case_[46] = kMedeleg;
}
inline void ProcessorState::clear_medeleg() {
  if (has_medeleg()) {
    medeleg_oneof_.medeleg_ = GOOGLE_ULONGLONG(0);
    clear_has_medeleg_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::medeleg() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.medeleg)
  if (has_medeleg()) {
    return medeleg_oneof_.medeleg_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_medeleg(::google::protobuf::uint64 value) {
  if (!has_medeleg()) {
    clear_medeleg_oneof();
    set_has_medeleg();
  }
  medeleg_oneof_.medeleg_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.medeleg)
}

// uint64 mideleg = 48;
inline bool ProcessorState::has_mideleg() const {
  return mideleg_oneof_case() == kMideleg;
}
inline void ProcessorState::set_has_mideleg() {
  _oneof_case_[47] = kMideleg;
}
inline void ProcessorState::clear_mideleg() {
  if (has_mideleg()) {
    mideleg_oneof_.mideleg_ = GOOGLE_ULONGLONG(0);
    clear_has_mideleg_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mideleg() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mideleg)
  if (has_mideleg()) {
    return mideleg_oneof_.mideleg_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mideleg(::google::protobuf::uint64 value) {
  if (!has_mideleg()) {
    clear_mideleg_oneof();
    set_has_mideleg();
  }
  mideleg_oneof_.mideleg_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mideleg)
}

// uint64 mcounteren = 49;
inline bool ProcessorState::has_mcounteren() const {
  return mcounteren_oneof_case() == kMcounteren;
}
inline void ProcessorState::set_has_mcounteren() {
  _oneof_case_[48] = kMcounteren;
}
inline void ProcessorState::clear_mcounteren() {
  if (has_mcounteren()) {
    mcounteren_oneof_.mcounteren_ = GOOGLE_ULONGLONG(0);
    clear_has_mcounteren_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::mcounteren() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.mcounteren)
  if (has_mcounteren()) {
    return mcounteren_oneof_.mcounteren_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_mcounteren(::google::protobuf::uint64 value) {
  if (!has_mcounteren()) {
    clear_mcounteren_oneof();
    set_has_mcounteren();
  }
  mcounteren_oneof_.mcounteren_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.mcounteren)
}

// uint64 stvec = 50;
inline bool ProcessorState::has_stvec() const {
  return stvec_oneof_case() == kStvec;
}
inline void ProcessorState::set_has_stvec() {
  _oneof_case_[49] = kStvec;
}
inline void ProcessorState::clear_stvec() {
  if (has_stvec()) {
    stvec_oneof_.stvec_ = GOOGLE_ULONGLONG(0);
    clear_has_stvec_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::stvec() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.stvec)
  if (has_stvec()) {
    return stvec_oneof_.stvec_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_stvec(::google::protobuf::uint64 value) {
  if (!has_stvec()) {
    clear_stvec_oneof();
    set_has_stvec();
  }
  stvec_oneof_.stvec_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.stvec)
}

// uint64 sscratch = 51;
inline bool ProcessorState::has_sscratch() const {
  return sscratch_oneof_case() == kSscratch;
}
inline void ProcessorState::set_has_sscratch() {
  _oneof_case_[50] = kSscratch;
}
inline void ProcessorState::clear_sscratch() {
  if (has_sscratch()) {
    sscratch_oneof_.sscratch_ = GOOGLE_ULONGLONG(0);
    clear_has_sscratch_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::sscratch() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.sscratch)
  if (has_sscratch()) {
    return sscratch_oneof_.sscratch_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_sscratch(::google::protobuf::uint64 value) {
  if (!has_sscratch()) {
    clear_sscratch_oneof();
    set_has_sscratch();
  }
  sscratch_oneof_.sscratch_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.sscratch)
}

// uint64 sepc = 52;
inline bool ProcessorState::has_sepc() const {
  return sepc_oneof_case() == kSepc;
}
inline void ProcessorState::set_has_sepc() {
  _oneof_case_[51] = kSepc;
}
inline void ProcessorState::clear_sepc() {
  if (has_sepc()) {
    sepc_oneof_.sepc_ = GOOGLE_ULONGLONG(0);
    clear_has_sepc_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::sepc() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.sepc)
  if (has_sepc()) {
    return sepc_oneof_.sepc_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_sepc(::google::protobuf::uint64 value) {
  if (!has_sepc()) {
    clear_sepc_oneof();
    set_has_sepc();
  }
  sepc_oneof_.sepc_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.sepc)
}

// uint64 scause = 53;
inline bool ProcessorState::has_scause() const {
  return scause_oneof_case() == kScause;
}
inline void ProcessorState::set_has_scause() {
  _oneof_case_[52] = kScause;
}
inline void ProcessorState::clear_scause() {
  if (has_scause()) {
    scause_oneof_.scause_ = GOOGLE_ULONGLONG(0);
    clear_has_scause_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::scause() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.scause)
  if (has_scause()) {
    return scause_oneof_.scause_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_scause(::google::protobuf::uint64 value) {
  if (!has_scause()) {
    clear_scause_oneof();
    set_has_scause();
  }
  scause_oneof_.scause_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.scause)
}

// uint64 stval = 54;
inline bool ProcessorState::has_stval() const {
  return stval_oneof_case() == kStval;
}
inline void ProcessorState::set_has_stval() {
  _oneof_case_[53] = kStval;
}
inline void ProcessorState::clear_stval() {
  if (has_stval()) {
    stval_oneof_.stval_ = GOOGLE_ULONGLONG(0);
    clear_has_stval_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::stval() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.stval)
  if (has_stval()) {
    return stval_oneof_.stval_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_stval(::google::protobuf::uint64 value) {
  if (!has_stval()) {
    clear_stval_oneof();
    set_has_stval();
  }
  stval_oneof_.stval_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.stval)
}

// uint64 satp = 55;
inline bool ProcessorState::has_satp() const {
  return satp_oneof_case() == kSatp;
}
inline void ProcessorState::set_has_satp() {
  _oneof_case_[54] = kSatp;
}
inline void ProcessorState::clear_satp() {
  if (has_satp()) {
    satp_oneof_.satp_ = GOOGLE_ULONGLONG(0);
    clear_has_satp_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::satp() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.satp)
  if (has_satp()) {
    return satp_oneof_.satp_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_satp(::google::protobuf::uint64 value) {
  if (!has_satp()) {
    clear_satp_oneof();
    set_has_satp();
  }
  satp_oneof_.satp_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.satp)
}

// uint64 scounteren = 56;
inline bool ProcessorState::has_scounteren() const {
  return scounteren_oneof_case() == kScounteren;
}
inline void ProcessorState::set_has_scounteren() {
  _oneof_case_[55] = kScounteren;
}
inline void ProcessorState::clear_scounteren() {
  if (has_scounteren()) {
    scounteren_oneof_.scounteren_ = GOOGLE_ULONGLONG(0);
    clear_has_scounteren_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::scounteren() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.scounteren)
  if (has_scounteren()) {
    return scounteren_oneof_.scounteren_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_scounteren(::google::protobuf::uint64 value) {
  if (!has_scounteren()) {
    clear_scounteren_oneof();
    set_has_scounteren();
  }
  scounteren_oneof_.scounteren_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.scounteren)
}

// uint64 ilrsc = 57;
inline bool ProcessorState::has_ilrsc() const {
  return ilrsc_oneof_case() == kIlrsc;
}
inline void ProcessorState::set_has_ilrsc() {
  _oneof_case_[56] = kIlrsc;
}
inline void ProcessorState::clear_ilrsc() {
  if (has_ilrsc()) {
    ilrsc_oneof_.ilrsc_ = GOOGLE_ULONGLONG(0);
    clear_has_ilrsc_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::ilrsc() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.ilrsc)
  if (has_ilrsc()) {
    return ilrsc_oneof_.ilrsc_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_ilrsc(::google::protobuf::uint64 value) {
  if (!has_ilrsc()) {
    clear_ilrsc_oneof();
    set_has_ilrsc();
  }
  ilrsc_oneof_.ilrsc_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.ilrsc)
}

// uint64 iflags = 58;
inline bool ProcessorState::has_iflags() const {
  return iflags_oneof_case() == kIflags;
}
inline void ProcessorState::set_has_iflags() {
  _oneof_case_[57] = kIflags;
}
inline void ProcessorState::clear_iflags() {
  if (has_iflags()) {
    iflags_oneof_.iflags_ = GOOGLE_ULONGLONG(0);
    clear_has_iflags_oneof();
  }
}
inline ::google::protobuf::uint64 ProcessorState::iflags() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ProcessorState.iflags)
  if (has_iflags()) {
    return iflags_oneof_.iflags_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ProcessorState::set_iflags(::google::protobuf::uint64 value) {
  if (!has_iflags()) {
    clear_iflags_oneof();
    set_has_iflags();
  }
  iflags_oneof_.iflags_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.ProcessorState.iflags)
}

inline bool ProcessorState::has_x1_oneof() const {
  return x1_oneof_case() != X1_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x1_oneof() {
  _oneof_case_[0] = X1_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x2_oneof() const {
  return x2_oneof_case() != X2_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x2_oneof() {
  _oneof_case_[1] = X2_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x3_oneof() const {
  return x3_oneof_case() != X3_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x3_oneof() {
  _oneof_case_[2] = X3_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x4_oneof() const {
  return x4_oneof_case() != X4_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x4_oneof() {
  _oneof_case_[3] = X4_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x5_oneof() const {
  return x5_oneof_case() != X5_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x5_oneof() {
  _oneof_case_[4] = X5_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x6_oneof() const {
  return x6_oneof_case() != X6_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x6_oneof() {
  _oneof_case_[5] = X6_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x7_oneof() const {
  return x7_oneof_case() != X7_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x7_oneof() {
  _oneof_case_[6] = X7_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x8_oneof() const {
  return x8_oneof_case() != X8_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x8_oneof() {
  _oneof_case_[7] = X8_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x9_oneof() const {
  return x9_oneof_case() != X9_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x9_oneof() {
  _oneof_case_[8] = X9_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x10_oneof() const {
  return x10_oneof_case() != X10_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x10_oneof() {
  _oneof_case_[9] = X10_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x11_oneof() const {
  return x11_oneof_case() != X11_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x11_oneof() {
  _oneof_case_[10] = X11_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x12_oneof() const {
  return x12_oneof_case() != X12_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x12_oneof() {
  _oneof_case_[11] = X12_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x13_oneof() const {
  return x13_oneof_case() != X13_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x13_oneof() {
  _oneof_case_[12] = X13_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x14_oneof() const {
  return x14_oneof_case() != X14_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x14_oneof() {
  _oneof_case_[13] = X14_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x15_oneof() const {
  return x15_oneof_case() != X15_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x15_oneof() {
  _oneof_case_[14] = X15_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x16_oneof() const {
  return x16_oneof_case() != X16_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x16_oneof() {
  _oneof_case_[15] = X16_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x17_oneof() const {
  return x17_oneof_case() != X17_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x17_oneof() {
  _oneof_case_[16] = X17_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x18_oneof() const {
  return x18_oneof_case() != X18_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x18_oneof() {
  _oneof_case_[17] = X18_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x19_oneof() const {
  return x19_oneof_case() != X19_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x19_oneof() {
  _oneof_case_[18] = X19_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x20_oneof() const {
  return x20_oneof_case() != X20_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x20_oneof() {
  _oneof_case_[19] = X20_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x21_oneof() const {
  return x21_oneof_case() != X21_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x21_oneof() {
  _oneof_case_[20] = X21_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x22_oneof() const {
  return x22_oneof_case() != X22_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x22_oneof() {
  _oneof_case_[21] = X22_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x23_oneof() const {
  return x23_oneof_case() != X23_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x23_oneof() {
  _oneof_case_[22] = X23_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x24_oneof() const {
  return x24_oneof_case() != X24_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x24_oneof() {
  _oneof_case_[23] = X24_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x25_oneof() const {
  return x25_oneof_case() != X25_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x25_oneof() {
  _oneof_case_[24] = X25_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x26_oneof() const {
  return x26_oneof_case() != X26_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x26_oneof() {
  _oneof_case_[25] = X26_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x27_oneof() const {
  return x27_oneof_case() != X27_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x27_oneof() {
  _oneof_case_[26] = X27_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x28_oneof() const {
  return x28_oneof_case() != X28_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x28_oneof() {
  _oneof_case_[27] = X28_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x29_oneof() const {
  return x29_oneof_case() != X29_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x29_oneof() {
  _oneof_case_[28] = X29_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x30_oneof() const {
  return x30_oneof_case() != X30_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x30_oneof() {
  _oneof_case_[29] = X30_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_x31_oneof() const {
  return x31_oneof_case() != X31_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_x31_oneof() {
  _oneof_case_[30] = X31_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_pc_oneof() const {
  return pc_oneof_case() != PC_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_pc_oneof() {
  _oneof_case_[31] = PC_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mvendorid_oneof() const {
  return mvendorid_oneof_case() != MVENDORID_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mvendorid_oneof() {
  _oneof_case_[32] = MVENDORID_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_marchid_oneof() const {
  return marchid_oneof_case() != MARCHID_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_marchid_oneof() {
  _oneof_case_[33] = MARCHID_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mimpid_oneof() const {
  return mimpid_oneof_case() != MIMPID_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mimpid_oneof() {
  _oneof_case_[34] = MIMPID_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mcycle_oneof() const {
  return mcycle_oneof_case() != MCYCLE_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mcycle_oneof() {
  _oneof_case_[35] = MCYCLE_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_minstret_oneof() const {
  return minstret_oneof_case() != MINSTRET_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_minstret_oneof() {
  _oneof_case_[36] = MINSTRET_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mstatus_oneof() const {
  return mstatus_oneof_case() != MSTATUS_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mstatus_oneof() {
  _oneof_case_[37] = MSTATUS_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mtvec_oneof() const {
  return mtvec_oneof_case() != MTVEC_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mtvec_oneof() {
  _oneof_case_[38] = MTVEC_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mscratch_oneof() const {
  return mscratch_oneof_case() != MSCRATCH_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mscratch_oneof() {
  _oneof_case_[39] = MSCRATCH_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mepc_oneof() const {
  return mepc_oneof_case() != MEPC_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mepc_oneof() {
  _oneof_case_[40] = MEPC_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mcause_oneof() const {
  return mcause_oneof_case() != MCAUSE_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mcause_oneof() {
  _oneof_case_[41] = MCAUSE_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mtval_oneof() const {
  return mtval_oneof_case() != MTVAL_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mtval_oneof() {
  _oneof_case_[42] = MTVAL_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_misa_oneof() const {
  return misa_oneof_case() != MISA_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_misa_oneof() {
  _oneof_case_[43] = MISA_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mie_oneof() const {
  return mie_oneof_case() != MIE_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mie_oneof() {
  _oneof_case_[44] = MIE_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mip_oneof() const {
  return mip_oneof_case() != MIP_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mip_oneof() {
  _oneof_case_[45] = MIP_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_medeleg_oneof() const {
  return medeleg_oneof_case() != MEDELEG_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_medeleg_oneof() {
  _oneof_case_[46] = MEDELEG_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mideleg_oneof() const {
  return mideleg_oneof_case() != MIDELEG_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mideleg_oneof() {
  _oneof_case_[47] = MIDELEG_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_mcounteren_oneof() const {
  return mcounteren_oneof_case() != MCOUNTEREN_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_mcounteren_oneof() {
  _oneof_case_[48] = MCOUNTEREN_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_stvec_oneof() const {
  return stvec_oneof_case() != STVEC_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_stvec_oneof() {
  _oneof_case_[49] = STVEC_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_sscratch_oneof() const {
  return sscratch_oneof_case() != SSCRATCH_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_sscratch_oneof() {
  _oneof_case_[50] = SSCRATCH_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_sepc_oneof() const {
  return sepc_oneof_case() != SEPC_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_sepc_oneof() {
  _oneof_case_[51] = SEPC_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_scause_oneof() const {
  return scause_oneof_case() != SCAUSE_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_scause_oneof() {
  _oneof_case_[52] = SCAUSE_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_stval_oneof() const {
  return stval_oneof_case() != STVAL_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_stval_oneof() {
  _oneof_case_[53] = STVAL_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_satp_oneof() const {
  return satp_oneof_case() != SATP_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_satp_oneof() {
  _oneof_case_[54] = SATP_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_scounteren_oneof() const {
  return scounteren_oneof_case() != SCOUNTEREN_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_scounteren_oneof() {
  _oneof_case_[55] = SCOUNTEREN_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_ilrsc_oneof() const {
  return ilrsc_oneof_case() != ILRSC_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_ilrsc_oneof() {
  _oneof_case_[56] = ILRSC_ONEOF_NOT_SET;
}
inline bool ProcessorState::has_iflags_oneof() const {
  return iflags_oneof_case() != IFLAGS_ONEOF_NOT_SET;
}
inline void ProcessorState::clear_has_iflags_oneof() {
  _oneof_case_[57] = IFLAGS_ONEOF_NOT_SET;
}
inline ProcessorState::X1OneofCase ProcessorState::x1_oneof_case() const {
  return ProcessorState::X1OneofCase(_oneof_case_[0]);
}
inline ProcessorState::X2OneofCase ProcessorState::x2_oneof_case() const {
  return ProcessorState::X2OneofCase(_oneof_case_[1]);
}
inline ProcessorState::X3OneofCase ProcessorState::x3_oneof_case() const {
  return ProcessorState::X3OneofCase(_oneof_case_[2]);
}
inline ProcessorState::X4OneofCase ProcessorState::x4_oneof_case() const {
  return ProcessorState::X4OneofCase(_oneof_case_[3]);
}
inline ProcessorState::X5OneofCase ProcessorState::x5_oneof_case() const {
  return ProcessorState::X5OneofCase(_oneof_case_[4]);
}
inline ProcessorState::X6OneofCase ProcessorState::x6_oneof_case() const {
  return ProcessorState::X6OneofCase(_oneof_case_[5]);
}
inline ProcessorState::X7OneofCase ProcessorState::x7_oneof_case() const {
  return ProcessorState::X7OneofCase(_oneof_case_[6]);
}
inline ProcessorState::X8OneofCase ProcessorState::x8_oneof_case() const {
  return ProcessorState::X8OneofCase(_oneof_case_[7]);
}
inline ProcessorState::X9OneofCase ProcessorState::x9_oneof_case() const {
  return ProcessorState::X9OneofCase(_oneof_case_[8]);
}
inline ProcessorState::X10OneofCase ProcessorState::x10_oneof_case() const {
  return ProcessorState::X10OneofCase(_oneof_case_[9]);
}
inline ProcessorState::X11OneofCase ProcessorState::x11_oneof_case() const {
  return ProcessorState::X11OneofCase(_oneof_case_[10]);
}
inline ProcessorState::X12OneofCase ProcessorState::x12_oneof_case() const {
  return ProcessorState::X12OneofCase(_oneof_case_[11]);
}
inline ProcessorState::X13OneofCase ProcessorState::x13_oneof_case() const {
  return ProcessorState::X13OneofCase(_oneof_case_[12]);
}
inline ProcessorState::X14OneofCase ProcessorState::x14_oneof_case() const {
  return ProcessorState::X14OneofCase(_oneof_case_[13]);
}
inline ProcessorState::X15OneofCase ProcessorState::x15_oneof_case() const {
  return ProcessorState::X15OneofCase(_oneof_case_[14]);
}
inline ProcessorState::X16OneofCase ProcessorState::x16_oneof_case() const {
  return ProcessorState::X16OneofCase(_oneof_case_[15]);
}
inline ProcessorState::X17OneofCase ProcessorState::x17_oneof_case() const {
  return ProcessorState::X17OneofCase(_oneof_case_[16]);
}
inline ProcessorState::X18OneofCase ProcessorState::x18_oneof_case() const {
  return ProcessorState::X18OneofCase(_oneof_case_[17]);
}
inline ProcessorState::X19OneofCase ProcessorState::x19_oneof_case() const {
  return ProcessorState::X19OneofCase(_oneof_case_[18]);
}
inline ProcessorState::X20OneofCase ProcessorState::x20_oneof_case() const {
  return ProcessorState::X20OneofCase(_oneof_case_[19]);
}
inline ProcessorState::X21OneofCase ProcessorState::x21_oneof_case() const {
  return ProcessorState::X21OneofCase(_oneof_case_[20]);
}
inline ProcessorState::X22OneofCase ProcessorState::x22_oneof_case() const {
  return ProcessorState::X22OneofCase(_oneof_case_[21]);
}
inline ProcessorState::X23OneofCase ProcessorState::x23_oneof_case() const {
  return ProcessorState::X23OneofCase(_oneof_case_[22]);
}
inline ProcessorState::X24OneofCase ProcessorState::x24_oneof_case() const {
  return ProcessorState::X24OneofCase(_oneof_case_[23]);
}
inline ProcessorState::X25OneofCase ProcessorState::x25_oneof_case() const {
  return ProcessorState::X25OneofCase(_oneof_case_[24]);
}
inline ProcessorState::X26OneofCase ProcessorState::x26_oneof_case() const {
  return ProcessorState::X26OneofCase(_oneof_case_[25]);
}
inline ProcessorState::X27OneofCase ProcessorState::x27_oneof_case() const {
  return ProcessorState::X27OneofCase(_oneof_case_[26]);
}
inline ProcessorState::X28OneofCase ProcessorState::x28_oneof_case() const {
  return ProcessorState::X28OneofCase(_oneof_case_[27]);
}
inline ProcessorState::X29OneofCase ProcessorState::x29_oneof_case() const {
  return ProcessorState::X29OneofCase(_oneof_case_[28]);
}
inline ProcessorState::X30OneofCase ProcessorState::x30_oneof_case() const {
  return ProcessorState::X30OneofCase(_oneof_case_[29]);
}
inline ProcessorState::X31OneofCase ProcessorState::x31_oneof_case() const {
  return ProcessorState::X31OneofCase(_oneof_case_[30]);
}
inline ProcessorState::PcOneofCase ProcessorState::pc_oneof_case() const {
  return ProcessorState::PcOneofCase(_oneof_case_[31]);
}
inline ProcessorState::MvendoridOneofCase ProcessorState::mvendorid_oneof_case() const {
  return ProcessorState::MvendoridOneofCase(_oneof_case_[32]);
}
inline ProcessorState::MarchidOneofCase ProcessorState::marchid_oneof_case() const {
  return ProcessorState::MarchidOneofCase(_oneof_case_[33]);
}
inline ProcessorState::MimpidOneofCase ProcessorState::mimpid_oneof_case() const {
  return ProcessorState::MimpidOneofCase(_oneof_case_[34]);
}
inline ProcessorState::McycleOneofCase ProcessorState::mcycle_oneof_case() const {
  return ProcessorState::McycleOneofCase(_oneof_case_[35]);
}
inline ProcessorState::MinstretOneofCase ProcessorState::minstret_oneof_case() const {
  return ProcessorState::MinstretOneofCase(_oneof_case_[36]);
}
inline ProcessorState::MstatusOneofCase ProcessorState::mstatus_oneof_case() const {
  return ProcessorState::MstatusOneofCase(_oneof_case_[37]);
}
inline ProcessorState::MtvecOneofCase ProcessorState::mtvec_oneof_case() const {
  return ProcessorState::MtvecOneofCase(_oneof_case_[38]);
}
inline ProcessorState::MscratchOneofCase ProcessorState::mscratch_oneof_case() const {
  return ProcessorState::MscratchOneofCase(_oneof_case_[39]);
}
inline ProcessorState::MepcOneofCase ProcessorState::mepc_oneof_case() const {
  return ProcessorState::MepcOneofCase(_oneof_case_[40]);
}
inline ProcessorState::McauseOneofCase ProcessorState::mcause_oneof_case() const {
  return ProcessorState::McauseOneofCase(_oneof_case_[41]);
}
inline ProcessorState::MtvalOneofCase ProcessorState::mtval_oneof_case() const {
  return ProcessorState::MtvalOneofCase(_oneof_case_[42]);
}
inline ProcessorState::MisaOneofCase ProcessorState::misa_oneof_case() const {
  return ProcessorState::MisaOneofCase(_oneof_case_[43]);
}
inline ProcessorState::MieOneofCase ProcessorState::mie_oneof_case() const {
  return ProcessorState::MieOneofCase(_oneof_case_[44]);
}
inline ProcessorState::MipOneofCase ProcessorState::mip_oneof_case() const {
  return ProcessorState::MipOneofCase(_oneof_case_[45]);
}
inline ProcessorState::MedelegOneofCase ProcessorState::medeleg_oneof_case() const {
  return ProcessorState::MedelegOneofCase(_oneof_case_[46]);
}
inline ProcessorState::MidelegOneofCase ProcessorState::mideleg_oneof_case() const {
  return ProcessorState::MidelegOneofCase(_oneof_case_[47]);
}
inline ProcessorState::McounterenOneofCase ProcessorState::mcounteren_oneof_case() const {
  return ProcessorState::McounterenOneofCase(_oneof_case_[48]);
}
inline ProcessorState::StvecOneofCase ProcessorState::stvec_oneof_case() const {
  return ProcessorState::StvecOneofCase(_oneof_case_[49]);
}
inline ProcessorState::SscratchOneofCase ProcessorState::sscratch_oneof_case() const {
  return ProcessorState::SscratchOneofCase(_oneof_case_[50]);
}
inline ProcessorState::SepcOneofCase ProcessorState::sepc_oneof_case() const {
  return ProcessorState::SepcOneofCase(_oneof_case_[51]);
}
inline ProcessorState::ScauseOneofCase ProcessorState::scause_oneof_case() const {
  return ProcessorState::ScauseOneofCase(_oneof_case_[52]);
}
inline ProcessorState::StvalOneofCase ProcessorState::stval_oneof_case() const {
  return ProcessorState::StvalOneofCase(_oneof_case_[53]);
}
inline ProcessorState::SatpOneofCase ProcessorState::satp_oneof_case() const {
  return ProcessorState::SatpOneofCase(_oneof_case_[54]);
}
inline ProcessorState::ScounterenOneofCase ProcessorState::scounteren_oneof_case() const {
  return ProcessorState::ScounterenOneofCase(_oneof_case_[55]);
}
inline ProcessorState::IlrscOneofCase ProcessorState::ilrsc_oneof_case() const {
  return ProcessorState::IlrscOneofCase(_oneof_case_[56]);
}
inline ProcessorState::IflagsOneofCase ProcessorState::iflags_oneof_case() const {
  return ProcessorState::IflagsOneofCase(_oneof_case_[57]);
}
// -------------------------------------------------------------------

// Processor

// .CartesiCore.ProcessorState state = 1;
inline bool Processor::has_state() const {
  return processor_oneof_case() == kState;
}
inline void Processor::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void Processor::clear_state() {
  if (has_state()) {
    delete processor_oneof_.state_;
    clear_has_processor_oneof();
  }
}
inline const ::CartesiCore::ProcessorState& Processor::_internal_state() const {
  return *processor_oneof_.state_;
}
inline ::CartesiCore::ProcessorState* Processor::release_state() {
  // @@protoc_insertion_point(field_release:CartesiCore.Processor.state)
  if (has_state()) {
    clear_has_processor_oneof();
      ::CartesiCore::ProcessorState* temp = processor_oneof_.state_;
    processor_oneof_.state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CartesiCore::ProcessorState& Processor::state() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Processor.state)
  return has_state()
      ? *processor_oneof_.state_
      : *reinterpret_cast< ::CartesiCore::ProcessorState*>(&::CartesiCore::_ProcessorState_default_instance_);
}
inline ::CartesiCore::ProcessorState* Processor::mutable_state() {
  if (!has_state()) {
    clear_processor_oneof();
    set_has_state();
    processor_oneof_.state_ = CreateMaybeMessage< ::CartesiCore::ProcessorState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.Processor.state)
  return processor_oneof_.state_;
}

// string backing = 2;
inline bool Processor::has_backing() const {
  return processor_oneof_case() == kBacking;
}
inline void Processor::set_has_backing() {
  _oneof_case_[0] = kBacking;
}
inline void Processor::clear_backing() {
  if (has_backing()) {
    processor_oneof_.backing_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_processor_oneof();
  }
}
inline const ::std::string& Processor::backing() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Processor.backing)
  if (has_backing()) {
    return processor_oneof_.backing_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Processor::set_backing(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.Processor.backing)
  if (!has_backing()) {
    clear_processor_oneof();
    set_has_backing();
    processor_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  processor_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.Processor.backing)
}
#if LANG_CXX11
inline void Processor::set_backing(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.Processor.backing)
  if (!has_backing()) {
    clear_processor_oneof();
    set_has_backing();
    processor_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  processor_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.Processor.backing)
}
#endif
inline void Processor::set_backing(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_backing()) {
    clear_processor_oneof();
    set_has_backing();
    processor_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  processor_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.Processor.backing)
}
inline void Processor::set_backing(const char* value, size_t size) {
  if (!has_backing()) {
    clear_processor_oneof();
    set_has_backing();
    processor_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  processor_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.Processor.backing)
}
inline ::std::string* Processor::mutable_backing() {
  if (!has_backing()) {
    clear_processor_oneof();
    set_has_backing();
    processor_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.Processor.backing)
  return processor_oneof_.backing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Processor::release_backing() {
  // @@protoc_insertion_point(field_release:CartesiCore.Processor.backing)
  if (has_backing()) {
    clear_has_processor_oneof();
    return processor_oneof_.backing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Processor::set_allocated_backing(::std::string* backing) {
  if (!has_backing()) {
    processor_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_processor_oneof();
  if (backing != NULL) {
    set_has_backing();
    processor_oneof_.backing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backing);
  }
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Processor.backing)
}

inline bool Processor::has_processor_oneof() const {
  return processor_oneof_case() != PROCESSOR_ONEOF_NOT_SET;
}
inline void Processor::clear_has_processor_oneof() {
  _oneof_case_[0] = PROCESSOR_ONEOF_NOT_SET;
}
inline Processor::ProcessorOneofCase Processor::processor_oneof_case() const {
  return Processor::ProcessorOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ROM

// string bootargs = 1;
inline bool ROM::has_bootargs() const {
  return rom_oneof_case() == kBootargs;
}
inline void ROM::set_has_bootargs() {
  _oneof_case_[0] = kBootargs;
}
inline void ROM::clear_bootargs() {
  if (has_bootargs()) {
    rom_oneof_.bootargs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_rom_oneof();
  }
}
inline const ::std::string& ROM::bootargs() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ROM.bootargs)
  if (has_bootargs()) {
    return rom_oneof_.bootargs_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ROM::set_bootargs(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.ROM.bootargs)
  if (!has_bootargs()) {
    clear_rom_oneof();
    set_has_bootargs();
    rom_oneof_.bootargs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rom_oneof_.bootargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.ROM.bootargs)
}
#if LANG_CXX11
inline void ROM::set_bootargs(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.ROM.bootargs)
  if (!has_bootargs()) {
    clear_rom_oneof();
    set_has_bootargs();
    rom_oneof_.bootargs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rom_oneof_.bootargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.ROM.bootargs)
}
#endif
inline void ROM::set_bootargs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_bootargs()) {
    clear_rom_oneof();
    set_has_bootargs();
    rom_oneof_.bootargs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rom_oneof_.bootargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.ROM.bootargs)
}
inline void ROM::set_bootargs(const char* value, size_t size) {
  if (!has_bootargs()) {
    clear_rom_oneof();
    set_has_bootargs();
    rom_oneof_.bootargs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rom_oneof_.bootargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.ROM.bootargs)
}
inline ::std::string* ROM::mutable_bootargs() {
  if (!has_bootargs()) {
    clear_rom_oneof();
    set_has_bootargs();
    rom_oneof_.bootargs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.ROM.bootargs)
  return rom_oneof_.bootargs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ROM::release_bootargs() {
  // @@protoc_insertion_point(field_release:CartesiCore.ROM.bootargs)
  if (has_bootargs()) {
    clear_has_rom_oneof();
    return rom_oneof_.bootargs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ROM::set_allocated_bootargs(::std::string* bootargs) {
  if (!has_bootargs()) {
    rom_oneof_.bootargs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_rom_oneof();
  if (bootargs != NULL) {
    set_has_bootargs();
    rom_oneof_.bootargs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bootargs);
  }
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.ROM.bootargs)
}

// string backing = 2;
inline bool ROM::has_backing() const {
  return rom_oneof_case() == kBacking;
}
inline void ROM::set_has_backing() {
  _oneof_case_[0] = kBacking;
}
inline void ROM::clear_backing() {
  if (has_backing()) {
    rom_oneof_.backing_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_rom_oneof();
  }
}
inline const ::std::string& ROM::backing() const {
  // @@protoc_insertion_point(field_get:CartesiCore.ROM.backing)
  if (has_backing()) {
    return rom_oneof_.backing_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ROM::set_backing(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.ROM.backing)
  if (!has_backing()) {
    clear_rom_oneof();
    set_has_backing();
    rom_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rom_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.ROM.backing)
}
#if LANG_CXX11
inline void ROM::set_backing(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.ROM.backing)
  if (!has_backing()) {
    clear_rom_oneof();
    set_has_backing();
    rom_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rom_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.ROM.backing)
}
#endif
inline void ROM::set_backing(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_backing()) {
    clear_rom_oneof();
    set_has_backing();
    rom_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rom_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.ROM.backing)
}
inline void ROM::set_backing(const char* value, size_t size) {
  if (!has_backing()) {
    clear_rom_oneof();
    set_has_backing();
    rom_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  rom_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.ROM.backing)
}
inline ::std::string* ROM::mutable_backing() {
  if (!has_backing()) {
    clear_rom_oneof();
    set_has_backing();
    rom_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.ROM.backing)
  return rom_oneof_.backing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ROM::release_backing() {
  // @@protoc_insertion_point(field_release:CartesiCore.ROM.backing)
  if (has_backing()) {
    clear_has_rom_oneof();
    return rom_oneof_.backing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ROM::set_allocated_backing(::std::string* backing) {
  if (!has_backing()) {
    rom_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_rom_oneof();
  if (backing != NULL) {
    set_has_backing();
    rom_oneof_.backing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backing);
  }
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.ROM.backing)
}

inline bool ROM::has_rom_oneof() const {
  return rom_oneof_case() != ROM_ONEOF_NOT_SET;
}
inline void ROM::clear_has_rom_oneof() {
  _oneof_case_[0] = ROM_ONEOF_NOT_SET;
}
inline ROM::RomOneofCase ROM::rom_oneof_case() const {
  return ROM::RomOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RAM

// uint64 length = 1;
inline void RAM::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RAM::length() const {
  // @@protoc_insertion_point(field_get:CartesiCore.RAM.length)
  return length_;
}
inline void RAM::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.RAM.length)
}

// string backing = 2;
inline void RAM::clear_backing() {
  backing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RAM::backing() const {
  // @@protoc_insertion_point(field_get:CartesiCore.RAM.backing)
  return backing_.GetNoArena();
}
inline void RAM::set_backing(const ::std::string& value) {
  
  backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.RAM.backing)
}
#if LANG_CXX11
inline void RAM::set_backing(::std::string&& value) {
  
  backing_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.RAM.backing)
}
#endif
inline void RAM::set_backing(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.RAM.backing)
}
inline void RAM::set_backing(const char* value, size_t size) {
  
  backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.RAM.backing)
}
inline ::std::string* RAM::mutable_backing() {
  
  // @@protoc_insertion_point(field_mutable:CartesiCore.RAM.backing)
  return backing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RAM::release_backing() {
  // @@protoc_insertion_point(field_release:CartesiCore.RAM.backing)
  
  return backing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RAM::set_allocated_backing(::std::string* backing) {
  if (backing != NULL) {
    
  } else {
    
  }
  backing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backing);
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.RAM.backing)
}

// -------------------------------------------------------------------

// Drive

// uint64 start = 1;
inline void Drive::clear_start() {
  start_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Drive::start() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Drive.start)
  return start_;
}
inline void Drive::set_start(::google::protobuf::uint64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.Drive.start)
}

// uint64 length = 2;
inline void Drive::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Drive::length() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Drive.length)
  return length_;
}
inline void Drive::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.Drive.length)
}

// string backing = 3;
inline void Drive::clear_backing() {
  backing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Drive::backing() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Drive.backing)
  return backing_.GetNoArena();
}
inline void Drive::set_backing(const ::std::string& value) {
  
  backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.Drive.backing)
}
#if LANG_CXX11
inline void Drive::set_backing(::std::string&& value) {
  
  backing_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.Drive.backing)
}
#endif
inline void Drive::set_backing(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.Drive.backing)
}
inline void Drive::set_backing(const char* value, size_t size) {
  
  backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.Drive.backing)
}
inline ::std::string* Drive::mutable_backing() {
  
  // @@protoc_insertion_point(field_mutable:CartesiCore.Drive.backing)
  return backing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Drive::release_backing() {
  // @@protoc_insertion_point(field_release:CartesiCore.Drive.backing)
  
  return backing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Drive::set_allocated_backing(::std::string* backing) {
  if (backing != NULL) {
    
  } else {
    
  }
  backing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backing);
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Drive.backing)
}

// bool shared = 4;
inline void Drive::clear_shared() {
  shared_ = false;
}
inline bool Drive::shared() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Drive.shared)
  return shared_;
}
inline void Drive::set_shared(bool value) {
  
  shared_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.Drive.shared)
}

// string label = 5;
inline void Drive::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Drive::label() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Drive.label)
  return label_.GetNoArena();
}
inline void Drive::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.Drive.label)
}
#if LANG_CXX11
inline void Drive::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.Drive.label)
}
#endif
inline void Drive::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.Drive.label)
}
inline void Drive::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.Drive.label)
}
inline ::std::string* Drive::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:CartesiCore.Drive.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Drive::release_label() {
  // @@protoc_insertion_point(field_release:CartesiCore.Drive.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Drive::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Drive.label)
}

// -------------------------------------------------------------------

// CLINTState

// uint64 mtime = 1;
inline void CLINTState::clear_mtime() {
  mtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CLINTState::mtime() const {
  // @@protoc_insertion_point(field_get:CartesiCore.CLINTState.mtime)
  return mtime_;
}
inline void CLINTState::set_mtime(::google::protobuf::uint64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.CLINTState.mtime)
}

// uint64 mtimecmp = 2;
inline void CLINTState::clear_mtimecmp() {
  mtimecmp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CLINTState::mtimecmp() const {
  // @@protoc_insertion_point(field_get:CartesiCore.CLINTState.mtimecmp)
  return mtimecmp_;
}
inline void CLINTState::set_mtimecmp(::google::protobuf::uint64 value) {
  
  mtimecmp_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.CLINTState.mtimecmp)
}

// -------------------------------------------------------------------

// CLINT

// .CartesiCore.CLINTState state = 1;
inline bool CLINT::has_state() const {
  return clint_oneof_case() == kState;
}
inline void CLINT::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void CLINT::clear_state() {
  if (has_state()) {
    delete clint_oneof_.state_;
    clear_has_clint_oneof();
  }
}
inline const ::CartesiCore::CLINTState& CLINT::_internal_state() const {
  return *clint_oneof_.state_;
}
inline ::CartesiCore::CLINTState* CLINT::release_state() {
  // @@protoc_insertion_point(field_release:CartesiCore.CLINT.state)
  if (has_state()) {
    clear_has_clint_oneof();
      ::CartesiCore::CLINTState* temp = clint_oneof_.state_;
    clint_oneof_.state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CartesiCore::CLINTState& CLINT::state() const {
  // @@protoc_insertion_point(field_get:CartesiCore.CLINT.state)
  return has_state()
      ? *clint_oneof_.state_
      : *reinterpret_cast< ::CartesiCore::CLINTState*>(&::CartesiCore::_CLINTState_default_instance_);
}
inline ::CartesiCore::CLINTState* CLINT::mutable_state() {
  if (!has_state()) {
    clear_clint_oneof();
    set_has_state();
    clint_oneof_.state_ = CreateMaybeMessage< ::CartesiCore::CLINTState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.CLINT.state)
  return clint_oneof_.state_;
}

// string backing = 2;
inline bool CLINT::has_backing() const {
  return clint_oneof_case() == kBacking;
}
inline void CLINT::set_has_backing() {
  _oneof_case_[0] = kBacking;
}
inline void CLINT::clear_backing() {
  if (has_backing()) {
    clint_oneof_.backing_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_clint_oneof();
  }
}
inline const ::std::string& CLINT::backing() const {
  // @@protoc_insertion_point(field_get:CartesiCore.CLINT.backing)
  if (has_backing()) {
    return clint_oneof_.backing_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CLINT::set_backing(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.CLINT.backing)
  if (!has_backing()) {
    clear_clint_oneof();
    set_has_backing();
    clint_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clint_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.CLINT.backing)
}
#if LANG_CXX11
inline void CLINT::set_backing(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.CLINT.backing)
  if (!has_backing()) {
    clear_clint_oneof();
    set_has_backing();
    clint_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clint_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.CLINT.backing)
}
#endif
inline void CLINT::set_backing(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_backing()) {
    clear_clint_oneof();
    set_has_backing();
    clint_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clint_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.CLINT.backing)
}
inline void CLINT::set_backing(const char* value, size_t size) {
  if (!has_backing()) {
    clear_clint_oneof();
    set_has_backing();
    clint_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clint_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.CLINT.backing)
}
inline ::std::string* CLINT::mutable_backing() {
  if (!has_backing()) {
    clear_clint_oneof();
    set_has_backing();
    clint_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.CLINT.backing)
  return clint_oneof_.backing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLINT::release_backing() {
  // @@protoc_insertion_point(field_release:CartesiCore.CLINT.backing)
  if (has_backing()) {
    clear_has_clint_oneof();
    return clint_oneof_.backing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CLINT::set_allocated_backing(::std::string* backing) {
  if (!has_backing()) {
    clint_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_clint_oneof();
  if (backing != NULL) {
    set_has_backing();
    clint_oneof_.backing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backing);
  }
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.CLINT.backing)
}

inline bool CLINT::has_clint_oneof() const {
  return clint_oneof_case() != CLINT_ONEOF_NOT_SET;
}
inline void CLINT::clear_has_clint_oneof() {
  _oneof_case_[0] = CLINT_ONEOF_NOT_SET;
}
inline CLINT::ClintOneofCase CLINT::clint_oneof_case() const {
  return CLINT::ClintOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HTIFState

// uint64 fromhost = 1;
inline void HTIFState::clear_fromhost() {
  fromhost_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HTIFState::fromhost() const {
  // @@protoc_insertion_point(field_get:CartesiCore.HTIFState.fromhost)
  return fromhost_;
}
inline void HTIFState::set_fromhost(::google::protobuf::uint64 value) {
  
  fromhost_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.HTIFState.fromhost)
}

// uint64 tohost = 2;
inline void HTIFState::clear_tohost() {
  tohost_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HTIFState::tohost() const {
  // @@protoc_insertion_point(field_get:CartesiCore.HTIFState.tohost)
  return tohost_;
}
inline void HTIFState::set_tohost(::google::protobuf::uint64 value) {
  
  tohost_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.HTIFState.tohost)
}

// -------------------------------------------------------------------

// HTIF

// .CartesiCore.HTIFState state = 1;
inline bool HTIF::has_state() const {
  return htif_oneof_case() == kState;
}
inline void HTIF::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void HTIF::clear_state() {
  if (has_state()) {
    delete htif_oneof_.state_;
    clear_has_htif_oneof();
  }
}
inline const ::CartesiCore::HTIFState& HTIF::_internal_state() const {
  return *htif_oneof_.state_;
}
inline ::CartesiCore::HTIFState* HTIF::release_state() {
  // @@protoc_insertion_point(field_release:CartesiCore.HTIF.state)
  if (has_state()) {
    clear_has_htif_oneof();
      ::CartesiCore::HTIFState* temp = htif_oneof_.state_;
    htif_oneof_.state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CartesiCore::HTIFState& HTIF::state() const {
  // @@protoc_insertion_point(field_get:CartesiCore.HTIF.state)
  return has_state()
      ? *htif_oneof_.state_
      : *reinterpret_cast< ::CartesiCore::HTIFState*>(&::CartesiCore::_HTIFState_default_instance_);
}
inline ::CartesiCore::HTIFState* HTIF::mutable_state() {
  if (!has_state()) {
    clear_htif_oneof();
    set_has_state();
    htif_oneof_.state_ = CreateMaybeMessage< ::CartesiCore::HTIFState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.HTIF.state)
  return htif_oneof_.state_;
}

// string backing = 2;
inline bool HTIF::has_backing() const {
  return htif_oneof_case() == kBacking;
}
inline void HTIF::set_has_backing() {
  _oneof_case_[0] = kBacking;
}
inline void HTIF::clear_backing() {
  if (has_backing()) {
    htif_oneof_.backing_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_htif_oneof();
  }
}
inline const ::std::string& HTIF::backing() const {
  // @@protoc_insertion_point(field_get:CartesiCore.HTIF.backing)
  if (has_backing()) {
    return htif_oneof_.backing_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void HTIF::set_backing(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.HTIF.backing)
  if (!has_backing()) {
    clear_htif_oneof();
    set_has_backing();
    htif_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  htif_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.HTIF.backing)
}
#if LANG_CXX11
inline void HTIF::set_backing(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.HTIF.backing)
  if (!has_backing()) {
    clear_htif_oneof();
    set_has_backing();
    htif_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  htif_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.HTIF.backing)
}
#endif
inline void HTIF::set_backing(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_backing()) {
    clear_htif_oneof();
    set_has_backing();
    htif_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  htif_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.HTIF.backing)
}
inline void HTIF::set_backing(const char* value, size_t size) {
  if (!has_backing()) {
    clear_htif_oneof();
    set_has_backing();
    htif_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  htif_oneof_.backing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.HTIF.backing)
}
inline ::std::string* HTIF::mutable_backing() {
  if (!has_backing()) {
    clear_htif_oneof();
    set_has_backing();
    htif_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.HTIF.backing)
  return htif_oneof_.backing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTIF::release_backing() {
  // @@protoc_insertion_point(field_release:CartesiCore.HTIF.backing)
  if (has_backing()) {
    clear_has_htif_oneof();
    return htif_oneof_.backing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void HTIF::set_allocated_backing(::std::string* backing) {
  if (!has_backing()) {
    htif_oneof_.backing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_htif_oneof();
  if (backing != NULL) {
    set_has_backing();
    htif_oneof_.backing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backing);
  }
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.HTIF.backing)
}

inline bool HTIF::has_htif_oneof() const {
  return htif_oneof_case() != HTIF_ONEOF_NOT_SET;
}
inline void HTIF::clear_has_htif_oneof() {
  _oneof_case_[0] = HTIF_ONEOF_NOT_SET;
}
inline HTIF::HtifOneofCase HTIF::htif_oneof_case() const {
  return HTIF::HtifOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MachineRequest

// .CartesiCore.Processor processor = 1;
inline bool MachineRequest::has_processor() const {
  return this != internal_default_instance() && processor_ != NULL;
}
inline void MachineRequest::clear_processor() {
  if (GetArenaNoVirtual() == NULL && processor_ != NULL) {
    delete processor_;
  }
  processor_ = NULL;
}
inline const ::CartesiCore::Processor& MachineRequest::_internal_processor() const {
  return *processor_;
}
inline const ::CartesiCore::Processor& MachineRequest::processor() const {
  const ::CartesiCore::Processor* p = processor_;
  // @@protoc_insertion_point(field_get:CartesiCore.MachineRequest.processor)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::Processor*>(
      &::CartesiCore::_Processor_default_instance_);
}
inline ::CartesiCore::Processor* MachineRequest::release_processor() {
  // @@protoc_insertion_point(field_release:CartesiCore.MachineRequest.processor)
  
  ::CartesiCore::Processor* temp = processor_;
  processor_ = NULL;
  return temp;
}
inline ::CartesiCore::Processor* MachineRequest::mutable_processor() {
  
  if (processor_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::Processor>(GetArenaNoVirtual());
    processor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.MachineRequest.processor)
  return processor_;
}
inline void MachineRequest::set_allocated_processor(::CartesiCore::Processor* processor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete processor_;
  }
  if (processor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      processor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, processor, submessage_arena);
    }
    
  } else {
    
  }
  processor_ = processor;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.MachineRequest.processor)
}

// .CartesiCore.ROM rom = 2;
inline bool MachineRequest::has_rom() const {
  return this != internal_default_instance() && rom_ != NULL;
}
inline void MachineRequest::clear_rom() {
  if (GetArenaNoVirtual() == NULL && rom_ != NULL) {
    delete rom_;
  }
  rom_ = NULL;
}
inline const ::CartesiCore::ROM& MachineRequest::_internal_rom() const {
  return *rom_;
}
inline const ::CartesiCore::ROM& MachineRequest::rom() const {
  const ::CartesiCore::ROM* p = rom_;
  // @@protoc_insertion_point(field_get:CartesiCore.MachineRequest.rom)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::ROM*>(
      &::CartesiCore::_ROM_default_instance_);
}
inline ::CartesiCore::ROM* MachineRequest::release_rom() {
  // @@protoc_insertion_point(field_release:CartesiCore.MachineRequest.rom)
  
  ::CartesiCore::ROM* temp = rom_;
  rom_ = NULL;
  return temp;
}
inline ::CartesiCore::ROM* MachineRequest::mutable_rom() {
  
  if (rom_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::ROM>(GetArenaNoVirtual());
    rom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.MachineRequest.rom)
  return rom_;
}
inline void MachineRequest::set_allocated_rom(::CartesiCore::ROM* rom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rom_;
  }
  if (rom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rom, submessage_arena);
    }
    
  } else {
    
  }
  rom_ = rom;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.MachineRequest.rom)
}

// .CartesiCore.RAM ram = 3;
inline bool MachineRequest::has_ram() const {
  return this != internal_default_instance() && ram_ != NULL;
}
inline void MachineRequest::clear_ram() {
  if (GetArenaNoVirtual() == NULL && ram_ != NULL) {
    delete ram_;
  }
  ram_ = NULL;
}
inline const ::CartesiCore::RAM& MachineRequest::_internal_ram() const {
  return *ram_;
}
inline const ::CartesiCore::RAM& MachineRequest::ram() const {
  const ::CartesiCore::RAM* p = ram_;
  // @@protoc_insertion_point(field_get:CartesiCore.MachineRequest.ram)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::RAM*>(
      &::CartesiCore::_RAM_default_instance_);
}
inline ::CartesiCore::RAM* MachineRequest::release_ram() {
  // @@protoc_insertion_point(field_release:CartesiCore.MachineRequest.ram)
  
  ::CartesiCore::RAM* temp = ram_;
  ram_ = NULL;
  return temp;
}
inline ::CartesiCore::RAM* MachineRequest::mutable_ram() {
  
  if (ram_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::RAM>(GetArenaNoVirtual());
    ram_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.MachineRequest.ram)
  return ram_;
}
inline void MachineRequest::set_allocated_ram(::CartesiCore::RAM* ram) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ram_;
  }
  if (ram) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ram = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ram, submessage_arena);
    }
    
  } else {
    
  }
  ram_ = ram;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.MachineRequest.ram)
}

// repeated .CartesiCore.Drive flash = 4;
inline int MachineRequest::flash_size() const {
  return flash_.size();
}
inline void MachineRequest::clear_flash() {
  flash_.Clear();
}
inline ::CartesiCore::Drive* MachineRequest::mutable_flash(int index) {
  // @@protoc_insertion_point(field_mutable:CartesiCore.MachineRequest.flash)
  return flash_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CartesiCore::Drive >*
MachineRequest::mutable_flash() {
  // @@protoc_insertion_point(field_mutable_list:CartesiCore.MachineRequest.flash)
  return &flash_;
}
inline const ::CartesiCore::Drive& MachineRequest::flash(int index) const {
  // @@protoc_insertion_point(field_get:CartesiCore.MachineRequest.flash)
  return flash_.Get(index);
}
inline ::CartesiCore::Drive* MachineRequest::add_flash() {
  // @@protoc_insertion_point(field_add:CartesiCore.MachineRequest.flash)
  return flash_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CartesiCore::Drive >&
MachineRequest::flash() const {
  // @@protoc_insertion_point(field_list:CartesiCore.MachineRequest.flash)
  return flash_;
}

// .CartesiCore.CLINT clint = 5;
inline bool MachineRequest::has_clint() const {
  return this != internal_default_instance() && clint_ != NULL;
}
inline void MachineRequest::clear_clint() {
  if (GetArenaNoVirtual() == NULL && clint_ != NULL) {
    delete clint_;
  }
  clint_ = NULL;
}
inline const ::CartesiCore::CLINT& MachineRequest::_internal_clint() const {
  return *clint_;
}
inline const ::CartesiCore::CLINT& MachineRequest::clint() const {
  const ::CartesiCore::CLINT* p = clint_;
  // @@protoc_insertion_point(field_get:CartesiCore.MachineRequest.clint)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::CLINT*>(
      &::CartesiCore::_CLINT_default_instance_);
}
inline ::CartesiCore::CLINT* MachineRequest::release_clint() {
  // @@protoc_insertion_point(field_release:CartesiCore.MachineRequest.clint)
  
  ::CartesiCore::CLINT* temp = clint_;
  clint_ = NULL;
  return temp;
}
inline ::CartesiCore::CLINT* MachineRequest::mutable_clint() {
  
  if (clint_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::CLINT>(GetArenaNoVirtual());
    clint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.MachineRequest.clint)
  return clint_;
}
inline void MachineRequest::set_allocated_clint(::CartesiCore::CLINT* clint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clint_;
  }
  if (clint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clint, submessage_arena);
    }
    
  } else {
    
  }
  clint_ = clint;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.MachineRequest.clint)
}

// .CartesiCore.HTIF htif = 6;
inline bool MachineRequest::has_htif() const {
  return this != internal_default_instance() && htif_ != NULL;
}
inline void MachineRequest::clear_htif() {
  if (GetArenaNoVirtual() == NULL && htif_ != NULL) {
    delete htif_;
  }
  htif_ = NULL;
}
inline const ::CartesiCore::HTIF& MachineRequest::_internal_htif() const {
  return *htif_;
}
inline const ::CartesiCore::HTIF& MachineRequest::htif() const {
  const ::CartesiCore::HTIF* p = htif_;
  // @@protoc_insertion_point(field_get:CartesiCore.MachineRequest.htif)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::HTIF*>(
      &::CartesiCore::_HTIF_default_instance_);
}
inline ::CartesiCore::HTIF* MachineRequest::release_htif() {
  // @@protoc_insertion_point(field_release:CartesiCore.MachineRequest.htif)
  
  ::CartesiCore::HTIF* temp = htif_;
  htif_ = NULL;
  return temp;
}
inline ::CartesiCore::HTIF* MachineRequest::mutable_htif() {
  
  if (htif_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::HTIF>(GetArenaNoVirtual());
    htif_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.MachineRequest.htif)
  return htif_;
}
inline void MachineRequest::set_allocated_htif(::CartesiCore::HTIF* htif) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete htif_;
  }
  if (htif) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      htif = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, htif, submessage_arena);
    }
    
  } else {
    
  }
  htif_ = htif;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.MachineRequest.htif)
}

// -------------------------------------------------------------------

// RunRequest

// uint64 limit = 1;
inline void RunRequest::clear_limit() {
  limit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RunRequest::limit() const {
  // @@protoc_insertion_point(field_get:CartesiCore.RunRequest.limit)
  return limit_;
}
inline void RunRequest::set_limit(::google::protobuf::uint64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.RunRequest.limit)
}

// -------------------------------------------------------------------

// RunResponse

// uint64 mcycle = 1;
inline void RunResponse::clear_mcycle() {
  mcycle_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RunResponse::mcycle() const {
  // @@protoc_insertion_point(field_get:CartesiCore.RunResponse.mcycle)
  return mcycle_;
}
inline void RunResponse::set_mcycle(::google::protobuf::uint64 value) {
  
  mcycle_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.RunResponse.mcycle)
}

// uint64 tohost = 2;
inline void RunResponse::clear_tohost() {
  tohost_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RunResponse::tohost() const {
  // @@protoc_insertion_point(field_get:CartesiCore.RunResponse.tohost)
  return tohost_;
}
inline void RunResponse::set_tohost(::google::protobuf::uint64 value) {
  
  tohost_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.RunResponse.tohost)
}

// -------------------------------------------------------------------

// Proof

// uint64 address = 1;
inline void Proof::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proof::address() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Proof.address)
  return address_;
}
inline void Proof::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.Proof.address)
}

// uint32 log2_size = 2;
inline void Proof::clear_log2_size() {
  log2_size_ = 0u;
}
inline ::google::protobuf::uint32 Proof::log2_size() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Proof.log2_size)
  return log2_size_;
}
inline void Proof::set_log2_size(::google::protobuf::uint32 value) {
  
  log2_size_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.Proof.log2_size)
}

// .CartesiCore.Hash target_hash = 3;
inline bool Proof::has_target_hash() const {
  return this != internal_default_instance() && target_hash_ != NULL;
}
inline void Proof::clear_target_hash() {
  if (GetArenaNoVirtual() == NULL && target_hash_ != NULL) {
    delete target_hash_;
  }
  target_hash_ = NULL;
}
inline const ::CartesiCore::Hash& Proof::_internal_target_hash() const {
  return *target_hash_;
}
inline const ::CartesiCore::Hash& Proof::target_hash() const {
  const ::CartesiCore::Hash* p = target_hash_;
  // @@protoc_insertion_point(field_get:CartesiCore.Proof.target_hash)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::Hash*>(
      &::CartesiCore::_Hash_default_instance_);
}
inline ::CartesiCore::Hash* Proof::release_target_hash() {
  // @@protoc_insertion_point(field_release:CartesiCore.Proof.target_hash)
  
  ::CartesiCore::Hash* temp = target_hash_;
  target_hash_ = NULL;
  return temp;
}
inline ::CartesiCore::Hash* Proof::mutable_target_hash() {
  
  if (target_hash_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::Hash>(GetArenaNoVirtual());
    target_hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.Proof.target_hash)
  return target_hash_;
}
inline void Proof::set_allocated_target_hash(::CartesiCore::Hash* target_hash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete target_hash_;
  }
  if (target_hash) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_hash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_hash, submessage_arena);
    }
    
  } else {
    
  }
  target_hash_ = target_hash;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Proof.target_hash)
}

// repeated .CartesiCore.Hash sibling_hashes = 4;
inline int Proof::sibling_hashes_size() const {
  return sibling_hashes_.size();
}
inline void Proof::clear_sibling_hashes() {
  sibling_hashes_.Clear();
}
inline ::CartesiCore::Hash* Proof::mutable_sibling_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:CartesiCore.Proof.sibling_hashes)
  return sibling_hashes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CartesiCore::Hash >*
Proof::mutable_sibling_hashes() {
  // @@protoc_insertion_point(field_mutable_list:CartesiCore.Proof.sibling_hashes)
  return &sibling_hashes_;
}
inline const ::CartesiCore::Hash& Proof::sibling_hashes(int index) const {
  // @@protoc_insertion_point(field_get:CartesiCore.Proof.sibling_hashes)
  return sibling_hashes_.Get(index);
}
inline ::CartesiCore::Hash* Proof::add_sibling_hashes() {
  // @@protoc_insertion_point(field_add:CartesiCore.Proof.sibling_hashes)
  return sibling_hashes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CartesiCore::Hash >&
Proof::sibling_hashes() const {
  // @@protoc_insertion_point(field_list:CartesiCore.Proof.sibling_hashes)
  return sibling_hashes_;
}

// .CartesiCore.Hash root_hash = 5;
inline bool Proof::has_root_hash() const {
  return this != internal_default_instance() && root_hash_ != NULL;
}
inline void Proof::clear_root_hash() {
  if (GetArenaNoVirtual() == NULL && root_hash_ != NULL) {
    delete root_hash_;
  }
  root_hash_ = NULL;
}
inline const ::CartesiCore::Hash& Proof::_internal_root_hash() const {
  return *root_hash_;
}
inline const ::CartesiCore::Hash& Proof::root_hash() const {
  const ::CartesiCore::Hash* p = root_hash_;
  // @@protoc_insertion_point(field_get:CartesiCore.Proof.root_hash)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::Hash*>(
      &::CartesiCore::_Hash_default_instance_);
}
inline ::CartesiCore::Hash* Proof::release_root_hash() {
  // @@protoc_insertion_point(field_release:CartesiCore.Proof.root_hash)
  
  ::CartesiCore::Hash* temp = root_hash_;
  root_hash_ = NULL;
  return temp;
}
inline ::CartesiCore::Hash* Proof::mutable_root_hash() {
  
  if (root_hash_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::Hash>(GetArenaNoVirtual());
    root_hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.Proof.root_hash)
  return root_hash_;
}
inline void Proof::set_allocated_root_hash(::CartesiCore::Hash* root_hash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete root_hash_;
  }
  if (root_hash) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      root_hash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root_hash, submessage_arena);
    }
    
  } else {
    
  }
  root_hash_ = root_hash;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Proof.root_hash)
}

// -------------------------------------------------------------------

// Word

// bytes content = 1;
inline void Word::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Word::content() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Word.content)
  return content_.GetNoArena();
}
inline void Word::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.Word.content)
}
#if LANG_CXX11
inline void Word::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.Word.content)
}
#endif
inline void Word::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.Word.content)
}
inline void Word::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.Word.content)
}
inline ::std::string* Word::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:CartesiCore.Word.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Word::release_content() {
  // @@protoc_insertion_point(field_release:CartesiCore.Word.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Word::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Word.content)
}

// -------------------------------------------------------------------

// Access

// .CartesiCore.AccessOperation operation = 1;
inline void Access::clear_operation() {
  operation_ = 0;
}
inline ::CartesiCore::AccessOperation Access::operation() const {
  // @@protoc_insertion_point(field_get:CartesiCore.Access.operation)
  return static_cast< ::CartesiCore::AccessOperation >(operation_);
}
inline void Access::set_operation(::CartesiCore::AccessOperation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.Access.operation)
}

// .CartesiCore.Word read = 2;
inline bool Access::has_read() const {
  return this != internal_default_instance() && read_ != NULL;
}
inline void Access::clear_read() {
  if (GetArenaNoVirtual() == NULL && read_ != NULL) {
    delete read_;
  }
  read_ = NULL;
}
inline const ::CartesiCore::Word& Access::_internal_read() const {
  return *read_;
}
inline const ::CartesiCore::Word& Access::read() const {
  const ::CartesiCore::Word* p = read_;
  // @@protoc_insertion_point(field_get:CartesiCore.Access.read)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::Word*>(
      &::CartesiCore::_Word_default_instance_);
}
inline ::CartesiCore::Word* Access::release_read() {
  // @@protoc_insertion_point(field_release:CartesiCore.Access.read)
  
  ::CartesiCore::Word* temp = read_;
  read_ = NULL;
  return temp;
}
inline ::CartesiCore::Word* Access::mutable_read() {
  
  if (read_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::Word>(GetArenaNoVirtual());
    read_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.Access.read)
  return read_;
}
inline void Access::set_allocated_read(::CartesiCore::Word* read) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete read_;
  }
  if (read) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      read = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read, submessage_arena);
    }
    
  } else {
    
  }
  read_ = read;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Access.read)
}

// .CartesiCore.Word written = 3;
inline bool Access::has_written() const {
  return this != internal_default_instance() && written_ != NULL;
}
inline void Access::clear_written() {
  if (GetArenaNoVirtual() == NULL && written_ != NULL) {
    delete written_;
  }
  written_ = NULL;
}
inline const ::CartesiCore::Word& Access::_internal_written() const {
  return *written_;
}
inline const ::CartesiCore::Word& Access::written() const {
  const ::CartesiCore::Word* p = written_;
  // @@protoc_insertion_point(field_get:CartesiCore.Access.written)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::Word*>(
      &::CartesiCore::_Word_default_instance_);
}
inline ::CartesiCore::Word* Access::release_written() {
  // @@protoc_insertion_point(field_release:CartesiCore.Access.written)
  
  ::CartesiCore::Word* temp = written_;
  written_ = NULL;
  return temp;
}
inline ::CartesiCore::Word* Access::mutable_written() {
  
  if (written_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::Word>(GetArenaNoVirtual());
    written_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.Access.written)
  return written_;
}
inline void Access::set_allocated_written(::CartesiCore::Word* written) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete written_;
  }
  if (written) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      written = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, written, submessage_arena);
    }
    
  } else {
    
  }
  written_ = written;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Access.written)
}

// .CartesiCore.Proof proof = 4;
inline bool Access::has_proof() const {
  return this != internal_default_instance() && proof_ != NULL;
}
inline void Access::clear_proof() {
  if (GetArenaNoVirtual() == NULL && proof_ != NULL) {
    delete proof_;
  }
  proof_ = NULL;
}
inline const ::CartesiCore::Proof& Access::_internal_proof() const {
  return *proof_;
}
inline const ::CartesiCore::Proof& Access::proof() const {
  const ::CartesiCore::Proof* p = proof_;
  // @@protoc_insertion_point(field_get:CartesiCore.Access.proof)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::Proof*>(
      &::CartesiCore::_Proof_default_instance_);
}
inline ::CartesiCore::Proof* Access::release_proof() {
  // @@protoc_insertion_point(field_release:CartesiCore.Access.proof)
  
  ::CartesiCore::Proof* temp = proof_;
  proof_ = NULL;
  return temp;
}
inline ::CartesiCore::Proof* Access::mutable_proof() {
  
  if (proof_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::Proof>(GetArenaNoVirtual());
    proof_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiCore.Access.proof)
  return proof_;
}
inline void Access::set_allocated_proof(::CartesiCore::Proof* proof) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete proof_;
  }
  if (proof) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      proof = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    
  } else {
    
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.Access.proof)
}

// -------------------------------------------------------------------

// BracketNote

// .CartesiCore.BracketNote.BracketNoteType type = 1;
inline void BracketNote::clear_type() {
  type_ = 0;
}
inline ::CartesiCore::BracketNote_BracketNoteType BracketNote::type() const {
  // @@protoc_insertion_point(field_get:CartesiCore.BracketNote.type)
  return static_cast< ::CartesiCore::BracketNote_BracketNoteType >(type_);
}
inline void BracketNote::set_type(::CartesiCore::BracketNote_BracketNoteType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.BracketNote.type)
}

// uint64 where = 2;
inline void BracketNote::clear_where() {
  where_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BracketNote::where() const {
  // @@protoc_insertion_point(field_get:CartesiCore.BracketNote.where)
  return where_;
}
inline void BracketNote::set_where(::google::protobuf::uint64 value) {
  
  where_ = value;
  // @@protoc_insertion_point(field_set:CartesiCore.BracketNote.where)
}

// string text = 3;
inline void BracketNote::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BracketNote::text() const {
  // @@protoc_insertion_point(field_get:CartesiCore.BracketNote.text)
  return text_.GetNoArena();
}
inline void BracketNote::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiCore.BracketNote.text)
}
#if LANG_CXX11
inline void BracketNote::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiCore.BracketNote.text)
}
#endif
inline void BracketNote::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiCore.BracketNote.text)
}
inline void BracketNote::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.BracketNote.text)
}
inline ::std::string* BracketNote::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:CartesiCore.BracketNote.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BracketNote::release_text() {
  // @@protoc_insertion_point(field_release:CartesiCore.BracketNote.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BracketNote::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:CartesiCore.BracketNote.text)
}

// -------------------------------------------------------------------

// AccessLog

// repeated .CartesiCore.Access accesses = 1;
inline int AccessLog::accesses_size() const {
  return accesses_.size();
}
inline void AccessLog::clear_accesses() {
  accesses_.Clear();
}
inline ::CartesiCore::Access* AccessLog::mutable_accesses(int index) {
  // @@protoc_insertion_point(field_mutable:CartesiCore.AccessLog.accesses)
  return accesses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CartesiCore::Access >*
AccessLog::mutable_accesses() {
  // @@protoc_insertion_point(field_mutable_list:CartesiCore.AccessLog.accesses)
  return &accesses_;
}
inline const ::CartesiCore::Access& AccessLog::accesses(int index) const {
  // @@protoc_insertion_point(field_get:CartesiCore.AccessLog.accesses)
  return accesses_.Get(index);
}
inline ::CartesiCore::Access* AccessLog::add_accesses() {
  // @@protoc_insertion_point(field_add:CartesiCore.AccessLog.accesses)
  return accesses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CartesiCore::Access >&
AccessLog::accesses() const {
  // @@protoc_insertion_point(field_list:CartesiCore.AccessLog.accesses)
  return accesses_;
}

// repeated .CartesiCore.BracketNote brackets = 2;
inline int AccessLog::brackets_size() const {
  return brackets_.size();
}
inline void AccessLog::clear_brackets() {
  brackets_.Clear();
}
inline ::CartesiCore::BracketNote* AccessLog::mutable_brackets(int index) {
  // @@protoc_insertion_point(field_mutable:CartesiCore.AccessLog.brackets)
  return brackets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CartesiCore::BracketNote >*
AccessLog::mutable_brackets() {
  // @@protoc_insertion_point(field_mutable_list:CartesiCore.AccessLog.brackets)
  return &brackets_;
}
inline const ::CartesiCore::BracketNote& AccessLog::brackets(int index) const {
  // @@protoc_insertion_point(field_get:CartesiCore.AccessLog.brackets)
  return brackets_.Get(index);
}
inline ::CartesiCore::BracketNote* AccessLog::add_brackets() {
  // @@protoc_insertion_point(field_add:CartesiCore.AccessLog.brackets)
  return brackets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CartesiCore::BracketNote >&
AccessLog::brackets() const {
  // @@protoc_insertion_point(field_list:CartesiCore.AccessLog.brackets)
  return brackets_;
}

// repeated string notes = 3;
inline int AccessLog::notes_size() const {
  return notes_.size();
}
inline void AccessLog::clear_notes() {
  notes_.Clear();
}
inline const ::std::string& AccessLog::notes(int index) const {
  // @@protoc_insertion_point(field_get:CartesiCore.AccessLog.notes)
  return notes_.Get(index);
}
inline ::std::string* AccessLog::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:CartesiCore.AccessLog.notes)
  return notes_.Mutable(index);
}
inline void AccessLog::set_notes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.AccessLog.notes)
  notes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AccessLog::set_notes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CartesiCore.AccessLog.notes)
  notes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AccessLog::set_notes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  notes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CartesiCore.AccessLog.notes)
}
inline void AccessLog::set_notes(int index, const char* value, size_t size) {
  notes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CartesiCore.AccessLog.notes)
}
inline ::std::string* AccessLog::add_notes() {
  // @@protoc_insertion_point(field_add_mutable:CartesiCore.AccessLog.notes)
  return notes_.Add();
}
inline void AccessLog::add_notes(const ::std::string& value) {
  notes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CartesiCore.AccessLog.notes)
}
#if LANG_CXX11
inline void AccessLog::add_notes(::std::string&& value) {
  notes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CartesiCore.AccessLog.notes)
}
#endif
inline void AccessLog::add_notes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  notes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CartesiCore.AccessLog.notes)
}
inline void AccessLog::add_notes(const char* value, size_t size) {
  notes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CartesiCore.AccessLog.notes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AccessLog::notes() const {
  // @@protoc_insertion_point(field_list:CartesiCore.AccessLog.notes)
  return notes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AccessLog::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:CartesiCore.AccessLog.notes)
  return &notes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CartesiCore

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CartesiCore::BracketNote_BracketNoteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CartesiCore::BracketNote_BracketNoteType>() {
  return ::CartesiCore::BracketNote_BracketNoteType_descriptor();
}
template <> struct is_proto_enum< ::CartesiCore::AccessOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CartesiCore::AccessOperation>() {
  return ::CartesiCore::AccessOperation_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cartesi_2dbase_2eproto

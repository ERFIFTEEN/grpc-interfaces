// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: manager.proto

#include "manager.pb.h"
#include "manager.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace CartesiManager {

static const char* MachineManager_method_names[] = {
  "/CartesiManager.MachineManager/NewSession",
  "/CartesiManager.MachineManager/SessionRun",
  "/CartesiManager.MachineManager/SessionStep",
  "/CartesiManager.MachineManager/CommunicateReference",
};

std::unique_ptr< MachineManager::Stub> MachineManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MachineManager::Stub> stub(new MachineManager::Stub(channel));
  return stub;
}

MachineManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_NewSession_(MachineManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SessionRun_(MachineManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SessionStep_(MachineManager_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CommunicateReference_(MachineManager_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MachineManager::Stub::NewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::CartesiManager::MachineHash* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewSession_, context, request, response);
}

void MachineManager::Stub::experimental_async::NewSession(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest* request, ::CartesiManager::MachineHash* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewSession_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiManager::MachineHash>* MachineManager::Stub::AsyncNewSessionRaw(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiManager::MachineHash>::Create(channel_.get(), cq, rpcmethod_NewSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiManager::MachineHash>* MachineManager::Stub::PrepareAsyncNewSessionRaw(::grpc::ClientContext* context, const ::CartesiManager::NewSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiManager::MachineHash>::Create(channel_.get(), cq, rpcmethod_NewSession_, context, request, false);
}

::grpc::Status MachineManager::Stub::SessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::CartesiManager::SessionRunResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SessionRun_, context, request, response);
}

void MachineManager::Stub::experimental_async::SessionRun(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest* request, ::CartesiManager::SessionRunResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SessionRun_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionRunResponse>* MachineManager::Stub::AsyncSessionRunRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiManager::SessionRunResponse>::Create(channel_.get(), cq, rpcmethod_SessionRun_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionRunResponse>* MachineManager::Stub::PrepareAsyncSessionRunRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiManager::SessionRunResponse>::Create(channel_.get(), cq, rpcmethod_SessionRun_, context, request, false);
}

::grpc::Status MachineManager::Stub::SessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::CartesiManager::SessionStepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SessionStep_, context, request, response);
}

void MachineManager::Stub::experimental_async::SessionStep(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest* request, ::CartesiManager::SessionStepResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SessionStep_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionStepResponse>* MachineManager::Stub::AsyncSessionStepRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiManager::SessionStepResponse>::Create(channel_.get(), cq, rpcmethod_SessionStep_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiManager::SessionStepResponse>* MachineManager::Stub::PrepareAsyncSessionStepRaw(::grpc::ClientContext* context, const ::CartesiManager::SessionStepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiManager::SessionStepResponse>::Create(channel_.get(), cq, rpcmethod_SessionStep_, context, request, false);
}

::grpc::Status MachineManager::Stub::CommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::CartesiCore::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CommunicateReference_, context, request, response);
}

void MachineManager::Stub::experimental_async::CommunicateReference(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest* request, ::CartesiCore::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CommunicateReference_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* MachineManager::Stub::AsyncCommunicateReferenceRaw(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_CommunicateReference_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CartesiCore::Void>* MachineManager::Stub::PrepareAsyncCommunicateReferenceRaw(::grpc::ClientContext* context, const ::CartesiManager::ReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CartesiCore::Void>::Create(channel_.get(), cq, rpcmethod_CommunicateReference_, context, request, false);
}

MachineManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MachineManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MachineManager::Service, ::CartesiManager::NewSessionRequest, ::CartesiManager::MachineHash>(
          std::mem_fn(&MachineManager::Service::NewSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MachineManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MachineManager::Service, ::CartesiManager::SessionRunRequest, ::CartesiManager::SessionRunResponse>(
          std::mem_fn(&MachineManager::Service::SessionRun), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MachineManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MachineManager::Service, ::CartesiManager::SessionStepRequest, ::CartesiManager::SessionStepResponse>(
          std::mem_fn(&MachineManager::Service::SessionStep), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MachineManager_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MachineManager::Service, ::CartesiManager::ReferenceRequest, ::CartesiCore::Void>(
          std::mem_fn(&MachineManager::Service::CommunicateReference), this)));
}

MachineManager::Service::~Service() {
}

::grpc::Status MachineManager::Service::NewSession(::grpc::ServerContext* context, const ::CartesiManager::NewSessionRequest* request, ::CartesiManager::MachineHash* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MachineManager::Service::SessionRun(::grpc::ServerContext* context, const ::CartesiManager::SessionRunRequest* request, ::CartesiManager::SessionRunResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MachineManager::Service::SessionStep(::grpc::ServerContext* context, const ::CartesiManager::SessionStepRequest* request, ::CartesiManager::SessionStepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MachineManager::Service::CommunicateReference(::grpc::ServerContext* context, const ::CartesiManager::ReferenceRequest* request, ::CartesiCore::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CartesiManager


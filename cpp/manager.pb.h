// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manager.proto

#ifndef PROTOBUF_INCLUDED_manager_2eproto
#define PROTOBUF_INCLUDED_manager_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartesi-base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_manager_2eproto 

namespace protobuf_manager_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_manager_2eproto
namespace CartesiManager {
class ExecutionSummary;
class ExecutionSummaryDefaultTypeInternal;
extern ExecutionSummaryDefaultTypeInternal _ExecutionSummary_default_instance_;
class MachineHash;
class MachineHashDefaultTypeInternal;
extern MachineHashDefaultTypeInternal _MachineHash_default_instance_;
class NewSessionRequest;
class NewSessionRequestDefaultTypeInternal;
extern NewSessionRequestDefaultTypeInternal _NewSessionRequest_default_instance_;
class ReferenceRequest;
class ReferenceRequestDefaultTypeInternal;
extern ReferenceRequestDefaultTypeInternal _ReferenceRequest_default_instance_;
class SessionRunRequest;
class SessionRunRequestDefaultTypeInternal;
extern SessionRunRequestDefaultTypeInternal _SessionRunRequest_default_instance_;
class SessionRunResponse;
class SessionRunResponseDefaultTypeInternal;
extern SessionRunResponseDefaultTypeInternal _SessionRunResponse_default_instance_;
class SessionStepRequest;
class SessionStepRequestDefaultTypeInternal;
extern SessionStepRequestDefaultTypeInternal _SessionStepRequest_default_instance_;
class SessionStepResponse;
class SessionStepResponseDefaultTypeInternal;
extern SessionStepResponseDefaultTypeInternal _SessionStepResponse_default_instance_;
}  // namespace CartesiManager
namespace google {
namespace protobuf {
template<> ::CartesiManager::ExecutionSummary* Arena::CreateMaybeMessage<::CartesiManager::ExecutionSummary>(Arena*);
template<> ::CartesiManager::MachineHash* Arena::CreateMaybeMessage<::CartesiManager::MachineHash>(Arena*);
template<> ::CartesiManager::NewSessionRequest* Arena::CreateMaybeMessage<::CartesiManager::NewSessionRequest>(Arena*);
template<> ::CartesiManager::ReferenceRequest* Arena::CreateMaybeMessage<::CartesiManager::ReferenceRequest>(Arena*);
template<> ::CartesiManager::SessionRunRequest* Arena::CreateMaybeMessage<::CartesiManager::SessionRunRequest>(Arena*);
template<> ::CartesiManager::SessionRunResponse* Arena::CreateMaybeMessage<::CartesiManager::SessionRunResponse>(Arena*);
template<> ::CartesiManager::SessionStepRequest* Arena::CreateMaybeMessage<::CartesiManager::SessionStepRequest>(Arena*);
template<> ::CartesiManager::SessionStepResponse* Arena::CreateMaybeMessage<::CartesiManager::SessionStepResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CartesiManager {

// ===================================================================

class NewSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiManager.NewSessionRequest) */ {
 public:
  NewSessionRequest();
  virtual ~NewSessionRequest();

  NewSessionRequest(const NewSessionRequest& from);

  inline NewSessionRequest& operator=(const NewSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewSessionRequest(NewSessionRequest&& from) noexcept
    : NewSessionRequest() {
    *this = ::std::move(from);
  }

  inline NewSessionRequest& operator=(NewSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewSessionRequest* internal_default_instance() {
    return reinterpret_cast<const NewSessionRequest*>(
               &_NewSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NewSessionRequest* other);
  friend void swap(NewSessionRequest& a, NewSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewSessionRequest* New() const final {
    return CreateMaybeMessage<NewSessionRequest>(NULL);
  }

  NewSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewSessionRequest& from);
  void MergeFrom(const NewSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // .CartesiCore.MachineRequest machine = 1;
  bool has_machine() const;
  void clear_machine();
  static const int kMachineFieldNumber = 1;
  private:
  const ::CartesiCore::MachineRequest& _internal_machine() const;
  public:
  const ::CartesiCore::MachineRequest& machine() const;
  ::CartesiCore::MachineRequest* release_machine();
  ::CartesiCore::MachineRequest* mutable_machine();
  void set_allocated_machine(::CartesiCore::MachineRequest* machine);

  // @@protoc_insertion_point(class_scope:CartesiManager.NewSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::CartesiCore::MachineRequest* machine_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MachineHash : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiManager.MachineHash) */ {
 public:
  MachineHash();
  virtual ~MachineHash();

  MachineHash(const MachineHash& from);

  inline MachineHash& operator=(const MachineHash& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MachineHash(MachineHash&& from) noexcept
    : MachineHash() {
    *this = ::std::move(from);
  }

  inline MachineHash& operator=(MachineHash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineHash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MachineHash* internal_default_instance() {
    return reinterpret_cast<const MachineHash*>(
               &_MachineHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MachineHash* other);
  friend void swap(MachineHash& a, MachineHash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MachineHash* New() const final {
    return CreateMaybeMessage<MachineHash>(NULL);
  }

  MachineHash* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MachineHash>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MachineHash& from);
  void MergeFrom(const MachineHash& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineHash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:CartesiManager.MachineHash)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionRunRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiManager.SessionRunRequest) */ {
 public:
  SessionRunRequest();
  virtual ~SessionRunRequest();

  SessionRunRequest(const SessionRunRequest& from);

  inline SessionRunRequest& operator=(const SessionRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionRunRequest(SessionRunRequest&& from) noexcept
    : SessionRunRequest() {
    *this = ::std::move(from);
  }

  inline SessionRunRequest& operator=(SessionRunRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionRunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRunRequest* internal_default_instance() {
    return reinterpret_cast<const SessionRunRequest*>(
               &_SessionRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SessionRunRequest* other);
  friend void swap(SessionRunRequest& a, SessionRunRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionRunRequest* New() const final {
    return CreateMaybeMessage<SessionRunRequest>(NULL);
  }

  SessionRunRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SessionRunRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SessionRunRequest& from);
  void MergeFrom(const SessionRunRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRunRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 times = 2;
  int times_size() const;
  void clear_times();
  static const int kTimesFieldNumber = 2;
  ::google::protobuf::uint64 times(int index) const;
  void set_times(int index, ::google::protobuf::uint64 value);
  void add_times(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      times() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_times();

  // string session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:CartesiManager.SessionRunRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > times_;
  mutable int _times_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecutionSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiManager.ExecutionSummary) */ {
 public:
  ExecutionSummary();
  virtual ~ExecutionSummary();

  ExecutionSummary(const ExecutionSummary& from);

  inline ExecutionSummary& operator=(const ExecutionSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionSummary(ExecutionSummary&& from) noexcept
    : ExecutionSummary() {
    *this = ::std::move(from);
  }

  inline ExecutionSummary& operator=(ExecutionSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionSummary* internal_default_instance() {
    return reinterpret_cast<const ExecutionSummary*>(
               &_ExecutionSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ExecutionSummary* other);
  friend void swap(ExecutionSummary& a, ExecutionSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionSummary* New() const final {
    return CreateMaybeMessage<ExecutionSummary>(NULL);
  }

  ExecutionSummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionSummary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionSummary& from);
  void MergeFrom(const ExecutionSummary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CartesiCore.RunResponse summary = 1;
  bool has_summary() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 1;
  private:
  const ::CartesiCore::RunResponse& _internal_summary() const;
  public:
  const ::CartesiCore::RunResponse& summary() const;
  ::CartesiCore::RunResponse* release_summary();
  ::CartesiCore::RunResponse* mutable_summary();
  void set_allocated_summary(::CartesiCore::RunResponse* summary);

  // .CartesiManager.MachineHash machine_hash = 2;
  bool has_machine_hash() const;
  void clear_machine_hash();
  static const int kMachineHashFieldNumber = 2;
  private:
  const ::CartesiManager::MachineHash& _internal_machine_hash() const;
  public:
  const ::CartesiManager::MachineHash& machine_hash() const;
  ::CartesiManager::MachineHash* release_machine_hash();
  ::CartesiManager::MachineHash* mutable_machine_hash();
  void set_allocated_machine_hash(::CartesiManager::MachineHash* machine_hash);

  // @@protoc_insertion_point(class_scope:CartesiManager.ExecutionSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CartesiCore::RunResponse* summary_;
  ::CartesiManager::MachineHash* machine_hash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionRunResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiManager.SessionRunResponse) */ {
 public:
  SessionRunResponse();
  virtual ~SessionRunResponse();

  SessionRunResponse(const SessionRunResponse& from);

  inline SessionRunResponse& operator=(const SessionRunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionRunResponse(SessionRunResponse&& from) noexcept
    : SessionRunResponse() {
    *this = ::std::move(from);
  }

  inline SessionRunResponse& operator=(SessionRunResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionRunResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRunResponse* internal_default_instance() {
    return reinterpret_cast<const SessionRunResponse*>(
               &_SessionRunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SessionRunResponse* other);
  friend void swap(SessionRunResponse& a, SessionRunResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionRunResponse* New() const final {
    return CreateMaybeMessage<SessionRunResponse>(NULL);
  }

  SessionRunResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SessionRunResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SessionRunResponse& from);
  void MergeFrom(const SessionRunResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRunResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CartesiManager.ExecutionSummary executions = 1;
  int executions_size() const;
  void clear_executions();
  static const int kExecutionsFieldNumber = 1;
  ::CartesiManager::ExecutionSummary* mutable_executions(int index);
  ::google::protobuf::RepeatedPtrField< ::CartesiManager::ExecutionSummary >*
      mutable_executions();
  const ::CartesiManager::ExecutionSummary& executions(int index) const;
  ::CartesiManager::ExecutionSummary* add_executions();
  const ::google::protobuf::RepeatedPtrField< ::CartesiManager::ExecutionSummary >&
      executions() const;

  // @@protoc_insertion_point(class_scope:CartesiManager.SessionRunResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CartesiManager::ExecutionSummary > executions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionStepRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiManager.SessionStepRequest) */ {
 public:
  SessionStepRequest();
  virtual ~SessionStepRequest();

  SessionStepRequest(const SessionStepRequest& from);

  inline SessionStepRequest& operator=(const SessionStepRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionStepRequest(SessionStepRequest&& from) noexcept
    : SessionStepRequest() {
    *this = ::std::move(from);
  }

  inline SessionStepRequest& operator=(SessionStepRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionStepRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionStepRequest* internal_default_instance() {
    return reinterpret_cast<const SessionStepRequest*>(
               &_SessionStepRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SessionStepRequest* other);
  friend void swap(SessionStepRequest& a, SessionStepRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionStepRequest* New() const final {
    return CreateMaybeMessage<SessionStepRequest>(NULL);
  }

  SessionStepRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SessionStepRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SessionStepRequest& from);
  void MergeFrom(const SessionStepRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionStepRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // uint64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CartesiManager.SessionStepRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::uint64 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionStepResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiManager.SessionStepResponse) */ {
 public:
  SessionStepResponse();
  virtual ~SessionStepResponse();

  SessionStepResponse(const SessionStepResponse& from);

  inline SessionStepResponse& operator=(const SessionStepResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionStepResponse(SessionStepResponse&& from) noexcept
    : SessionStepResponse() {
    *this = ::std::move(from);
  }

  inline SessionStepResponse& operator=(SessionStepResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionStepResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionStepResponse* internal_default_instance() {
    return reinterpret_cast<const SessionStepResponse*>(
               &_SessionStepResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SessionStepResponse* other);
  friend void swap(SessionStepResponse& a, SessionStepResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionStepResponse* New() const final {
    return CreateMaybeMessage<SessionStepResponse>(NULL);
  }

  SessionStepResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SessionStepResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SessionStepResponse& from);
  void MergeFrom(const SessionStepResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionStepResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CartesiCore.AccessLog log = 1;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 1;
  private:
  const ::CartesiCore::AccessLog& _internal_log() const;
  public:
  const ::CartesiCore::AccessLog& log() const;
  ::CartesiCore::AccessLog* release_log();
  ::CartesiCore::AccessLog* mutable_log();
  void set_allocated_log(::CartesiCore::AccessLog* log);

  // @@protoc_insertion_point(class_scope:CartesiManager.SessionStepResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CartesiCore::AccessLog* log_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CartesiManager.ReferenceRequest) */ {
 public:
  ReferenceRequest();
  virtual ~ReferenceRequest();

  ReferenceRequest(const ReferenceRequest& from);

  inline ReferenceRequest& operator=(const ReferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReferenceRequest(ReferenceRequest&& from) noexcept
    : ReferenceRequest() {
    *this = ::std::move(from);
  }

  inline ReferenceRequest& operator=(ReferenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferenceRequest* internal_default_instance() {
    return reinterpret_cast<const ReferenceRequest*>(
               &_ReferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReferenceRequest* other);
  friend void swap(ReferenceRequest& a, ReferenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReferenceRequest* New() const final {
    return CreateMaybeMessage<ReferenceRequest>(NULL);
  }

  ReferenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReferenceRequest& from);
  void MergeFrom(const ReferenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:CartesiManager.ReferenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manager_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewSessionRequest

// .CartesiCore.MachineRequest machine = 1;
inline bool NewSessionRequest::has_machine() const {
  return this != internal_default_instance() && machine_ != NULL;
}
inline const ::CartesiCore::MachineRequest& NewSessionRequest::_internal_machine() const {
  return *machine_;
}
inline const ::CartesiCore::MachineRequest& NewSessionRequest::machine() const {
  const ::CartesiCore::MachineRequest* p = machine_;
  // @@protoc_insertion_point(field_get:CartesiManager.NewSessionRequest.machine)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::MachineRequest*>(
      &::CartesiCore::_MachineRequest_default_instance_);
}
inline ::CartesiCore::MachineRequest* NewSessionRequest::release_machine() {
  // @@protoc_insertion_point(field_release:CartesiManager.NewSessionRequest.machine)
  
  ::CartesiCore::MachineRequest* temp = machine_;
  machine_ = NULL;
  return temp;
}
inline ::CartesiCore::MachineRequest* NewSessionRequest::mutable_machine() {
  
  if (machine_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::MachineRequest>(GetArenaNoVirtual());
    machine_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiManager.NewSessionRequest.machine)
  return machine_;
}
inline void NewSessionRequest::set_allocated_machine(::CartesiCore::MachineRequest* machine) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(machine_);
  }
  if (machine) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      machine = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, machine, submessage_arena);
    }
    
  } else {
    
  }
  machine_ = machine;
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.NewSessionRequest.machine)
}

// string session_id = 2;
inline void NewSessionRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:CartesiManager.NewSessionRequest.session_id)
  return session_id_.GetNoArena();
}
inline void NewSessionRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiManager.NewSessionRequest.session_id)
}
#if LANG_CXX11
inline void NewSessionRequest::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiManager.NewSessionRequest.session_id)
}
#endif
inline void NewSessionRequest::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiManager.NewSessionRequest.session_id)
}
inline void NewSessionRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiManager.NewSessionRequest.session_id)
}
inline ::std::string* NewSessionRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:CartesiManager.NewSessionRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewSessionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:CartesiManager.NewSessionRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewSessionRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.NewSessionRequest.session_id)
}

// -------------------------------------------------------------------

// MachineHash

// bytes hash = 1;
inline void MachineHash::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MachineHash::hash() const {
  // @@protoc_insertion_point(field_get:CartesiManager.MachineHash.hash)
  return hash_.GetNoArena();
}
inline void MachineHash::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiManager.MachineHash.hash)
}
#if LANG_CXX11
inline void MachineHash::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiManager.MachineHash.hash)
}
#endif
inline void MachineHash::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiManager.MachineHash.hash)
}
inline void MachineHash::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiManager.MachineHash.hash)
}
inline ::std::string* MachineHash::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:CartesiManager.MachineHash.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineHash::release_hash() {
  // @@protoc_insertion_point(field_release:CartesiManager.MachineHash.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineHash::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.MachineHash.hash)
}

// -------------------------------------------------------------------

// SessionRunRequest

// string session_id = 1;
inline void SessionRunRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionRunRequest::session_id() const {
  // @@protoc_insertion_point(field_get:CartesiManager.SessionRunRequest.session_id)
  return session_id_.GetNoArena();
}
inline void SessionRunRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiManager.SessionRunRequest.session_id)
}
#if LANG_CXX11
inline void SessionRunRequest::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiManager.SessionRunRequest.session_id)
}
#endif
inline void SessionRunRequest::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiManager.SessionRunRequest.session_id)
}
inline void SessionRunRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiManager.SessionRunRequest.session_id)
}
inline ::std::string* SessionRunRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:CartesiManager.SessionRunRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionRunRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:CartesiManager.SessionRunRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionRunRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.SessionRunRequest.session_id)
}

// repeated uint64 times = 2;
inline int SessionRunRequest::times_size() const {
  return times_.size();
}
inline void SessionRunRequest::clear_times() {
  times_.Clear();
}
inline ::google::protobuf::uint64 SessionRunRequest::times(int index) const {
  // @@protoc_insertion_point(field_get:CartesiManager.SessionRunRequest.times)
  return times_.Get(index);
}
inline void SessionRunRequest::set_times(int index, ::google::protobuf::uint64 value) {
  times_.Set(index, value);
  // @@protoc_insertion_point(field_set:CartesiManager.SessionRunRequest.times)
}
inline void SessionRunRequest::add_times(::google::protobuf::uint64 value) {
  times_.Add(value);
  // @@protoc_insertion_point(field_add:CartesiManager.SessionRunRequest.times)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SessionRunRequest::times() const {
  // @@protoc_insertion_point(field_list:CartesiManager.SessionRunRequest.times)
  return times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SessionRunRequest::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:CartesiManager.SessionRunRequest.times)
  return &times_;
}

// -------------------------------------------------------------------

// ExecutionSummary

// .CartesiCore.RunResponse summary = 1;
inline bool ExecutionSummary::has_summary() const {
  return this != internal_default_instance() && summary_ != NULL;
}
inline const ::CartesiCore::RunResponse& ExecutionSummary::_internal_summary() const {
  return *summary_;
}
inline const ::CartesiCore::RunResponse& ExecutionSummary::summary() const {
  const ::CartesiCore::RunResponse* p = summary_;
  // @@protoc_insertion_point(field_get:CartesiManager.ExecutionSummary.summary)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::RunResponse*>(
      &::CartesiCore::_RunResponse_default_instance_);
}
inline ::CartesiCore::RunResponse* ExecutionSummary::release_summary() {
  // @@protoc_insertion_point(field_release:CartesiManager.ExecutionSummary.summary)
  
  ::CartesiCore::RunResponse* temp = summary_;
  summary_ = NULL;
  return temp;
}
inline ::CartesiCore::RunResponse* ExecutionSummary::mutable_summary() {
  
  if (summary_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::RunResponse>(GetArenaNoVirtual());
    summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiManager.ExecutionSummary.summary)
  return summary_;
}
inline void ExecutionSummary::set_allocated_summary(::CartesiCore::RunResponse* summary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(summary_);
  }
  if (summary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      summary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    
  } else {
    
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.ExecutionSummary.summary)
}

// .CartesiManager.MachineHash machine_hash = 2;
inline bool ExecutionSummary::has_machine_hash() const {
  return this != internal_default_instance() && machine_hash_ != NULL;
}
inline void ExecutionSummary::clear_machine_hash() {
  if (GetArenaNoVirtual() == NULL && machine_hash_ != NULL) {
    delete machine_hash_;
  }
  machine_hash_ = NULL;
}
inline const ::CartesiManager::MachineHash& ExecutionSummary::_internal_machine_hash() const {
  return *machine_hash_;
}
inline const ::CartesiManager::MachineHash& ExecutionSummary::machine_hash() const {
  const ::CartesiManager::MachineHash* p = machine_hash_;
  // @@protoc_insertion_point(field_get:CartesiManager.ExecutionSummary.machine_hash)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiManager::MachineHash*>(
      &::CartesiManager::_MachineHash_default_instance_);
}
inline ::CartesiManager::MachineHash* ExecutionSummary::release_machine_hash() {
  // @@protoc_insertion_point(field_release:CartesiManager.ExecutionSummary.machine_hash)
  
  ::CartesiManager::MachineHash* temp = machine_hash_;
  machine_hash_ = NULL;
  return temp;
}
inline ::CartesiManager::MachineHash* ExecutionSummary::mutable_machine_hash() {
  
  if (machine_hash_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiManager::MachineHash>(GetArenaNoVirtual());
    machine_hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiManager.ExecutionSummary.machine_hash)
  return machine_hash_;
}
inline void ExecutionSummary::set_allocated_machine_hash(::CartesiManager::MachineHash* machine_hash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete machine_hash_;
  }
  if (machine_hash) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      machine_hash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, machine_hash, submessage_arena);
    }
    
  } else {
    
  }
  machine_hash_ = machine_hash;
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.ExecutionSummary.machine_hash)
}

// -------------------------------------------------------------------

// SessionRunResponse

// repeated .CartesiManager.ExecutionSummary executions = 1;
inline int SessionRunResponse::executions_size() const {
  return executions_.size();
}
inline void SessionRunResponse::clear_executions() {
  executions_.Clear();
}
inline ::CartesiManager::ExecutionSummary* SessionRunResponse::mutable_executions(int index) {
  // @@protoc_insertion_point(field_mutable:CartesiManager.SessionRunResponse.executions)
  return executions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CartesiManager::ExecutionSummary >*
SessionRunResponse::mutable_executions() {
  // @@protoc_insertion_point(field_mutable_list:CartesiManager.SessionRunResponse.executions)
  return &executions_;
}
inline const ::CartesiManager::ExecutionSummary& SessionRunResponse::executions(int index) const {
  // @@protoc_insertion_point(field_get:CartesiManager.SessionRunResponse.executions)
  return executions_.Get(index);
}
inline ::CartesiManager::ExecutionSummary* SessionRunResponse::add_executions() {
  // @@protoc_insertion_point(field_add:CartesiManager.SessionRunResponse.executions)
  return executions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CartesiManager::ExecutionSummary >&
SessionRunResponse::executions() const {
  // @@protoc_insertion_point(field_list:CartesiManager.SessionRunResponse.executions)
  return executions_;
}

// -------------------------------------------------------------------

// SessionStepRequest

// string session_id = 1;
inline void SessionStepRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionStepRequest::session_id() const {
  // @@protoc_insertion_point(field_get:CartesiManager.SessionStepRequest.session_id)
  return session_id_.GetNoArena();
}
inline void SessionStepRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiManager.SessionStepRequest.session_id)
}
#if LANG_CXX11
inline void SessionStepRequest::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiManager.SessionStepRequest.session_id)
}
#endif
inline void SessionStepRequest::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiManager.SessionStepRequest.session_id)
}
inline void SessionStepRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiManager.SessionStepRequest.session_id)
}
inline ::std::string* SessionStepRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:CartesiManager.SessionStepRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionStepRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:CartesiManager.SessionStepRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionStepRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.SessionStepRequest.session_id)
}

// uint64 time = 2;
inline void SessionStepRequest::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SessionStepRequest::time() const {
  // @@protoc_insertion_point(field_get:CartesiManager.SessionStepRequest.time)
  return time_;
}
inline void SessionStepRequest::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:CartesiManager.SessionStepRequest.time)
}

// -------------------------------------------------------------------

// SessionStepResponse

// .CartesiCore.AccessLog log = 1;
inline bool SessionStepResponse::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline const ::CartesiCore::AccessLog& SessionStepResponse::_internal_log() const {
  return *log_;
}
inline const ::CartesiCore::AccessLog& SessionStepResponse::log() const {
  const ::CartesiCore::AccessLog* p = log_;
  // @@protoc_insertion_point(field_get:CartesiManager.SessionStepResponse.log)
  return p != NULL ? *p : *reinterpret_cast<const ::CartesiCore::AccessLog*>(
      &::CartesiCore::_AccessLog_default_instance_);
}
inline ::CartesiCore::AccessLog* SessionStepResponse::release_log() {
  // @@protoc_insertion_point(field_release:CartesiManager.SessionStepResponse.log)
  
  ::CartesiCore::AccessLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::CartesiCore::AccessLog* SessionStepResponse::mutable_log() {
  
  if (log_ == NULL) {
    auto* p = CreateMaybeMessage<::CartesiCore::AccessLog>(GetArenaNoVirtual());
    log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CartesiManager.SessionStepResponse.log)
  return log_;
}
inline void SessionStepResponse::set_allocated_log(::CartesiCore::AccessLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(log_);
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.SessionStepResponse.log)
}

// -------------------------------------------------------------------

// ReferenceRequest

// string session_id = 1;
inline void ReferenceRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReferenceRequest::session_id() const {
  // @@protoc_insertion_point(field_get:CartesiManager.ReferenceRequest.session_id)
  return session_id_.GetNoArena();
}
inline void ReferenceRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiManager.ReferenceRequest.session_id)
}
#if LANG_CXX11
inline void ReferenceRequest::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiManager.ReferenceRequest.session_id)
}
#endif
inline void ReferenceRequest::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiManager.ReferenceRequest.session_id)
}
inline void ReferenceRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiManager.ReferenceRequest.session_id)
}
inline ::std::string* ReferenceRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:CartesiManager.ReferenceRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReferenceRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:CartesiManager.ReferenceRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.ReferenceRequest.session_id)
}

// string address = 2;
inline void ReferenceRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReferenceRequest::address() const {
  // @@protoc_insertion_point(field_get:CartesiManager.ReferenceRequest.address)
  return address_.GetNoArena();
}
inline void ReferenceRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CartesiManager.ReferenceRequest.address)
}
#if LANG_CXX11
inline void ReferenceRequest::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CartesiManager.ReferenceRequest.address)
}
#endif
inline void ReferenceRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CartesiManager.ReferenceRequest.address)
}
inline void ReferenceRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CartesiManager.ReferenceRequest.address)
}
inline ::std::string* ReferenceRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:CartesiManager.ReferenceRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReferenceRequest::release_address() {
  // @@protoc_insertion_point(field_release:CartesiManager.ReferenceRequest.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:CartesiManager.ReferenceRequest.address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CartesiManager

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_manager_2eproto
